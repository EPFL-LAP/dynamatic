module {
  hw.module @matching(in %num_edges : !handshake.channel<i32>, in %start : !handshake.control<>, in %clk : i1, in %rst : i1, out out0 : !handshake.channel<i32>, out end : !handshake.control<>) {
    %fork0.outs_0, %fork0.outs_1, %fork0.outs_2, %fork0.outs_3 = hw.instance "fork0" @handshake_fork_0(ins: %start: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.control<>, outs_1: !handshake.control<>, outs_2: !handshake.control<>, outs_3: !handshake.control<>)
    %constant0.outs = hw.instance "constant0" @handshake_constant_0(ctrl: %fork0.outs_3: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i32>)
    %cond_br10.trueOut, %cond_br10.falseOut = hw.instance "cond_br10" @handshake_cond_br_0(condition: %fork5.outs_3: !handshake.channel<i1>, data: %fork3.outs_1: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (trueOut: !handshake.channel<i32>, falseOut: !handshake.channel<i32>)
    hw.instance "sink0" @handshake_sink_0(ins: %cond_br10.falseOut: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> ()
    %constant1.outs = hw.instance "constant1" @handshake_constant_1(ctrl: %fork0.outs_2: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i1>)
    %fork1.outs_0, %fork1.outs_1 = hw.instance "fork1" @handshake_fork_1(ins: %constant1.outs: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i1>, outs_1: !handshake.channel<i1>)
    %extsi0.outs = hw.instance "extsi0" @handshake_extsi_0(ins: %fork1.outs_1: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i32>)
    %merge0.outs = hw.instance "merge0" @handshake_merge_0(ins_0: %fork1.outs_0: !handshake.channel<i1>, ins_1: %fork5.outs_4: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i1>)
    %buffer0.outs = hw.instance "buffer0" @handshake_buffer_0(ins: %merge0.outs: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i1>)
    %buffer1.outs = hw.instance "buffer1" @handshake_buffer_1(ins: %buffer0.outs: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i1>)
    %fork2.outs_0, %fork2.outs_1, %fork2.outs_2, %fork2.outs_3 = hw.instance "fork2" @handshake_fork_2(ins: %buffer1.outs: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i1>, outs_1: !handshake.channel<i1>, outs_2: !handshake.channel<i1>, outs_3: !handshake.channel<i1>)
    %mux0.outs = hw.instance "mux0" @handshake_mux_0(index: %fork2.outs_3: !handshake.channel<i1>, ins_0: %fork0.outs_1: !handshake.control<>, ins_1: %fork6.outs_2: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %mux2.outs = hw.instance "mux2" @handshake_mux_1(index: %fork2.outs_2: !handshake.channel<i1>, ins_0: %num_edges: !handshake.channel<i32>, ins_1: %cond_br10.trueOut: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i32>)
    %buffer4.outs = hw.instance "buffer4" @handshake_buffer_2(ins: %mux2.outs: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i32>)
    %buffer5.outs = hw.instance "buffer5" @handshake_buffer_3(ins: %buffer4.outs: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i32>)
    %fork3.outs_0, %fork3.outs_1 = hw.instance "fork3" @handshake_fork_3(ins: %buffer5.outs: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i32>, outs_1: !handshake.channel<i32>)
    %mux3.outs = hw.instance "mux3" @handshake_mux_2(index: %fork2.outs_1: !handshake.channel<i1>, ins_0: %constant0.outs: !handshake.channel<i32>, ins_1: %addf0.result: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i32>)
    %mux4.outs = hw.instance "mux4" @handshake_mux_1(index: %fork2.outs_0: !handshake.channel<i1>, ins_0: %extsi0.outs: !handshake.channel<i32>, ins_1: %addi0.result: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i32>)
    %buffer8.outs = hw.instance "buffer8" @handshake_buffer_2(ins: %mux4.outs: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i32>)
    %buffer9.outs = hw.instance "buffer9" @handshake_buffer_3(ins: %buffer8.outs: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i32>)
    %fork4.outs_0, %fork4.outs_1 = hw.instance "fork4" @handshake_fork_3(ins: %buffer9.outs: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i32>, outs_1: !handshake.channel<i32>)
    %cmpi0.result = hw.instance "cmpi0" @handshake_cmpi_0(lhs: %fork4.outs_1: !handshake.channel<i32>, rhs: %fork3.outs_0: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (result: !handshake.channel<i1>)
    %fork5.outs_0, %fork5.outs_1, %fork5.outs_2, %fork5.outs_3, %fork5.outs_4 = hw.instance "fork5" @handshake_fork_4(ins: %cmpi0.result: !handshake.channel<i1>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i1>, outs_1: !handshake.channel<i1>, outs_2: !handshake.channel<i1>, outs_3: !handshake.channel<i1>, outs_4: !handshake.channel<i1>)
    %cond_br11.trueOut, %cond_br11.falseOut = hw.instance "cond_br11" @handshake_cond_br_0(condition: %fork5.outs_2: !handshake.channel<i1>, data: %fork4.outs_0: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (trueOut: !handshake.channel<i32>, falseOut: !handshake.channel<i32>)
    hw.instance "sink1" @handshake_sink_0(ins: %cond_br11.falseOut: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> ()
    %buffer6.outs = hw.instance "buffer6" @handshake_buffer_4(ins: %mux3.outs: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i32>)
    %buffer7.outs = hw.instance "buffer7" @handshake_buffer_5(ins: %buffer6.outs: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i32>)
    %cond_br12.trueOut, %cond_br12.falseOut = hw.instance "cond_br12" @handshake_cond_br_1(condition: %fork5.outs_1: !handshake.channel<i1>, data: %buffer7.outs: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (trueOut: !handshake.channel<i32>, falseOut: !handshake.channel<i32>)
    %buffer2.outs = hw.instance "buffer2" @handshake_buffer_6(ins: %mux0.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %buffer3.outs = hw.instance "buffer3" @handshake_buffer_7(ins: %buffer2.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<>)
    %cond_br13.trueOut, %cond_br13.falseOut = hw.instance "cond_br13" @handshake_cond_br_2(condition: %fork5.outs_0: !handshake.channel<i1>, data: %buffer3.outs: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (trueOut: !handshake.control<>, falseOut: !handshake.control<>)
    hw.instance "sink2" @handshake_sink_1(ins: %cond_br13.falseOut: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> ()
    %fork6.outs_0, %fork6.outs_1, %fork6.outs_2 = hw.instance "fork6" @handshake_fork_5(ins: %cond_br13.trueOut: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.control<>, outs_1: !handshake.control<>, outs_2: !handshake.control<>)
    %free_tags_fifo0.outs = hw.instance "free_tags_fifo0" @handshake_free_tags_fifo_0(ins: %join0.outs: !handshake.channel<i2>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i2>)
    %fork7.outs_0, %fork7.outs_1 = hw.instance "fork7" @handshake_fork_6(ins: %free_tags_fifo0.outs: !handshake.channel<i2>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i2>, outs_1: !handshake.channel<i2>)
    %tagger0.outs = hw.instance "tagger0" @handshake_tagger_0(ins: %fork6.outs_1: !handshake.control<>, tagIn: %fork7.outs_1: !handshake.channel<i2>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.control<[tag0: i2]>)
    %tagger1.outs = hw.instance "tagger1" @handshake_tagger_1(ins: %cond_br11.trueOut: !handshake.channel<i32>, tagIn: %fork7.outs_0: !handshake.channel<i2>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i32, [tag0: i2]>)
    %untagger0.outs, %untagger0.tagOut = hw.instance "untagger0" @handshake_untagger_0(ins: %fork11.outs_0: !handshake.channel<i2, [tag0: i2]>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i2>, tagOut: !handshake.channel<i2>)
    %fork8.outs_0, %fork8.outs_1 = hw.instance "fork8" @handshake_fork_6(ins: %untagger0.tagOut: !handshake.channel<i2>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i2>, outs_1: !handshake.channel<i2>)
    hw.instance "sink3" @handshake_sink_2(ins: %untagger0.outs: !handshake.channel<i2>, clk: %clk: i1, rst: %rst: i1) -> ()
    %untagger1.outs, %untagger1.tagOut = hw.instance "untagger1" @handshake_untagger_1(ins: %tagger1.outs: !handshake.channel<i32, [tag0: i2]>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i32>, tagOut: !handshake.channel<i2>)
    %fork9.outs_0, %fork9.outs_1 = hw.instance "fork9" @handshake_fork_6(ins: %untagger1.tagOut: !handshake.channel<i2>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i2>, outs_1: !handshake.channel<i2>)
    %demux0.outs_0, %demux0.outs_1, %demux0.outs_2, %demux0.outs_3 = hw.instance "demux0" @handshake_demux_0(index: %fork9.outs_1: !handshake.channel<i2>, ins: %untagger1.outs: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i32>, outs_1: !handshake.channel<i32>, outs_2: !handshake.channel<i32>, outs_3: !handshake.channel<i32>)
    %buffer10.outs = hw.instance "buffer10" @handshake_buffer_3(ins: %demux0.outs_0: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i32>)
    %buffer11.outs = hw.instance "buffer11" @handshake_buffer_3(ins: %demux0.outs_1: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i32>)
    %buffer12.outs = hw.instance "buffer12" @handshake_buffer_3(ins: %demux0.outs_2: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i32>)
    %buffer13.outs = hw.instance "buffer13" @handshake_buffer_3(ins: %demux0.outs_3: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i32>)
    %mux1.outs = hw.instance "mux1" @handshake_mux_3(index: %fork8.outs_1: !handshake.channel<i2>, ins_0: %buffer10.outs: !handshake.channel<i32>, ins_1: %buffer11.outs: !handshake.channel<i32>, ins_2: %buffer12.outs: !handshake.channel<i32>, ins_3: %buffer13.outs: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i32>)
    %untagger2.outs, %untagger2.tagOut = hw.instance "untagger2" @handshake_untagger_0(ins: %fork11.outs_1: !handshake.channel<i2, [tag0: i2]>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i2>, tagOut: !handshake.channel<i2>)
    %fork10.outs_0, %fork10.outs_1 = hw.instance "fork10" @handshake_fork_6(ins: %untagger2.tagOut: !handshake.channel<i2>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i2>, outs_1: !handshake.channel<i2>)
    %demux1.outs_0, %demux1.outs_1, %demux1.outs_2, %demux1.outs_3 = hw.instance "demux1" @handshake_demux_1(index: %fork10.outs_1: !handshake.channel<i2>, ins: %untagger2.outs: !handshake.channel<i2>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i2>, outs_1: !handshake.channel<i2>, outs_2: !handshake.channel<i2>, outs_3: !handshake.channel<i2>)
    %buffer16.outs = hw.instance "buffer16" @handshake_buffer_8(ins: %demux1.outs_0: !handshake.channel<i2>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i2>)
    %buffer17.outs = hw.instance "buffer17" @handshake_buffer_8(ins: %demux1.outs_1: !handshake.channel<i2>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i2>)
    %buffer18.outs = hw.instance "buffer18" @handshake_buffer_8(ins: %demux1.outs_2: !handshake.channel<i2>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i2>)
    %buffer19.outs = hw.instance "buffer19" @handshake_buffer_8(ins: %demux1.outs_3: !handshake.channel<i2>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i2>)
    %mux5.outs = hw.instance "mux5" @handshake_mux_4(index: %fork8.outs_0: !handshake.channel<i2>, ins_0: %buffer16.outs: !handshake.channel<i2>, ins_1: %buffer17.outs: !handshake.channel<i2>, ins_2: %buffer18.outs: !handshake.channel<i2>, ins_3: %buffer19.outs: !handshake.channel<i2>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i2>)
    %join0.outs = hw.instance "join0" @handshake_join_0(ins_0: %fork9.outs_0: !handshake.channel<i2>, ins_1: %fork10.outs_0: !handshake.channel<i2>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i2>)
    %constant3.outs = hw.instance "constant3" @handshake_constant_2(ctrl: %tagger0.outs: !handshake.control<[tag0: i2]>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i2, [tag0: i2]>)
    %fork11.outs_0, %fork11.outs_1 = hw.instance "fork11" @handshake_fork_7(ins: %constant3.outs: !handshake.channel<i2, [tag0: i2]>, clk: %clk: i1, rst: %rst: i1) -> (outs_0: !handshake.channel<i2, [tag0: i2]>, outs_1: !handshake.channel<i2, [tag0: i2]>)
    %buffer20.outs = hw.instance "buffer20" @handshake_buffer_9(ins: %mux5.outs: !handshake.channel<i2>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i2>)
    %buffer21.outs = hw.instance "buffer21" @handshake_buffer_8(ins: %buffer20.outs: !handshake.channel<i2>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i2>)
    %extsi1.outs = hw.instance "extsi1" @handshake_extsi_1(ins: %buffer21.outs: !handshake.channel<i2>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i32>)
    %constant5.outs = hw.instance "constant5" @handshake_constant_3(ctrl: %fork6.outs_0: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i32>)
    %addf0.result = hw.instance "addf0" @handshake_addf_0(lhs: %cond_br12.trueOut: !handshake.channel<i32>, rhs: %constant5.outs: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (result: !handshake.channel<i32>)
    %buffer14.outs = hw.instance "buffer14" @handshake_buffer_2(ins: %mux1.outs: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i32>)
    %buffer15.outs = hw.instance "buffer15" @handshake_buffer_3(ins: %buffer14.outs: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (outs: !handshake.channel<i32>)
    %addi0.result = hw.instance "addi0" @handshake_addi_0(lhs: %buffer15.outs: !handshake.channel<i32>, rhs: %extsi1.outs: !handshake.channel<i32>, clk: %clk: i1, rst: %rst: i1) -> (result: !handshake.channel<i32>)
    hw.output %cond_br12.falseOut, %fork0.outs_0 : !handshake.channel<i32>, !handshake.control<>
  }
  hw.module.extern @handshake_fork_0(in %ins : !handshake.control<>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.control<>, out outs_1 : !handshake.control<>, out outs_2 : !handshake.control<>, out outs_3 : !handshake.control<>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.control<>, SIZE = 4 : ui32}}
  hw.module.extern @handshake_constant_0(in %ctrl : !handshake.control<>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i32>) attributes {hw.name = "handshake.constant", hw.parameters = {DATA_WIDTH = 32 : ui32, VALUE = "00000000000000000000000000000000"}}
  hw.module.extern @handshake_cond_br_0(in %condition : !handshake.channel<i1>, in %data : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out trueOut : !handshake.channel<i32>, out falseOut : !handshake.channel<i32>) attributes {hw.name = "handshake.cond_br", hw.parameters = {DATA_TYPE = !handshake.channel<i32>}}
  hw.module.extern @handshake_sink_0(in %ins : !handshake.channel<i32>, in %clk : i1, in %rst : i1) attributes {hw.name = "handshake.sink", hw.parameters = {DATA_TYPE = !handshake.channel<i32>}}
  hw.module.extern @handshake_constant_1(in %ctrl : !handshake.control<>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i1>) attributes {hw.name = "handshake.constant", hw.parameters = {DATA_WIDTH = 1 : ui32, VALUE = "0"}}
  hw.module.extern @handshake_fork_1(in %ins : !handshake.channel<i1>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.channel<i1>, out outs_1 : !handshake.channel<i1>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.channel<i1>, SIZE = 2 : ui32}}
  hw.module.extern @handshake_extsi_0(in %ins : !handshake.channel<i1>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i32>) attributes {hw.name = "handshake.extsi", hw.parameters = {INPUT_TYPE = !handshake.channel<i1>, OUTPUT_TYPE = !handshake.channel<i32>}}
  hw.module.extern @handshake_merge_0(in %ins_0 : !handshake.channel<i1>, in %ins_1 : !handshake.channel<i1>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i1>) attributes {hw.name = "handshake.merge", hw.parameters = {DATA_TYPE = !handshake.channel<i1>, SIZE = 2 : ui32}}
  hw.module.extern @handshake_buffer_0(in %ins : !handshake.channel<i1>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i1>) attributes {hw.name = "handshake.buffer", hw.parameters = {BUFFER_TYPE = "ONE_SLOT_BREAK_DV", DATA_TYPE = !handshake.channel<i1>, NUM_SLOTS = 1 : ui32, TIMING = #handshake<timing {D: 1, V: 1, R: 0}>}}
  hw.module.extern @handshake_buffer_1(in %ins : !handshake.channel<i1>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i1>) attributes {hw.name = "handshake.buffer", hw.parameters = {BUFFER_TYPE = "ONE_SLOT_BREAK_R", DATA_TYPE = !handshake.channel<i1>, NUM_SLOTS = 1 : ui32, TIMING = #handshake<timing {D: 0, V: 0, R: 1}>}}
  hw.module.extern @handshake_fork_2(in %ins : !handshake.channel<i1>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.channel<i1>, out outs_1 : !handshake.channel<i1>, out outs_2 : !handshake.channel<i1>, out outs_3 : !handshake.channel<i1>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.channel<i1>, SIZE = 4 : ui32}}
  hw.module.extern @handshake_mux_0(in %index : !handshake.channel<i1>, in %ins_0 : !handshake.control<>, in %ins_1 : !handshake.control<>, in %clk : i1, in %rst : i1, out outs : !handshake.control<>) attributes {hw.name = "handshake.mux", hw.parameters = {DATA_TYPE = !handshake.control<>, SELECT_TYPE = !handshake.channel<i1>, SIZE = 2 : ui32}}
  hw.module.extern @handshake_mux_1(in %index : !handshake.channel<i1>, in %ins_0 : !handshake.channel<i32>, in %ins_1 : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i32>) attributes {hw.name = "handshake.mux", hw.parameters = {DATA_TYPE = !handshake.channel<i32>, SELECT_TYPE = !handshake.channel<i1>, SIZE = 2 : ui32}}
  hw.module.extern @handshake_buffer_2(in %ins : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i32>) attributes {hw.name = "handshake.buffer", hw.parameters = {BUFFER_TYPE = "ONE_SLOT_BREAK_DV", DATA_TYPE = !handshake.channel<i32>, NUM_SLOTS = 1 : ui32, TIMING = #handshake<timing {D: 1, V: 1, R: 0}>}}
  hw.module.extern @handshake_buffer_3(in %ins : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i32>) attributes {hw.name = "handshake.buffer", hw.parameters = {BUFFER_TYPE = "ONE_SLOT_BREAK_R", DATA_TYPE = !handshake.channel<i32>, NUM_SLOTS = 1 : ui32, TIMING = #handshake<timing {D: 0, V: 0, R: 1}>}}
  hw.module.extern @handshake_fork_3(in %ins : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.channel<i32>, out outs_1 : !handshake.channel<i32>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.channel<i32>, SIZE = 2 : ui32}}
  hw.module.extern @handshake_mux_2(in %index : !handshake.channel<i1>, in %ins_0 : !handshake.channel<i32>, in %ins_1 : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i32>) attributes {hw.name = "handshake.mux", hw.parameters = {DATA_TYPE = !handshake.channel<f32>, SELECT_TYPE = !handshake.channel<i1>, SIZE = 2 : ui32}}
  hw.module.extern @handshake_cmpi_0(in %lhs : !handshake.channel<i32>, in %rhs : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out result : !handshake.channel<i1>) attributes {hw.name = "handshake.cmpi", hw.parameters = {DATA_TYPE = !handshake.channel<i32>, PREDICATE = "slt"}}
  hw.module.extern @handshake_fork_4(in %ins : !handshake.channel<i1>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.channel<i1>, out outs_1 : !handshake.channel<i1>, out outs_2 : !handshake.channel<i1>, out outs_3 : !handshake.channel<i1>, out outs_4 : !handshake.channel<i1>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.channel<i1>, SIZE = 5 : ui32}}
  hw.module.extern @handshake_buffer_4(in %ins : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i32>) attributes {hw.name = "handshake.buffer", hw.parameters = {BUFFER_TYPE = "ONE_SLOT_BREAK_DV", DATA_TYPE = !handshake.channel<f32>, NUM_SLOTS = 1 : ui32, TIMING = #handshake<timing {D: 1, V: 1, R: 0}>}}
  hw.module.extern @handshake_buffer_5(in %ins : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i32>) attributes {hw.name = "handshake.buffer", hw.parameters = {BUFFER_TYPE = "ONE_SLOT_BREAK_R", DATA_TYPE = !handshake.channel<f32>, NUM_SLOTS = 1 : ui32, TIMING = #handshake<timing {D: 0, V: 0, R: 1}>}}
  hw.module.extern @handshake_cond_br_1(in %condition : !handshake.channel<i1>, in %data : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out trueOut : !handshake.channel<i32>, out falseOut : !handshake.channel<i32>) attributes {hw.name = "handshake.cond_br", hw.parameters = {DATA_TYPE = !handshake.channel<f32>}}
  hw.module.extern @handshake_buffer_6(in %ins : !handshake.control<>, in %clk : i1, in %rst : i1, out outs : !handshake.control<>) attributes {hw.name = "handshake.buffer", hw.parameters = {BUFFER_TYPE = "ONE_SLOT_BREAK_DV", DATA_TYPE = !handshake.control<>, NUM_SLOTS = 1 : ui32, TIMING = #handshake<timing {D: 1, V: 1, R: 0}>}}
  hw.module.extern @handshake_buffer_7(in %ins : !handshake.control<>, in %clk : i1, in %rst : i1, out outs : !handshake.control<>) attributes {hw.name = "handshake.buffer", hw.parameters = {BUFFER_TYPE = "ONE_SLOT_BREAK_R", DATA_TYPE = !handshake.control<>, NUM_SLOTS = 1 : ui32, TIMING = #handshake<timing {D: 0, V: 0, R: 1}>}}
  hw.module.extern @handshake_cond_br_2(in %condition : !handshake.channel<i1>, in %data : !handshake.control<>, in %clk : i1, in %rst : i1, out trueOut : !handshake.control<>, out falseOut : !handshake.control<>) attributes {hw.name = "handshake.cond_br", hw.parameters = {DATA_TYPE = !handshake.control<>}}
  hw.module.extern @handshake_sink_1(in %ins : !handshake.control<>, in %clk : i1, in %rst : i1) attributes {hw.name = "handshake.sink", hw.parameters = {DATA_TYPE = !handshake.control<>}}
  hw.module.extern @handshake_fork_5(in %ins : !handshake.control<>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.control<>, out outs_1 : !handshake.control<>, out outs_2 : !handshake.control<>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.control<>, SIZE = 3 : ui32}}
  hw.module.extern @handshake_free_tags_fifo_0(in %ins : !handshake.channel<i2>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i2>) attributes {hw.name = "handshake.free_tags_fifo", hw.parameters = {FIFO_DEPTH = 4 : ui32, TAG_TYPE = !handshake.channel<i2>}}
  hw.module.extern @handshake_fork_6(in %ins : !handshake.channel<i2>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.channel<i2>, out outs_1 : !handshake.channel<i2>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.channel<i2>, SIZE = 2 : ui32}}
  hw.module.extern @handshake_tagger_0(in %ins : !handshake.control<>, in %tagIn : !handshake.channel<i2>, in %clk : i1, in %rst : i1, out outs : !handshake.control<[tag0: i2]>) attributes {hw.name = "handshake.tagger", hw.parameters = {DATA_TYPE = !handshake.control<>, TAG_TYPE = !handshake.channel<i2>}}
  hw.module.extern @handshake_tagger_1(in %ins : !handshake.channel<i32>, in %tagIn : !handshake.channel<i2>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i32, [tag0: i2]>) attributes {hw.name = "handshake.tagger", hw.parameters = {DATA_TYPE = !handshake.channel<i32>, TAG_TYPE = !handshake.channel<i2>}}
  hw.module.extern @handshake_untagger_0(in %ins : !handshake.channel<i2, [tag0: i2]>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i2>, out tagOut : !handshake.channel<i2>) attributes {hw.name = "handshake.untagger", hw.parameters = {DATA_TYPE = !handshake.channel<i2, [tag0: i2]>, TAG_TYPE = !handshake.channel<i2>}}
  hw.module.extern @handshake_sink_2(in %ins : !handshake.channel<i2>, in %clk : i1, in %rst : i1) attributes {hw.name = "handshake.sink", hw.parameters = {DATA_TYPE = !handshake.channel<i2>}}
  hw.module.extern @handshake_untagger_1(in %ins : !handshake.channel<i32, [tag0: i2]>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i32>, out tagOut : !handshake.channel<i2>) attributes {hw.name = "handshake.untagger", hw.parameters = {DATA_TYPE = !handshake.channel<i32, [tag0: i2]>, TAG_TYPE = !handshake.channel<i2>}}
  hw.module.extern @handshake_demux_0(in %index : !handshake.channel<i2>, in %ins : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.channel<i32>, out outs_1 : !handshake.channel<i32>, out outs_2 : !handshake.channel<i32>, out outs_3 : !handshake.channel<i32>) attributes {hw.name = "handshake.demux", hw.parameters = {DATA_TYPE = !handshake.channel<i32>, SELECT_TYPE = !handshake.channel<i2>, SIZE = 4 : ui32}}
  hw.module.extern @handshake_mux_3(in %index : !handshake.channel<i2>, in %ins_0 : !handshake.channel<i32>, in %ins_1 : !handshake.channel<i32>, in %ins_2 : !handshake.channel<i32>, in %ins_3 : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i32>) attributes {hw.name = "handshake.mux", hw.parameters = {DATA_TYPE = !handshake.channel<i32>, SELECT_TYPE = !handshake.channel<i2>, SIZE = 4 : ui32}}
  hw.module.extern @handshake_demux_1(in %index : !handshake.channel<i2>, in %ins : !handshake.channel<i2>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.channel<i2>, out outs_1 : !handshake.channel<i2>, out outs_2 : !handshake.channel<i2>, out outs_3 : !handshake.channel<i2>) attributes {hw.name = "handshake.demux", hw.parameters = {DATA_TYPE = !handshake.channel<i2>, SELECT_TYPE = !handshake.channel<i2>, SIZE = 4 : ui32}}
  hw.module.extern @handshake_buffer_8(in %ins : !handshake.channel<i2>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i2>) attributes {hw.name = "handshake.buffer", hw.parameters = {BUFFER_TYPE = "ONE_SLOT_BREAK_R", DATA_TYPE = !handshake.channel<i2>, NUM_SLOTS = 1 : ui32, TIMING = #handshake<timing {D: 0, V: 0, R: 1}>}}
  hw.module.extern @handshake_mux_4(in %index : !handshake.channel<i2>, in %ins_0 : !handshake.channel<i2>, in %ins_1 : !handshake.channel<i2>, in %ins_2 : !handshake.channel<i2>, in %ins_3 : !handshake.channel<i2>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i2>) attributes {hw.name = "handshake.mux", hw.parameters = {DATA_TYPE = !handshake.channel<i2>, SELECT_TYPE = !handshake.channel<i2>, SIZE = 4 : ui32}}
  hw.module.extern @handshake_join_0(in %ins_0 : !handshake.channel<i2>, in %ins_1 : !handshake.channel<i2>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i2>) attributes {hw.name = "handshake.join", hw.parameters = {DATA_TYPE = !handshake.channel<i2>, SIZE = 2 : ui32}}
  hw.module.extern @handshake_constant_2(in %ctrl : !handshake.control<[tag0: i2]>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i2, [tag0: i2]>) attributes {hw.name = "handshake.constant", hw.parameters = {DATA_WIDTH = 2 : ui32, VALUE = "01"}}
  hw.module.extern @handshake_fork_7(in %ins : !handshake.channel<i2, [tag0: i2]>, in %clk : i1, in %rst : i1, out outs_0 : !handshake.channel<i2, [tag0: i2]>, out outs_1 : !handshake.channel<i2, [tag0: i2]>) attributes {hw.name = "handshake.fork", hw.parameters = {DATA_TYPE = !handshake.channel<i2, [tag0: i2]>, SIZE = 2 : ui32}}
  hw.module.extern @handshake_buffer_9(in %ins : !handshake.channel<i2>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i2>) attributes {hw.name = "handshake.buffer", hw.parameters = {BUFFER_TYPE = "ONE_SLOT_BREAK_DV", DATA_TYPE = !handshake.channel<i2>, NUM_SLOTS = 1 : ui32, TIMING = #handshake<timing {D: 1, V: 1, R: 0}>}}
  hw.module.extern @handshake_extsi_1(in %ins : !handshake.channel<i2>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i32>) attributes {hw.name = "handshake.extsi", hw.parameters = {INPUT_TYPE = !handshake.channel<i2>, OUTPUT_TYPE = !handshake.channel<i32>}}
  hw.module.extern @handshake_constant_3(in %ctrl : !handshake.control<>, in %clk : i1, in %rst : i1, out outs : !handshake.channel<i32>) attributes {hw.name = "handshake.constant", hw.parameters = {DATA_WIDTH = 32 : ui32, VALUE = "00111111100000000000000000000000"}}
  hw.module.extern @handshake_addf_0(in %lhs : !handshake.channel<i32>, in %rhs : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out result : !handshake.channel<i32>) attributes {hw.name = "handshake.addf", hw.parameters = {DATA_TYPE = !handshake.channel<f32>}}
  hw.module.extern @handshake_addi_0(in %lhs : !handshake.channel<i32>, in %rhs : !handshake.channel<i32>, in %clk : i1, in %rst : i1, out result : !handshake.channel<i32>) attributes {hw.name = "handshake.addi", hw.parameters = {DATA_TYPE = !handshake.channel<i32>}}
  hw.module @matching_wrapper(in %num_edges : !handshake.channel<i32>, in %start : !handshake.control<>, in %clk : i1, in %rst : i1, out out0 : !handshake.channel<i32>, out end : !handshake.control<>) {
    %matching_wrapped.out0, %matching_wrapped.end = hw.instance "matching_wrapped" @matching(num_edges: %num_edges: !handshake.channel<i32>, start: %start: !handshake.control<>, clk: %clk: i1, rst: %rst: i1) -> (out0: !handshake.channel<i32>, end: !handshake.control<>)
    hw.output %matching_wrapped.out0, %matching_wrapped.end : !handshake.channel<i32>, !handshake.control<>
  }
}

