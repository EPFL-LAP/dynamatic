#
# Dynamatic is under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#


import argparse
import os

from LSQ.config import Config
from LSQ.wrapper import Wrapper
from LSQ.codegen import codeGen

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--output-dir", 
        "-o",
        dest="output_dir")
    
    parser.add_argument(
        "--config-file", 
        "-c", 
        dest="config_file",
        required=True
    )

    args = parser.parse_args()

    os.makedirs(
        args.output_dir,
        exist_ok=True
    )

    lsq_config = Config()

    # STEP 1: Generate the desired core lsq logic
    codeGen(args.output_dir, lsq_config)

    # STEP 2: Generate the wrapper to be connected with circuits generated by Dynamatic
    lsq_wrapper_module = Wrapper(args.output_dir, lsq_config)

    # Step 3: Generate the corresponding wrapper based on the config.master
    if lsq_config.master:
        lsq_wrapper_module.genWrapper()
    else:
        lsq_wrapper_module.genWrapperSlave()


if __name__ == "__main__":
    main()
