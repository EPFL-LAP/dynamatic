import json
import re
import argparse


def to_bool(val: str):
    if val == "True":
        return True
    if val == "False":
        return False
    return None


def parse_nuxmv(json_file, nuxmv_file):
    with open(json_file, 'r') as f:
        json_data = json.load(f)

    with open(nuxmv_file, 'r') as f:
        nuXmv_lines = f.readlines()

    result_pattern = r"\b(True|False|Unchecked)\b"

    updated = False
    for obj in json_data:
        obj_id = obj.get("id")
        # a line in the NuXmv report looks like this:
        #   [Invar          False          N/A    fir.p75]
        #
        # We therefore extract the id with the following pattern
        id_pattern = fr"p{obj_id}\]"
        for line in nuXmv_lines:
            if re.search(id_pattern, line):
                status_match = re.search(result_pattern, line)
                # if a match is found update the object only if needed (the new value is different from the old one)
                if status_match and obj["check"] != to_bool(status_match.group(1)):
                    obj["check"] = to_bool(status_match.group(1))
                    updated = True
                    break

    if updated:
        with open(json_file, 'w') as f:
            json.dump(json_data, f, indent=2)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Update properties database based on the results of nuXmv.")
    parser.add_argument("json_file", help="Path to the JSON file to update.")
    parser.add_argument(
        "nuxmv_file", help="Path to the file generated by nuXmv.")
    args = parser.parse_args()

    parse_nuxmv(args.json_file, args.nuxmv_file)
