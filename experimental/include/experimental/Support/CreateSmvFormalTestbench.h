//===- CreateWrappers.h - Generate Wrapper for SMV circuits -----*- C++ -*-===//
//
// Dynamatic is under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file implements a generator for wrappers for SMV circuits. It places
// sequence_generators at all the inputs and sinks at all the outputs.
// Additionally, properties and sequence constraints can be created.
//
//===----------------------------------------------------------------------===//

#ifndef DYNAMATIC_EXPERIMENTAL_ELASTIC_MITER_CREATE_FORMAL_TESTBENCH_H
#define DYNAMATIC_EXPERIMENTAL_ELASTIC_MITER_CREATE_FORMAL_TESTBENCH_H

#include "dynamatic/Support/LLVM.h"
#include "mlir/IR/MLIRContext.h"
#include <cstddef>
#include <filesystem>
#include <string>

using namespace mlir;

namespace dynamatic::experimental {

static constexpr llvm::StringLiteral SEQUENCE_GENERATOR_VALID_NAME("valid0");
static constexpr llvm::StringLiteral SEQUENCE_GENERATOR_DATA_NAME("dataOut0");
static constexpr llvm::StringLiteral SINK_READY_NAME("ready0");

// Create a wrapper for the provided SMV file.
// includeProperties: If set also creates properties to check if all output
//   tokens are true, the output buffers are empty, and the input buffer have
//   the same number of tokens stored pairwise.
// nrOfTokens: Set the number of tokens
//   generated by the sequence generators. If it is set to 0 a generator
//   capabale of creating an infinite number of tokens will be created.
// exact: determines if the sequence generator create exactly "nrOfTokens"
//   tokens, or can non-determinstically create fewer tokens.
std::string createSmvFormalTestbench(
    const SmallVector<std::pair<std::string, mlir::Type>> &arguments,
    const SmallVector<std::pair<std::string, mlir::Type>> &results,
    const std::string &modelSmvName, size_t nrOfTokens,
    bool generateExactNrOfTokens = false, bool syncOutput = false);

// SMV module for a sequence generator with a finite number of tokens. The
// actual number of generated tokens is non-determinstically set between 0
// and (inclusive) max_tokens.
const std::string SMV_BOOL_INPUT = R"DELIM(
MODULE bool_input(nReady0, max_tokens)
  VAR dataOut0 : boolean;
  VAR counter : 0..31;
  FROZENVAR exact_tokens : 0..max_tokens;
  ASSIGN
    init(counter) := 0;
    next(counter) := case
      nReady0 & counter < exact_tokens : counter + 1;
      TRUE : counter;
    esac;

  -- make sure dataOut0 is persistent
  ASSIGN
    next(dataOut0) := case
      valid0 & !nReady0 : dataOut0;
      TRUE : {TRUE, FALSE};
    esac;

  DEFINE valid0 := counter < exact_tokens;)DELIM";

// SMV module for a sequence generator with a finite number of tokens. The
// number of generated tokens is exact_tokens.
const std::string SMV_BOOL_INPUT_EXACT = R"DELIM(
MODULE bool_input_exact(nReady0, exact_tokens)
  VAR dataOut0 : boolean;
  VAR counter : 0..31;
  ASSIGN
    init(counter) := 0;
    next(counter) := case
      nReady0 & counter < exact_tokens : counter + 1;
      TRUE : counter;
    esac;

  -- make sure dataOut0 is persistent
  ASSIGN
    next(dataOut0) := case
      valid0 & !nReady0 : dataOut0;
      TRUE : {TRUE, FALSE};
    esac;

  DEFINE valid0 := counter < exact_tokens;)DELIM";

// SMV module for a sequence generator with an infinite number of tokens
const std::string SMV_BOOL_INPUT_INF = R"DELIM(
MODULE bool_input_inf(nReady0)
    VAR dataOut0 : boolean;
    
    -- make sure dataOut0 is persistent
    ASSIGN
    next(dataOut0) := case 
      valid0 & !nReady0 : dataOut0;
      TRUE : {TRUE, FALSE};
    esac;
    DEFINE valid0 := TRUE;)DELIM";

// SMV module for a sequence generator with an infinite number of tokens
const std::string SMV_CTRL_INPUT_INF = R"DELIM(
MODULE ctrl_input_inf(nReady0)
  DEFINE valid0 := TRUE;)DELIM";

// SMV module for a sequence generator with a finite number of tokens. The
// actual number of generated tokens is non-determinstically set between 0
// and (inclusive) max_tokens.
const std::string SMV_CTRL_INPUT = R"DELIM(
MODULE ctrl_input(nReady0, max_tokens)
  VAR counter : 0..31;
  FROZENVAR exact_tokens : 0..max_tokens;
  ASSIGN
    init(counter) := 0;
    next(counter) := case
      nReady0 & counter < exact_tokens : counter + 1;
      TRUE : counter;
    esac;

  DEFINE valid0 := counter < exact_tokens;)DELIM";

// SMV module for a sequence generator with a finite number of tokens. The
// number of generated tokens is exact_tokens.
const std::string SMV_CTRL_INPUT_EXACT = R"DELIM(
MODULE ctrl_input_exact(nReady0, exact_tokens)
  VAR counter : 0..31;
  ASSIGN
    init(counter) := 0;
    next(counter) := case
      nReady0 & counter < exact_tokens : counter + 1;
      TRUE : counter;
    esac;

  DEFINE valid0 := counter < exact_tokens;)DELIM";

const std::string SMV_SINK = R"DELIM(
MODULE sink(ins_valid)
  DEFINE ready0 := TRUE;)DELIM";

} // namespace dynamatic::experimental
#endif // DYNAMATIC_EXPERIMENTAL_ELASTIC_MITER_CREATE_FORMAL_TESTBENCH_H