// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py
// RUN: dynamatic-opt --exp-test-cdg-analysis %s --split-input-file | FileCheck %s

// The script is designed to make adding checks to
// a test case fast, it is *not* designed to be authoritative
// about what constitutes a good test! The CHECK should be
// minimized and named to reflect the test intent.

// CHECK-LABEL:   func.func @test1(
// CHECK-SAME:                     %[[VAL_0:.*]]: i1,
// CHECK-SAME:                     %[[VAL_1:.*]]: i32) {
// CHECK:           cf.cond_br %[[VAL_0]], ^bb1(%[[VAL_1]] : i32), ^bb2(%[[VAL_1]] : i32) {CD = "CDG Node: ^bb0 Successors: [^bb2 ^bb3 ^bb1 ]\0A"}
// CHECK:         ^bb1(%[[VAL_2:.*]]: i32):
// CHECK:           cf.br ^bb4 {CD = "CDG Node: ^bb1 Successors: []\0A"}
// CHECK:         ^bb2(%[[VAL_3:.*]]: i32):
// CHECK:           cf.br ^bb3 {CD = "CDG Node: ^bb2 Successors: []\0A"}
// CHECK:         ^bb3:
// CHECK:           cf.br ^bb4 {CD = "CDG Node: ^bb3 Successors: []\0A"}
// CHECK:         ^bb4:
// CHECK:           return {CD = "CDG Node: ^bb4 Successors: []\0A"}
// CHECK:         }
func.func @test1(%arg0: i1, %arg1: i32) {
  cf.cond_br %arg0, ^bb1(%arg1: i32), ^bb2(%arg1: i32)
  ^bb1(%0: i32):
    cf.br ^bb4
  ^bb2(%1: i32):
    cf.br ^bb3
  ^bb3:
    cf.br ^bb4
  ^bb4:
    return
}

// -----

// CHECK-LABEL:   func.func @test2(
// CHECK-SAME:                     %[[VAL_0:.*]]: i1,
// CHECK-SAME:                     %[[VAL_1:.*]]: i1,
// CHECK-SAME:                     %[[VAL_2:.*]]: i1) {
// CHECK:           cf.cond_br %[[VAL_0]], ^bb1, ^bb2 {CD = "CDG Node: ^bb0 Successors: [^bb1 ^bb2 ^bb5 ]\0A"}
// CHECK:         ^bb1:
// CHECK:           cf.br ^bb6 {CD = "CDG Node: ^bb1 Successors: []\0A"}
// CHECK:         ^bb2:
// CHECK:           cf.cond_br %[[VAL_1]], ^bb3, ^bb4 {CD = "CDG Node: ^bb2 Successors: [^bb4 ^bb3 ]\0A"}
// CHECK:         ^bb3:
// CHECK:           cf.cond_br %[[VAL_1]], ^bb5, ^bb4 {CD = "CDG Node: ^bb3 Successors: [^bb4 ]\0A"}
// CHECK:         ^bb4:
// CHECK:           cf.br ^bb5 {CD = "CDG Node: ^bb4 Successors: []\0A"}
// CHECK:         ^bb5:
// CHECK:           cf.br ^bb6 {CD = "CDG Node: ^bb5 Successors: []\0A"}
// CHECK:         ^bb6:
// CHECK:           return {CD = "CDG Node: ^bb6 Successors: []\0A"}
// CHECK:         }
func.func @test2(%c0: i1, %c2: i1, %c3: i1) {
  cf.cond_br %c0, ^bb1, ^bb2
  ^bb1:
    cf.br ^bb6
  ^bb2:
    cf.cond_br %c2, ^bb3, ^bb4
  ^bb3:
    cf.cond_br %c2, ^bb5, ^bb4
  ^bb4:
    cf.br ^bb5
  ^bb5:
    cf.br ^bb6
  ^bb6:
    return
}

// -----

// CHECK-LABEL:   func.func @test3(
// CHECK-SAME:                     %[[VAL_0:.*]]: i1,
// CHECK-SAME:                     %[[VAL_1:.*]]: i1,
// CHECK-SAME:                     %[[VAL_2:.*]]: i1) {
// CHECK:           cf.cond_br %[[VAL_0]], ^bb1, ^bb2 {CD = "CDG Node: ^bb0 Successors: [^bb1 ^bb5 ^bb2 ]\0A"}
// CHECK:         ^bb1:
// CHECK:           cf.cond_br %[[VAL_1]], ^bb3, ^bb4 {CD = "CDG Node: ^bb1 Successors: [^bb3 ^bb4 ]\0A"}
// CHECK:         ^bb2:
// CHECK:           cf.cond_br %[[VAL_2]], ^bb4, ^bb6 {CD = "CDG Node: ^bb2 Successors: [^bb4 ^bb5 ]\0A"}
// CHECK:         ^bb3:
// CHECK:           cf.br ^bb5 {CD = "CDG Node: ^bb3 Successors: []\0A"}
// CHECK:         ^bb4:
// CHECK:           cf.br ^bb5 {CD = "CDG Node: ^bb4 Successors: []\0A"}
// CHECK:         ^bb5:
// CHECK:           cf.br ^bb6 {CD = "CDG Node: ^bb5 Successors: []\0A"}
// CHECK:         ^bb6:
// CHECK:           return {CD = "CDG Node: ^bb6 Successors: []\0A"}
// CHECK:         }
func.func @test3(%c0: i1, %c2: i1, %c3: i1) {
  cf.cond_br %c0, ^bb1, ^bb2
  ^bb1:
    cf.cond_br %c2, ^bb3, ^bb4
  ^bb2:
    cf.cond_br %c3, ^bb4, ^bb6
  ^bb3:
    cf.br ^bb5
  ^bb4:
    cf.br ^bb5
  ^bb5:
    cf.br ^bb6
  ^bb6:
    return
}