// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py
// RUN: dynamatic-opt --exp-lower-std-to-handshake-fpl22 %s --split-input-file | FileCheck %s

// CHECK-LABEL:   handshake.func @test1(
// CHECK-SAME:                          %[[VAL_0:.*]]: i32,
// CHECK-SAME:                          %[[VAL_1:.*]]: i1,
// CHECK-SAME:                          %[[VAL_2:.*]]: none, ...) -> none attributes {argNames = ["in0", "in1", "in2"], resNames = ["out0"]} {
// CHECK:           %[[VAL_3:.*]] = merge %[[VAL_0]] : i32
// CHECK:           %[[VAL_4:.*]] = merge %[[VAL_1]] : i1
// CHECK:           %[[VAL_5:.*]] = merge %[[VAL_2]] : none
// CHECK:           %[[VAL_6:.*]] = constant %[[VAL_5]] {value = 0 : i32} : i32
// CHECK:           %[[VAL_7:.*]] = merge %[[VAL_6]], %[[VAL_3]] : i32
// CHECK:           %[[VAL_8:.*]] = d_return %[[VAL_5]] : none
// CHECK:           end %[[VAL_8]] : none
// CHECK:         }
func.func @test1(%arg0 : i32, %arg1: i1) {
  %cst = arith.constant 0 : i32
  cf.cond_br %arg1, ^bb1, ^bb2(%arg0 : i32)
  ^bb1:
    cf.br ^bb2(%cst : i32)
  ^bb2(%x : i32):
    return
}

// -----

// CHECK-LABEL:   handshake.func @test2(
// CHECK-SAME:                          %[[VAL_0:.*]]: i32,
// CHECK-SAME:                          %[[VAL_1:.*]]: i1,
// CHECK-SAME:                          %[[VAL_2:.*]]: none, ...) -> none attributes {argNames = ["in0", "in1", "in2"], resNames = ["out0"]} {
// CHECK:           %[[VAL_3:.*]] = merge %[[VAL_0]] : i32
// CHECK:           %[[VAL_4:.*]] = merge %[[VAL_1]] : i1
// CHECK:           %[[VAL_5:.*]] = merge %[[VAL_2]] : none
// CHECK:           %[[VAL_6:.*]] = constant %[[VAL_5]] {value = 1 : i32} : i32
// CHECK:           %[[VAL_7:.*]] = arith.addi %[[VAL_3]], %[[VAL_6]] : i32
// CHECK:           %[[VAL_8:.*]] = merge %[[VAL_9:.*]], %[[VAL_7]] : i32
// CHECK:           %[[VAL_10:.*]] = merge %[[VAL_6]], %[[VAL_10]] : i32
// CHECK:           %[[VAL_11:.*]] = merge %[[VAL_5]], %[[VAL_11]] : none
// CHECK:           %[[VAL_12:.*]] = merge %[[VAL_4]], %[[VAL_12]] : i1
// CHECK:           %[[VAL_13:.*]] = merge %[[VAL_8]] : i32
// CHECK:           %[[VAL_9]] = arith.addi %[[VAL_13]], %[[VAL_10]] : i32
// CHECK:           %[[VAL_14:.*]] = constant %[[VAL_11]] {value = 38 : i32} : i32
// CHECK:           %[[VAL_15:.*]] = arith.addi %[[VAL_14]], %[[VAL_14]] : i32
// CHECK:           %[[VAL_16:.*]] = d_return %[[VAL_5]] : none
// CHECK:           end %[[VAL_16]] : none
// CHECK:         }
func.func @test2 (%arg0 : i32, %arg1 : i1) {
        %cst = arith.constant 1 : i32
        %add = arith.addi %arg0, %cst : i32
        cf.br ^bb1(%add : i32)
^bb1(%x : i32):
        cf.cond_br %arg1, ^bb2(%x: i32), ^bb3
^bb2(%y : i32):
        %add2 = arith.addi %y, %cst : i32
  %cst2 = arith.constant 38 : i32
  %add3 = arith.addi %cst2, %cst2 : i32
        cf.br ^bb1(%add2 : i32)
^bb3:
        return
}

// -----

// CHECK-LABEL:   handshake.func @test3(
// CHECK-SAME:                          %[[VAL_0:.*]]: none, ...) -> none attributes {argNames = ["in0"], resNames = ["out0"]} {
// CHECK:           %[[VAL_1:.*]] = merge %[[VAL_0]] : none
// CHECK:           %[[VAL_2:.*]] = constant %[[VAL_1]] {value = false} : i1
// CHECK:           %[[VAL_3:.*]] = constant %[[VAL_1]] {value = 378 : i32} : i32
// CHECK:           %[[VAL_4:.*]] = constant %[[VAL_1]] {value = 121378 : i32} : i32
// CHECK:           %[[VAL_5:.*]] = merge %[[VAL_6:.*]], %[[VAL_3]] : i32
// CHECK:           %[[VAL_6]] = merge %[[VAL_3]], %[[VAL_6]] : i32
// CHECK:           %[[VAL_7:.*]] = merge %[[VAL_2]], %[[VAL_7]] : i1
// CHECK:           %[[VAL_8:.*]] = arith.addi %[[VAL_6]], %[[VAL_5]] : i32
// CHECK:           %[[VAL_9:.*]] = arith.addi %[[VAL_6]], %[[VAL_5]] : i32
// CHECK:           %[[VAL_10:.*]] = merge %[[VAL_8]] : i32
// CHECK:           %[[VAL_11:.*]] = d_return %[[VAL_1]] : none
// CHECK:           end %[[VAL_11]] : none
// CHECK:         }
func.func @test3 () {
        %b = arith.constant 0 : i1
  %n = arith.constant 378 : i32
  %n1 = arith.constant 121378 : i32
        cf.br ^bb1
^bb1:
        cf.br ^bb2(%n : i32)
^bb2(%n2 : i32):
  %add = arith.addi %n, %n2 : i32
  %add2 = arith.addi %n, %n2 : i32
        cf.cond_br %b, ^bb3(%add: i32), ^bb4
^bb3(%y : i32):
        cf.br ^bb2(%n : i32)
^bb4:
        return
}

// -----

// CHECK-LABEL:   handshake.func @test4(
// CHECK-SAME:                          %[[VAL_0:.*]]: i32,
// CHECK-SAME:                          %[[VAL_1:.*]]: none, ...) -> none attributes {argNames = ["in0", "in1"], resNames = ["out0"]} {
// CHECK:           %[[VAL_2:.*]] = merge %[[VAL_0]] : i32
// CHECK:           %[[VAL_3:.*]] = merge %[[VAL_1]] : none
// CHECK:           %[[VAL_4:.*]] = constant %[[VAL_3]] {value = false} : i1
// CHECK:           %[[VAL_5:.*]] = constant %[[VAL_3]] {value = 378 : i32} : i32
// CHECK:           %[[VAL_6:.*]] = merge %[[VAL_5]], %[[VAL_6]] : i32
// CHECK:           %[[VAL_7:.*]] = merge %[[VAL_4]], %[[VAL_7]] : i1
// CHECK:           %[[VAL_8:.*]] = merge %[[VAL_3]], %[[VAL_8]] : none
// CHECK:           %[[VAL_9:.*]] = merge %[[VAL_2]], %[[VAL_9]] : i32
// CHECK:           %[[VAL_10:.*]] = constant %[[VAL_8]] {value = 121378 : i32} : i32
// CHECK:           %[[VAL_11:.*]] = constant %[[VAL_8]] {value = false} : i1
// CHECK:           %[[VAL_12:.*]] = merge %[[VAL_13:.*]], %[[VAL_6]] : i32
// CHECK:           %[[VAL_14:.*]] = merge %[[VAL_6]], %[[VAL_14]] : i32
// CHECK:           %[[VAL_15:.*]] = merge %[[VAL_7]], %[[VAL_15]] : i1
// CHECK:           %[[VAL_16:.*]] = merge %[[VAL_8]], %[[VAL_16]] : none
// CHECK:           %[[VAL_17:.*]] = merge %[[VAL_9]], %[[VAL_17]] : i32
// CHECK:           %[[VAL_18:.*]] = arith.addi %[[VAL_14]], %[[VAL_17]] : i32
// CHECK:           %[[VAL_13]] = arith.addi %[[VAL_14]], %[[VAL_12]] : i32
// CHECK:           %[[VAL_19:.*]] = constant %[[VAL_16]] {value = false} : i1
// CHECK:           %[[VAL_20:.*]] = merge %[[VAL_18]] : i32
// CHECK:           %[[VAL_21:.*]] = d_return %[[VAL_3]] : none
// CHECK:           end %[[VAL_21]] : none
// CHECK:         }
func.func @test4 (%arg0 : i32) {
        %b = arith.constant 0 : i1
  %n = arith.constant 378 : i32
        cf.br ^bb1
^bb1:
  %n1 = arith.constant 121378 : i32
  %b1 = arith.constant 0 : i1
        cf.cond_br %b1, ^bb2(%n : i32), ^bb4
^bb2(%n2 : i32):
  %add = arith.addi %n, %arg0 : i32
  %add2 = arith.addi %n, %n2 : i32
  %b2 = arith.constant 0 : i1
        cf.cond_br %b, ^bb3(%add: i32), ^bb2(%add2: i32)
^bb3(%y : i32):
        cf.br ^bb1
^bb4:
        return
}

// -----

// CHECK-LABEL:   handshake.func @test5(
// CHECK-SAME:                          %[[VAL_0:.*]]: none, ...) -> none attributes {argNames = ["in0"], resNames = ["out0"]} {
// CHECK:           %[[VAL_1:.*]] = merge %[[VAL_0]] : none
// CHECK:           %[[VAL_2:.*]] = constant %[[VAL_1]] {value = 1 : i32} : i32
// CHECK:           %[[VAL_3:.*]] = merge %[[VAL_2]] : i32
// CHECK:           %[[VAL_4:.*]] = constant %[[VAL_1]] {value = true} : i1
// CHECK:           %[[VAL_5:.*]] = merge %[[VAL_6:.*]], %[[VAL_2]] : i32
// CHECK:           %[[VAL_7:.*]] = merge %[[VAL_2]], %[[VAL_7]] : i32
// CHECK:           %[[VAL_6]] = arith.addi %[[VAL_3]], %[[VAL_7]] : i32
// CHECK:           %[[VAL_8:.*]] = d_return %[[VAL_1]] : none
// CHECK:           end %[[VAL_8]] : none
// CHECK:         }
func.func @test5 () {
        %cst = arith.constant 1 : i32
        cf.br ^bb1(%cst : i32)
^bb1(%x : i32):
  %b = arith.constant 1 : i1
        cf.cond_br %b, ^bb2(%cst: i32), ^bb3
^bb2(%y : i32):
        %add2 = arith.addi %x, %cst : i32
        cf.br ^bb2(%add2 : i32)
^bb3:
        return
}

// -----

// CHECK-LABEL:   handshake.func @test6(
// CHECK-SAME:                          %[[VAL_0:.*]]: none, ...) -> none attributes {argNames = ["in0"], resNames = ["out0"]} {
// CHECK:           %[[VAL_1:.*]] = merge %[[VAL_0]] : none
// CHECK:           %[[VAL_2:.*]] = constant %[[VAL_1]] {value = 1 : i32} : i32
// CHECK:           %[[VAL_3:.*]] = merge %[[VAL_2]] : i32
// CHECK:           %[[VAL_4:.*]] = merge %[[VAL_2]] : i32
// CHECK:           %[[VAL_5:.*]] = arith.addi %[[VAL_4]], %[[VAL_3]] : i32
// CHECK:           %[[VAL_6:.*]] = d_return %[[VAL_1]] : none
// CHECK:           end %[[VAL_6]] : none
// CHECK:         }
func.func @test6 () {
        %cst = arith.constant 1 : i32
        cf.br ^bb1(%cst : i32)
^bb1(%x : i32):
        cf.br ^bb2(%cst: i32)
^bb2(%y : i32):
        %add2 = arith.addi %y, %x : i32
        return
}

// -----

// CHECK-LABEL:   handshake.func @test7(
// CHECK-SAME:                          %[[VAL_0:.*]]: i32,
// CHECK-SAME:                          %[[VAL_1:.*]]: none, ...) -> none attributes {argNames = ["in0", "in1"], resNames = ["out0"]} {
// CHECK:           %[[VAL_2:.*]] = merge %[[VAL_0]] : i32
// CHECK:           %[[VAL_3:.*]] = merge %[[VAL_1]] : none
// CHECK:           %[[VAL_4:.*]] = constant %[[VAL_3]] {value = 7776343 : i32} : i32
// CHECK:           %[[VAL_5:.*]] = merge %[[VAL_3]], %[[VAL_5]] : none
// CHECK:           %[[VAL_6:.*]] = constant %[[VAL_5]] {value = true} : i1
// CHECK:           %[[VAL_7:.*]] = merge %[[VAL_7]], %[[VAL_4]] : i32
// CHECK:           %[[VAL_8:.*]] = merge %[[VAL_3]], %[[VAL_8]] : none
// CHECK:           %[[VAL_9:.*]] = constant %[[VAL_8]] {value = true} : i1
// CHECK:           %[[VAL_10:.*]] = merge %[[VAL_7]] : i32
// CHECK:           %[[VAL_11:.*]] = arith.addi %[[VAL_10]], %[[VAL_10]] : i32
// CHECK:           %[[VAL_12:.*]] = d_return %[[VAL_3]] : none
// CHECK:           end %[[VAL_12]] : none
// CHECK:         }
func.func @test7 (%arg0 : i32) {
  %cst = arith.constant 7776343 : i32
  cf.br ^bb1
^bb1:
  %b1 = arith.constant 1 : i1
  cf.cond_br %b1, ^bb1, ^bb2(%cst : i32)
^bb2(%x : i32):
  %b2 = arith.constant 1 : i1
  cf.cond_br %b2, ^bb2(%x : i32), ^bb3(%x : i32)
^bb3(%y : i32):
  %add3 = arith.addi %y, %y : i32
  return
}

// -----

// CHECK-LABEL:   handshake.func @test8(
// CHECK-SAME:                          %[[VAL_0:.*]]: none, ...) -> none attributes {argNames = ["in0"], resNames = ["out0"]} {
// CHECK:           %[[VAL_1:.*]] = merge %[[VAL_0]] : none
// CHECK:           %[[VAL_2:.*]] = constant %[[VAL_1]] {value = true} : i1
// CHECK:           %[[VAL_3:.*]] = merge %[[VAL_2]], %[[VAL_3]] : i1
// CHECK:           %[[VAL_4:.*]] = merge %[[VAL_1]], %[[VAL_4]] : none
// CHECK:           %[[VAL_5:.*]] = constant %[[VAL_4]] {value = true} : i1
// CHECK:           %[[VAL_6:.*]] = merge %[[VAL_2]], %[[VAL_6]] : i1
// CHECK:           %[[VAL_7:.*]] = arith.addi %[[VAL_6]], %[[VAL_6]] : i1
// CHECK:           %[[VAL_8:.*]] = arith.subi %[[VAL_6]], %[[VAL_6]] : i1
// CHECK:           %[[VAL_9:.*]] = d_return %[[VAL_1]] : none
// CHECK:           end %[[VAL_9]] : none
// CHECK:         }
func.func @test8 () {
  %b = arith.constant 1 : i1
  cf.br ^bb1
^bb1:
  %b1 = arith.constant 1 : i1
  cf.cond_br %b, ^bb1, ^bb2
^bb2:
  cf.br ^bb3
^bb3:
  %b2 = arith.addi %b , %b : i1
  %b3 = arith.subi %b , %b : i1
  cf.cond_br %b, ^bb3, ^bb4
^bb4:
  return
}

// -----

// CHECK-LABEL:   handshake.func @test9(
// CHECK-SAME:                          %[[VAL_0:.*]]: none, ...) -> none attributes {argNames = ["in0"], resNames = ["out0"]} {
// CHECK:           %[[VAL_1:.*]] = merge %[[VAL_0]] : none
// CHECK:           %[[VAL_2:.*]] = constant %[[VAL_1]] {value = 378 : i32} : i32
// CHECK:           %[[VAL_3:.*]] = merge %[[VAL_2]], %[[VAL_3]] : i32
// CHECK:           %[[VAL_4:.*]] = merge %[[VAL_1]], %[[VAL_4]] : none
// CHECK:           %[[VAL_5:.*]] = constant %[[VAL_4]] {value = 133378 : i32} : i32
// CHECK:           %[[VAL_6:.*]] = constant %[[VAL_4]] {value = false} : i1
// CHECK:           %[[VAL_7:.*]] = merge %[[VAL_8:.*]], %[[VAL_3]] : i32
// CHECK:           %[[VAL_9:.*]] = merge %[[VAL_3]], %[[VAL_9]] : i32
// CHECK:           %[[VAL_10:.*]] = merge %[[VAL_4]], %[[VAL_10]] : none
// CHECK:           %[[VAL_8]] = arith.addi %[[VAL_9]], %[[VAL_7]] : i32
// CHECK:           %[[VAL_11:.*]] = constant %[[VAL_10]] {value = false} : i1
// CHECK:           %[[VAL_12:.*]] = d_return %[[VAL_1]] : none
// CHECK:           end %[[VAL_12]] : none
// CHECK:         }
func.func @test9 () {
  %n = arith.constant 378 : i32
        cf.br ^bb1
^bb1:
  %n1 = arith.constant 133378 : i32
  %b1 = arith.constant 0 : i1
        cf.cond_br %b1, ^bb2(%n : i32), ^bb4
^bb2(%x2 : i32):
  %add2 = arith.addi %n, %x2 : i32
  %b2 = arith.constant 0 : i1
        cf.cond_br %b2, ^bb3, ^bb2(%add2: i32)
^bb3:
        cf.br ^bb1
^bb4:
        return
}