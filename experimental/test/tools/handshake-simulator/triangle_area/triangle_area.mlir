// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py
// RUN: dynamatic-opt %s --exp-test-handshake-simulator="path-to-tests=%S/tests.json" --split-input-file | FileCheck %s

// CHECK-LABEL:   handshake.func @triangle_area
handshake.func @triangle_area(%arg0: !handshake.channel<f32>, %arg1: !handshake.channel<f32>, %arg2: !handshake.channel<f32>, %arg3: !handshake.channel<f32>, %arg4: !handshake.channel<f32>, %arg5: !handshake.channel<f32>, %arg6: !handshake.control<>, ...) -> (!handshake.channel<f32>, !handshake.control<>) attributes {argNames = ["x1", "y1", "x2", "y2", "x3", "y3", "start"], resNames = ["out0", "end"]} {
    %0:2 = fork [2] %arg1 {bufProps = #handshake<bufProps{"0": [0,0], [0,0], 0.000000e+00, 0.000000e+00, 0.000000e+00}>, handshake.bb = 0 : ui32, handshake.name = "fork0"} : <f32>
    %1:2 = fork [2] %arg0 {bufProps = #handshake<bufProps{"0": [0,0], [0,0], 0.000000e+00, 0.000000e+00, 0.000000e+00}>, handshake.bb = 0 : ui32, handshake.name = "fork1"} : <f32>
    %2 = source {handshake.bb = 0 : ui32, handshake.name = "source0"}
    %3 = constant %2 {handshake.bb = 0 : ui32, handshake.name = "constant0", value = 2.000000e+00 : f32} : <f32>
    %4:2 = fork [2] %3 {handshake.bb = 0 : ui32, handshake.name = "fork2"} : <f32>
    %5 = source {handshake.bb = 0 : ui32, handshake.name = "source1"}
    %6 = constant %5 {handshake.bb = 0 : ui32, handshake.name = "constant1", value = 0.000000e+00 : f32} : <f32>
    %7 = subf %arg2, %1#1 {bufProps = #handshake<bufProps{"0": [0,0], [0,0], 0.000000e+00, 0.000000e+00, 0.000000e+00}>, fastmath = #arith.fastmath<none>, handshake.bb = 0 : ui32, handshake.name = "subf0"} : <f32>
    %8 = subf %arg5, %0#1 {bufProps = #handshake<bufProps{"0": [0,0], [0,0], 0.000000e+00, 0.000000e+00, 0.000000e+00}>, fastmath = #arith.fastmath<none>, handshake.bb = 0 : ui32, handshake.name = "subf1"} : <f32>
    %9 = subf %arg4, %1#0 {bufProps = #handshake<bufProps{"0": [0,0], [0,0], 0.000000e+00, 0.000000e+00, 0.000000e+00}>, fastmath = #arith.fastmath<none>, handshake.bb = 0 : ui32, handshake.name = "subf2"} : <f32>
    %10 = subf %arg3, %0#0 {bufProps = #handshake<bufProps{"0": [0,0], [0,0], 0.000000e+00, 0.000000e+00, 0.000000e+00}>, fastmath = #arith.fastmath<none>, handshake.bb = 0 : ui32, handshake.name = "subf3"} : <f32>
    %11 = mulf %9, %10 {fastmath = #arith.fastmath<none>, handshake.bb = 0 : ui32, handshake.name = "mulf0"} : <f32>
    %12:2 = fork [2] %11 {handshake.bb = 0 : ui32, handshake.name = "fork3"} : <f32>
    %13 = mulf %7, %8 {fastmath = #arith.fastmath<none>, handshake.bb = 0 : ui32, handshake.name = "mulf1"} : <f32>
    %14:2 = fork [2] %13 {handshake.bb = 0 : ui32, handshake.name = "fork4"} : <f32>
    %15 = subf %12#1, %14#1 {fastmath = #arith.fastmath<none>, handshake.bb = 0 : ui32, handshake.name = "subf4"} : <f32>
    %16 = divf %15, %4#1 {fastmath = #arith.fastmath<none>, handshake.bb = 0 : ui32, handshake.name = "divf0"} : <f32>
    %17:2 = fork [2] %16 {handshake.bb = 0 : ui32, handshake.name = "fork5"} : <f32>
    %18 = subf %14#0, %12#0 {fastmath = #arith.fastmath<none>, handshake.bb = 0 : ui32, handshake.name = "subf5"} : <f32>
    %19 = divf %18, %4#0 {fastmath = #arith.fastmath<none>, handshake.bb = 0 : ui32, handshake.name = "divf1"} : <f32>
    %20 = cmpf ogt, %17#1, %6 {handshake.bb = 0 : ui32, handshake.name = "cmpf0"} : <f32>
    %21 = select %20[%17#0, %19] {handshake.bb = 0 : ui32, handshake.name = "select0"} : <i1>, <f32>
    end {bufProps = #handshake<bufProps{"1": [0,0], [0,0], 0.000000e+00, 0.000000e+00, 0.000000e+00}>, handshake.bb = 0 : ui32, handshake.name = "end0"} %21, %arg6 : <f32>, <>
  }