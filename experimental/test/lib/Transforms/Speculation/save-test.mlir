// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py
// RUN: dynamatic-opt %s --handshake-speculation="json-path=%S/save-test.json"

// CHECK-LABEL:   handshake.func @placeSimpleSave(
// CHECK-SAME:                                    %[[VAL_0:.*]]: i1, ...) attributes {argNames = ["start"], resNames = []} {
// CHECK:           %[[VAL_1:.*]] = source {bb = 0 : ui32, name = #[[?]]<"source1">}
// CHECK:           %[[VAL_2:.*]] = constant %[[VAL_1]] {bb = 0 : ui32, name = #[[?]]<"constant0">, value = true} : i1
// CHECK:           %[[VAL_3:.*]]:4 = fork [4] %[[VAL_2]] {bb = 0 : ui32, name = #[[?]]<"fork0">} : i1
// CHECK:           %[[VAL_4:.*]] = mux %[[VAL_2]] {{\[}}%[[VAL_0]], %[[VAL_2]]] {bb = 0 : ui32, name = #[[?]]<"mux0">} : i1, i1
// CHECK:           %[[VAL_5:.*]], %[[VAL_6:.*]], %[[VAL_7:.*]], %[[VAL_8:.*]], %[[VAL_9:.*]], %[[VAL_10:.*]] = speculator %[[VAL_4]] {bb = 0 : ui32, name = #[[?]]<"speculator0">} : i1
// CHECK:           %[[VAL_11:.*]] = merge %[[VAL_12:.*]], %[[VAL_13:.*]] {bb = 0 : ui32, name = #[[?]]<"merge0">} : i1
// CHECK:           %[[VAL_14:.*]], %[[VAL_15:.*]] = speculating_branch{{\[}}%[[VAL_12]]] %[[VAL_16:.*]] {bb = 0 : ui32, name = #[[?]]<"speculating_branch0">} : i1, i1
// CHECK:           %[[VAL_17:.*]], %[[VAL_18:.*]] = cond_br %[[VAL_14]], %[[VAL_7]] {bb = 0 : ui32, name = #[[?]]<"cond_br0">} : i1
// CHECK:           %[[VAL_19:.*]] = merge %[[VAL_20:.*]], %[[VAL_21:.*]] {bb = 0 : ui32, name = #[[?]]<"merge1">} : i1
// CHECK:           %[[VAL_22:.*]], %[[VAL_23:.*]] = speculating_branch{{\[}}%[[VAL_20]]] %[[VAL_24:.*]] {bb = 0 : ui32, name = #[[?]]<"speculating_branch1">} : i1, i1
// CHECK:           %[[VAL_25:.*]], %[[VAL_26:.*]] = cond_br %[[VAL_22]], %[[VAL_17]] {bb = 0 : ui32, name = #[[?]]<"cond_br5">} : i1
// CHECK:           %[[VAL_27:.*]] = merge %[[VAL_28:.*]], %[[VAL_29:.*]] {bb = 0 : ui32, name = #[[?]]<"merge2">} : i1
// CHECK:           %[[VAL_30:.*]], %[[VAL_31:.*]] = speculating_branch{{\[}}%[[VAL_28]]] %[[VAL_32:.*]] {bb = 0 : ui32, name = #[[?]]<"speculating_branch2">} : i1, i1
// CHECK:           %[[VAL_33:.*]], %[[VAL_34:.*]] = cond_br %[[VAL_30]], %[[VAL_25]] {bb = 0 : ui32, name = #[[?]]<"cond_br6">} : i1
// CHECK:           %[[VAL_35:.*]] = merge %[[VAL_36:.*]], %[[VAL_37:.*]] {bb = 0 : ui32, name = #[[?]]<"merge3">} : i1
// CHECK:           %[[VAL_38:.*]], %[[VAL_39:.*]] = speculating_branch{{\[}}%[[VAL_36]]] %[[VAL_40:.*]] {bb = 0 : ui32, name = #[[?]]<"speculating_branch3">} : i1, i1
// CHECK:           %[[VAL_41:.*]], %[[VAL_42:.*]] = cond_br %[[VAL_38]], %[[VAL_33]] {bb = 0 : ui32, name = #[[?]]<"cond_br7">} : i1
// CHECK:           %[[VAL_16]] = spec_save{{\[}}%[[VAL_6]]] %[[VAL_3]]#0 {bb = 0 : ui32, name = #[[?]]<"spec_save0">} : i1
// CHECK:           %[[VAL_12]], %[[VAL_13]] = cond_br %[[VAL_16]], %[[VAL_5]] {bb = 0 : ui32, name = #[[?]]<"cond_br1">} : i1
// CHECK:           %[[VAL_24]] = spec_save{{\[}}%[[VAL_6]]] %[[VAL_3]]#1 {bb = 0 : ui32, name = #[[?]]<"spec_save1">} : i1
// CHECK:           %[[VAL_20]], %[[VAL_21]] = cond_br %[[VAL_24]], %[[VAL_12]] {bb = 0 : ui32, name = #[[?]]<"cond_br2">} : i1
// CHECK:           %[[VAL_32]] = spec_save{{\[}}%[[VAL_6]]] %[[VAL_3]]#2 {bb = 0 : ui32, name = #[[?]]<"spec_save2">} : i1
// CHECK:           %[[VAL_28]], %[[VAL_29]] = cond_br %[[VAL_32]], %[[VAL_20]] {bb = 0 : ui32, name = #[[?]]<"cond_br3">} : i1
// CHECK:           %[[VAL_40]] = spec_save{{\[}}%[[VAL_6]]] %[[VAL_3]]#3 {bb = 0 : ui32, name = #[[?]]<"spec_save3">} : i1
// CHECK:           %[[VAL_36]], %[[VAL_37]] = cond_br %[[VAL_40]], %[[VAL_28]] {bb = 0 : ui32, name = #[[?]]<"cond_br4">} : i1
// CHECK:           %[[VAL_43:.*]] = spec_commit{{\[}}%[[VAL_41]]] %[[VAL_36]] {bb = 0 : ui32, name = #[[?]]<"spec_commit0">} : i1
// CHECK:           end {bb = 0 : ui32, name = #[[?]]<"end0">} %[[VAL_43]] : i1
// CHECK:         }
handshake.func @placeSimpleSave(%start: i1) {
  %0 = source {bb = 0 : ui32, name = #handshake.name<"source1">}
  %1 = constant %0 {bb = 0 : ui32, name = #handshake.name<"constant0">, value = 1 : i1} : i1
  %2:4 = fork [4] %1  {bb = 0 : ui32, name = #handshake.name<"fork0">} : i1
  %3 = mux %1 [%start, %1] {bb = 0 : ui32, name = #handshake.name<"mux0">} : i1, i1
  %trueResult1, %falseResult1 = cond_br %2#0, %3 {bb = 0 : ui32, name = #handshake.name<"cond_br1">} : i1
  %trueResult2, %falseResult2 = cond_br %2#1, %trueResult1 {bb = 0 : ui32, name = #handshake.name<"cond_br2">} : i1
  %trueResult3, %falseResult3 = cond_br %2#2, %trueResult2 {bb = 0 : ui32, name = #handshake.name<"cond_br3">} : i1
  %trueResult4, %falseResult4 = cond_br %2#3, %trueResult3 {bb = 0 : ui32, name = #handshake.name<"cond_br4">} : i1
  end {bb = 0 : ui32, name = #handshake.name<"end0">} %trueResult4 : i1
}
