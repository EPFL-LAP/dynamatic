// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py
// RUN: dynamatic-opt %s --handshake-speculation="json-path=%S/fir-test.json"

// CHECK-LABEL:   handshake.func @fir(
// CHECK-SAME:                        %[[VAL_0:.*]]: memref<1000xi32>,
// CHECK-SAME:                        %[[VAL_1:.*]]: memref<1000xi32>,
// CHECK-SAME:                        %[[VAL_2:.*]]: none, ...) -> i32 attributes {argNames = ["di", "idx", "start"], resNames = ["out0"]} {
// CHECK:           %[[VAL_40:.*]] = arith.extsi %[[VAL_39]] {bb = 1 : ui32, name = #handshake.name<"extsi8">} : i2 to i12
// CHECK:           %[[VAL_41:.*]] = spec_save{{\[}}%[[VAL_42:.*]]] %[[VAL_24]] {bb = 1 : ui32, name = #handshake.name<"spec_save0">} : i32
// CHECK:           %[[VAL_5]], %[[VAL_43:.*]] = mc_load{{\[}}%[[VAL_41]]] %[[VAL_3]] {bb = 1 : ui32, name = #handshake.name<"mc_load0">} : i32, i32
// CHECK:           %[[VAL_44:.*]] = arith.subi %[[VAL_34]], %[[VAL_23]] {bb = 1 : ui32, name = #handshake.name<"subi1">} : i12
// CHECK:           %[[VAL_45:.*]] = arith.extsi %[[VAL_44]] {bb = 1 : ui32, name = #handshake.name<"extsi7">} : i12 to i32
// CHECK:           %[[VAL_46:.*]] = spec_save{{\[}}%[[VAL_42]]] %[[VAL_45]] {bb = 1 : ui32, name = #handshake.name<"spec_save1">} : i32
// CHECK:           %[[VAL_8]], %[[VAL_47:.*]] = mc_load{{\[}}%[[VAL_46]]] %[[VAL_6]] {bb = 1 : ui32, name = #handshake.name<"mc_load1">} : i32, i32
// CHECK:           %[[VAL_48:.*]] = arith.muli %[[VAL_43]], %[[VAL_47]] {bb = 1 : ui32, name = #handshake.name<"muli0">} : i32
// CHECK:           %[[VAL_49:.*]] = spec_save_commit{{\[}}%[[VAL_50:.*]]] %[[VAL_25]] {bb = 1 : ui32, name = #handshake.name<"spec_save_commit0">} : i32
// CHECK:           %[[VAL_51:.*]] = buffer [1] seq %[[VAL_49]] {bb = 1 : ui32, name = #handshake.name<"buffer10">} : i32
// CHECK:           %[[VAL_52:.*]] = buffer [1] fifo %[[VAL_51]] {bb = 1 : ui32, name = #handshake.name<"buffer11">} : i32
// CHECK:           %[[VAL_53:.*]] = arith.addi %[[VAL_52]], %[[VAL_48]] {bb = 1 : ui32, name = #handshake.name<"addi0">} : i32
// CHECK:           %[[VAL_54:.*]] = arith.addi %[[VAL_22]], %[[VAL_40]] {bb = 1 : ui32, name = #handshake.name<"addi1">} : i12
// CHECK:           %[[VAL_55:.*]]:2 = fork [2] %[[VAL_54]] {bb = 1 : ui32, name = #handshake.name<"fork4">} : i12
// CHECK:           %[[VAL_56:.*]] = arith.trunci %[[VAL_55]]#0 {bb = 1 : ui32, name = #handshake.name<"trunci0">} : i12 to i11
// CHECK:           %[[VAL_57:.*]] = arith.cmpi ult, %[[VAL_55]]#1, %[[VAL_37]] {bb = 1 : ui32, name = #handshake.name<"cmpi0">} : i12
// CHECK:           %[[VAL_58:.*]], %[[VAL_42]], %[[VAL_59:.*]], %[[VAL_60:.*]], %[[VAL_61:.*]], %[[VAL_62:.*]] = speculator %[[VAL_57]] {bb = 1 : ui32, name = #handshake.name<"speculator0">} : i1
// CHECK:           %[[VAL_63:.*]], %[[VAL_64:.*]] = speculating_branch{{\[}}%[[VAL_18]]] %[[VAL_65:.*]]#0 {name = #handshake.name<"speculating_branch0">} : i11, i1
// CHECK:           %[[VAL_66:.*]], %[[VAL_67:.*]] = cond_br %[[VAL_63]], %[[VAL_60]] {name = #handshake.name<"cond_br1">} : i3
// CHECK:           %[[VAL_68:.*]], %[[VAL_69:.*]] = cond_br %[[VAL_62]], %[[VAL_66]] {name = #handshake.name<"cond_br4">} : i3
// CHECK:           %[[VAL_50]] = merge %[[VAL_61]], %[[VAL_68]] {name = #handshake.name<"merge0">} : i3
// CHECK:           %[[VAL_70:.*]], %[[VAL_71:.*]] = speculating_branch{{\[}}%[[VAL_18]]] %[[VAL_65]]#0 {name = #handshake.name<"speculating_branch1">} : i11, i1
// CHECK:           %[[VAL_72:.*]], %[[VAL_73:.*]] = cond_br %[[VAL_70]], %[[VAL_59]] {name = #handshake.name<"cond_br5">} : i1
// CHECK:           %[[VAL_65]]:3 = fork [3] %[[VAL_58]] {bb = 1 : ui32, name = #handshake.name<"fork5">} : i1
// CHECK:           %[[VAL_74:.*]] = spec_commit{{\[}}%[[VAL_72]]] %[[VAL_56]] {bb = 1 : ui32, name = #handshake.name<"spec_commit0">} : i11
// CHECK:           %[[VAL_18]], %[[VAL_75:.*]] = cond_br %[[VAL_65]]#0, %[[VAL_74]] {bb = 1 : ui32, name = #handshake.name<"cond_br0">} : i11
// CHECK:           sink %[[VAL_75]] {name = #handshake.name<"sink0">} : i11
// CHECK:           %[[VAL_26]], %[[VAL_76:.*]] = cond_br %[[VAL_65]]#1, %[[VAL_53]] {bb = 1 : ui32, name = #handshake.name<"cond_br2">} : i32
// CHECK:           %[[VAL_77:.*]] = buffer [1] seq %[[VAL_27]] {bb = 1 : ui32, name = #handshake.name<"buffer6">} : none
// CHECK:           %[[VAL_78:.*]] = buffer [1] fifo %[[VAL_77]] {bb = 1 : ui32, name = #handshake.name<"buffer7">} : none
// CHECK:           %[[VAL_29]], %[[VAL_79:.*]] = cond_br %[[VAL_65]]#2, %[[VAL_78]] {bb = 1 : ui32, name = #handshake.name<"cond_br3">} : none
// CHECK:           sink %[[VAL_79]] {name = #handshake.name<"sink1">} : none
// CHECK:           %[[VAL_80:.*]] = buffer [1] seq %[[VAL_76]] {bb = 2 : ui32, name = #handshake.name<"buffer4">} : i32
// CHECK:           %[[VAL_81:.*]] = buffer [1] fifo %[[VAL_80]] {bb = 2 : ui32, name = #handshake.name<"buffer5">} : i32
// CHECK:           %[[VAL_82:.*]] = d_return {bb = 2 : ui32, name = #handshake.name<"d_return0">} %[[VAL_81]] : i32
// CHECK:           end {bb = 2 : ui32, name = #handshake.name<"end0">} %[[VAL_82]], %[[VAL_4]], %[[VAL_7]] : i32, none, none
// CHECK:         }
handshake.func @fir(%arg0: memref<1000xi32>, %arg1: memref<1000xi32>, %arg2: none, ...) -> i32 attributes {argNames = ["di", "idx", "start"], resNames = ["out0"]} {
  %memOutputs, %done = mem_controller[%arg1 : memref<1000xi32>] (%addressResult) {connectedBlocks = [1 : i32], name = #handshake.name<"mem_controller0">} : (i32) -> (i32, none)
  %memOutputs_0, %done_1 = mem_controller[%arg0 : memref<1000xi32>] (%addressResult_2) {connectedBlocks = [1 : i32], name = #handshake.name<"mem_controller1">} : (i32) -> (i32, none)
  %0 = buffer [1] seq %arg2 {bb = 0 : ui32, name = #handshake.name<"buffer0">} : none
  %1 = buffer [1] fifo %0 {bb = 0 : ui32, name = #handshake.name<"buffer1">} : none
  %2:2 = fork [2] %1 {bb = 0 : ui32, name = #handshake.name<"fork0">} : none
  %3 = constant %2#1 {bb = 0 : ui32, name = #handshake.name<"constant0">, value = false} : i1
  %4:2 = fork [2] %3 {bb = 0 : ui32, name = #handshake.name<"fork1">} : i1
  %5 = arith.extsi %4#0 {bb = 0 : ui32, name = #handshake.name<"extsi0">} : i1 to i11
  %6 = arith.extsi %4#1 {bb = 0 : ui32, name = #handshake.name<"extsi4">} : i1 to i32
  %7 = mux %17#0 [%trueResult, %5] {bb = 1 : ui32, name = #handshake.name<"mux2">} : i1, i11
  %8 = buffer [1] seq %7 {bb = 1 : ui32, name = #handshake.name<"buffer8">} : i11
  %9 = buffer [1] fifo %8 {bb = 1 : ui32, name = #handshake.name<"buffer9">} : i11
  %10:3 = fork [3] %9 {bb = 1 : ui32, name = #handshake.name<"fork2">} : i11
  %11 = arith.extsi %10#0 {bb = 1 : ui32, name = #handshake.name<"extsi1">} : i11 to i12
  %12 = arith.extsi %10#1 {bb = 1 : ui32, name = #handshake.name<"extsi5">} : i11 to i12
  %13 = arith.extsi %10#2 {bb = 1 : ui32, name = #handshake.name<"extsi6">} : i11 to i32
  %14 = mux %17#1 [%trueResult_4, %6] {bb = 1 : ui32, name = #handshake.name<"mux1">} : i1, i32
  %result, %index = control_merge %trueResult_6, %2#0 {bb = 1 : ui32, name = #handshake.name<"control_merge2">} : none, i1
  %15 = buffer [1] seq %index {bb = 1 : ui32, name = #handshake.name<"buffer2">} : i1
  %16 = buffer [1] fifo %15 {bb = 1 : ui32, name = #handshake.name<"buffer3">} : i1
  %17:2 = fork [2] %16 {bb = 1 : ui32, name = #handshake.name<"fork3">} : i1
  %18 = source {bb = 1 : ui32, name = #handshake.name<"source0">}
  %19 = constant %18 {bb = 1 : ui32, name = #handshake.name<"constant1">, value = 999 : i11} : i11
  %20 = arith.extsi %19 {bb = 1 : ui32, name = #handshake.name<"extsi2">} : i11 to i12
  %21 = source {bb = 1 : ui32, name = #handshake.name<"source1">}
  %22 = constant %21 {bb = 1 : ui32, name = #handshake.name<"constant4">, value = 1000 : i11} : i11
  %23 = arith.extsi %22 {bb = 1 : ui32, name = #handshake.name<"extsi3">} : i11 to i12
  %24 = source {bb = 1 : ui32, name = #handshake.name<"source2">}
  %25 = constant %24 {bb = 1 : ui32, name = #handshake.name<"constant6">, value = 1 : i2} : i2
  %26 = arith.extsi %25 {bb = 1 : ui32, name = #handshake.name<"extsi8">} : i2 to i12
  %addressResult, %dataResult = mc_load[%13] %memOutputs {bb = 1 : ui32, name = #handshake.name<"mc_load0">} : i32, i32
  %27 = arith.subi %20, %12 {bb = 1 : ui32, name = #handshake.name<"subi1">} : i12
  %28 = arith.extsi %27 {bb = 1 : ui32, name = #handshake.name<"extsi7">} : i12 to i32
  %addressResult_2, %dataResult_3 = mc_load[%28] %memOutputs_0 {bb = 1 : ui32, name = #handshake.name<"mc_load1">} : i32, i32
  %29 = arith.muli %dataResult, %dataResult_3 {bb = 1 : ui32, name = #handshake.name<"muli0">} : i32
  %30 = buffer [1] seq %14 {bb = 1 : ui32, name = #handshake.name<"buffer10">} : i32
  %31 = buffer [1] fifo %30 {bb = 1 : ui32, name = #handshake.name<"buffer11">} : i32
  %32 = arith.addi %31, %29 {bb = 1 : ui32, name = #handshake.name<"addi0">} : i32
  %33 = arith.addi %11, %26 {bb = 1 : ui32, name = #handshake.name<"addi1">} : i12
  %34:2 = fork [2] %33 {bb = 1 : ui32, name = #handshake.name<"fork4">} : i12
  %35 = arith.trunci %34#0 {bb = 1 : ui32, name = #handshake.name<"trunci0">} : i12 to i11
  %36 = arith.cmpi ult, %34#1, %23 {bb = 1 : ui32, name = #handshake.name<"cmpi0">} : i12
  %37:3 = fork [3] %36 {bb = 1 : ui32, name = #handshake.name<"fork5">} : i1
  %trueResult, %falseResult = cond_br %37#0, %35 {bb = 1 : ui32, name = #handshake.name<"cond_br0">} : i11
  sink %falseResult {name = #handshake.name<"sink0">} : i11
  %trueResult_4, %falseResult_5 = cond_br %37#1, %32 {bb = 1 : ui32, name = #handshake.name<"cond_br2">} : i32
  %38 = buffer [1] seq %result {bb = 1 : ui32, name = #handshake.name<"buffer6">} : none
  %39 = buffer [1] fifo %38 {bb = 1 : ui32, name = #handshake.name<"buffer7">} : none
  %trueResult_6, %falseResult_7 = cond_br %37#2, %39 {bb = 1 : ui32, name = #handshake.name<"cond_br3">} : none
  sink %falseResult_7 {name = #handshake.name<"sink1">} : none
  %40 = buffer [1] seq %falseResult_5 {bb = 2 : ui32, name = #handshake.name<"buffer4">} : i32
  %41 = buffer [1] fifo %40 {bb = 2 : ui32, name = #handshake.name<"buffer5">} : i32
  %42 = d_return {bb = 2 : ui32, name = #handshake.name<"d_return0">} %41 : i32
  end {bb = 2 : ui32, name = #handshake.name<"end0">} %42, %done, %done_1 : i32, none, none
}
