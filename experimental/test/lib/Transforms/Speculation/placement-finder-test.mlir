// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py
// RUN: dynamatic-opt %s --handshake-speculation="json-path=%S/placement-finder-test.json automatic=true" --split-input-file

// CHECK-LABEL:   handshake.func @placeSimpleSave(
// CHECK-SAME:                                    %[[VAL_0:.*]]: i1, ...) attributes {argNames = ["start"], resNames = []} {
// CHECK:           %[[VAL_1:.*]] = source {bb = 0 : ui32, name = #[[?]]<"source1">}
// CHECK:           %[[VAL_2:.*]] = constant %[[VAL_1]] {bb = 0 : ui32, name = #[[?]]<"constant0">, value = true} : i1
// CHECK:           %[[VAL_3:.*]]:4 = fork [4] %[[VAL_2]] {bb = 0 : ui32, name = #[[?]]<"fork0">} : i1
// CHECK:           %[[VAL_4:.*]] = mux %[[VAL_2]] {{\[}}%[[VAL_0]], %[[VAL_2]]] {bb = 0 : ui32, name = #[[?]]<"mux0">} : i1, i1
// CHECK:           %[[VAL_5:.*]], %[[VAL_6:.*]], %[[VAL_7:.*]], %[[VAL_8:.*]], %[[VAL_9:.*]], %[[VAL_10:.*]] = speculator %[[VAL_4]] {bb = 0 : ui32, name = #[[?]]<"speculator0">} : i1
// CHECK:           %[[VAL_11:.*]], %[[VAL_12:.*]] = cond_br %[[VAL_3]]#0, %[[VAL_5]] {bb = 0 : ui32, name = #[[?]]<"cond_br1">} : i1
// CHECK:           %[[VAL_13:.*]], %[[VAL_14:.*]] = cond_br %[[VAL_3]]#1, %[[VAL_11]] {bb = 0 : ui32, name = #[[?]]<"cond_br2">} : i1
// CHECK:           %[[VAL_15:.*]], %[[VAL_16:.*]] = cond_br %[[VAL_3]]#2, %[[VAL_13]] {bb = 0 : ui32, name = #[[?]]<"cond_br3">} : i1
// CHECK:           %[[VAL_17:.*]], %[[VAL_18:.*]] = cond_br %[[VAL_3]]#3, %[[VAL_15]] {bb = 0 : ui32, name = #[[?]]<"cond_br4">} : i1
// CHECK:           end {bb = 0 : ui32, name = #[[?]]<"end0">} %[[VAL_17]] : i1
// CHECK:         }
handshake.func @placeSimpleSave(%start: i1) {
  %0 = source {bb = 0 : ui32, name = #handshake.name<"source1">}
  %1 = constant %0 {bb = 0 : ui32, name = #handshake.name<"constant0">, value = 1 : i1} : i1
  %2:4 = fork [4] %1  {bb = 0 : ui32, name = #handshake.name<"fork0">} : i1
  %3 = mux %1 [%start, %1] {bb = 0 : ui32, name = #handshake.name<"mux0">} : i1, i1
  %trueResult1, %falseResult1 = cond_br %2#0, %3 {bb = 0 : ui32, name = #handshake.name<"cond_br1">} : i1
  %trueResult2, %falseResult2 = cond_br %2#1, %trueResult1 {bb = 0 : ui32, name = #handshake.name<"cond_br2">} : i1
  %trueResult3, %falseResult3 = cond_br %2#2, %trueResult2 {bb = 0 : ui32, name = #handshake.name<"cond_br3">} : i1
  %trueResult4, %falseResult4 = cond_br %2#3, %trueResult3 {bb = 0 : ui32, name = #handshake.name<"cond_br4">} : i1
  end {bb = 0 : ui32, name = #handshake.name<"end0">} %trueResult4 : i1
}

// -----

// CHECK-LABEL:   handshake.func @placeCommitsOnMultipleBranches(
// CHECK-SAME:                                                   %[[VAL_0:.*]]: i1, ...) attributes {argNames = ["start"], resNames = []} {
// CHECK:           %[[VAL_1:.*]] = source {bb = 0 : ui32, name = #[[?]]<"source1">}
// CHECK:           %[[VAL_2:.*]] = constant %[[VAL_1]] {bb = 0 : ui32, name = #[[?]]<"constant0">, value = true} : i1
// CHECK:           %[[VAL_3:.*]]:2 = fork [2] %[[VAL_2]] {bb = 0 : ui32, name = #[[?]]<"fork0">} : i1
// CHECK:           %[[VAL_4:.*]] = mux %[[VAL_2]] {{\[}}%[[VAL_0]], %[[VAL_2]]] {bb = 0 : ui32, name = #[[?]]<"mux0">} : i1, i1
// CHECK:           %[[VAL_5:.*]], %[[VAL_6:.*]], %[[VAL_7:.*]], %[[VAL_8:.*]], %[[VAL_9:.*]], %[[VAL_10:.*]] = speculator %[[VAL_4]] {bb = 0 : ui32, name = #[[?]]<"speculator0">} : i1
// CHECK:           %[[VAL_11:.*]], %[[VAL_12:.*]] = cond_br %[[VAL_3]]#0, %[[VAL_5]] {bb = 0 : ui32, name = #[[?]]<"cond_br1">} : i1
// CHECK:           %[[VAL_13:.*]], %[[VAL_14:.*]] = cond_br %[[VAL_3]]#1, %[[VAL_11]] {bb = 0 : ui32, name = #[[?]]<"cond_br2">} : i1
// CHECK:           %[[VAL_15:.*]], %[[VAL_16:.*]] = cond_br %[[VAL_13]], %[[VAL_2]] {bb = 0 : ui32, name = #[[?]]<"cond_br3">} : i1
// CHECK:           %[[VAL_17:.*]], %[[VAL_18:.*]] = cond_br %[[VAL_14]], %[[VAL_2]] {bb = 0 : ui32, name = #[[?]]<"cond_br4">} : i1
// CHECK:           end {bb = 0 : ui32, name = #[[?]]<"end0">} %[[VAL_12]], %[[VAL_15]], %[[VAL_17]], %[[VAL_16]], %[[VAL_18]] : i1, i1, i1, i1, i1
// CHECK:         }
handshake.func @placeCommitsOnMultipleBranches(%start: i1) {
  %0 = source {bb = 0 : ui32, name = #handshake.name<"source1">}
  %1 = constant %0 {bb = 0 : ui32, name = #handshake.name<"constant0">, value = 1 : i1} : i1
  %2:2 = fork [2] %1  {bb = 0 : ui32, name = #handshake.name<"fork0">} : i1
  %3 = mux %1 [%start, %1] {bb = 0 : ui32, name = #handshake.name<"mux0">} : i1, i1
  %trueResult1, %falseResult1 = cond_br %2#0, %3 {bb = 0 : ui32, name = #handshake.name<"cond_br1">} : i1
  %trueResult2, %falseResult2 = cond_br %2#1, %trueResult1 {bb = 0 : ui32, name = #handshake.name<"cond_br2">} : i1
  %trueResult3, %falseResult3 = cond_br %trueResult2, %1 {bb = 0 : ui32, name = #handshake.name<"cond_br3">} : i1
  %trueResult4, %falseResult4 = cond_br %falseResult2, %1 {bb = 0 : ui32, name = #handshake.name<"cond_br4">} : i1
  end {bb = 0 : ui32, name = #handshake.name<"end0">} %falseResult1, %trueResult3, %trueResult4, %falseResult3, %falseResult4 : i1, i1, i1, i1, i1
}

// -----

// CHECK-LABEL:   handshake.func @placeSaveCommitsOnAllPaths(
// CHECK-SAME:                                               %[[VAL_0:.*]]: i1, ...) attributes {argNames = ["start"], resNames = []} {
// CHECK:           %[[VAL_1:.*]], %[[VAL_2:.*]] = control_merge %[[VAL_3:.*]], %[[VAL_0]] {bb = 0 : ui32, name = #[[?]]<"control_merge0">} : i1, i1
// CHECK:           %[[VAL_3]], %[[VAL_4:.*]] = cond_br %[[VAL_5:.*]]#2, %[[VAL_1]] {bb = 0 : ui32, name = #[[?]]<"cond_br0">} : i1
// CHECK:           %[[VAL_6:.*]] = source {bb = 0 : ui32, name = #[[?]]<"source1">}
// CHECK:           %[[VAL_7:.*]] = constant %[[VAL_6]] {bb = 0 : ui32, name = #[[?]]<"constant0">, value = true} : i1
// CHECK:           %[[VAL_8:.*]] = mux %[[VAL_2]] {{\[}}%[[VAL_9:.*]], %[[VAL_7]]] {bb = 0 : ui32, name = #[[?]]<"mux0">} : i1, i1
// CHECK:           %[[VAL_5]]:3 = fork [3] %[[VAL_8]] {bb = 0 : ui32, name = #[[?]]<"fork0">} : i1
// CHECK:           %[[VAL_10:.*]], %[[VAL_11:.*]], %[[VAL_12:.*]], %[[VAL_13:.*]], %[[VAL_14:.*]], %[[VAL_15:.*]] = speculator %[[VAL_5]]#1 {bb = 0 : ui32, name = #[[?]]<"speculator0">} : i1
// CHECK:           %[[VAL_9]], %[[VAL_16:.*]] = cond_br %[[VAL_5]]#0, %[[VAL_10]] {bb = 0 : ui32, name = #[[?]]<"cond_br1">} : i1
// CHECK:           end {bb = 0 : ui32, name = #[[?]]<"end0">} %[[VAL_4]] : i1
// CHECK:         }
handshake.func @placeSaveCommitsOnAllPaths(%start: i1) {
  %result, %index = control_merge %trueResult, %start {bb = 0 : ui32, name = #handshake.name<"control_merge0">} : i1, i1
  %trueResult, %falseResult = cond_br %3#2, %result {bb = 0 : ui32, name = #handshake.name<"cond_br0">} : i1
  %0 = source {bb = 0 : ui32, name = #handshake.name<"source1">}
  %1 = constant %0 {bb = 0 : ui32, name = #handshake.name<"constant0">, value = 1 : i1} : i1
  %2 = mux %index [%trueResult1, %1] {bb = 0 : ui32, name = #handshake.name<"mux0">} : i1, i1
  %3:3 = fork [3] %2  {bb = 0 : ui32, name = #handshake.name<"fork0">} : i1
  %trueResult1, %falseResult1 = cond_br %3#0, %3#1 {bb = 0 : ui32, name = #handshake.name<"cond_br1">} : i1
  end {bb = 0 : ui32, name = #handshake.name<"end0">} %falseResult  : i1
}

// -----

// CHECK-LABEL:   handshake.func @multipleBBs(
// CHECK-SAME:                                %[[VAL_0:.*]]: i1, ...) attributes {argNames = ["start"], resNames = []} {
// CHECK:           %[[VAL_1:.*]] = source {bb = 0 : ui32, name = #[[?]]<"source1">}
// CHECK:           %[[VAL_2:.*]] = constant %[[VAL_1]] {bb = 0 : ui32, name = #[[?]]<"constant0">, value = true} : i1
// CHECK:           %[[VAL_3:.*]], %[[VAL_4:.*]], %[[VAL_5:.*]], %[[VAL_6:.*]], %[[VAL_7:.*]], %[[VAL_8:.*]] = speculator %[[VAL_0]] {bb = 0 : ui32, name = #[[?]]<"speculator0">} : i1
// CHECK:           %[[VAL_9:.*]], %[[VAL_10:.*]] = cond_br %[[VAL_2]], %[[VAL_3]] {bb = 0 : ui32, name = #[[?]]<"cond_br1">} : i1
// CHECK:           %[[VAL_11:.*]] = source {bb = 1 : ui32, name = #[[?]]<"source2">}
// CHECK:           %[[VAL_12:.*]] = constant %[[VAL_11]] {bb = 1 : ui32, name = #[[?]]<"constant1">, value = true} : i1
// CHECK:           %[[VAL_13:.*]], %[[VAL_14:.*]] = cond_br %[[VAL_12]], %[[VAL_9]] {bb = 1 : ui32, name = #[[?]]<"cond_br2">} : i1
// CHECK:           %[[VAL_15:.*]] = source {bb = 2 : ui32, name = #[[?]]<"source3">}
// CHECK:           %[[VAL_16:.*]] = constant %[[VAL_15]] {bb = 2 : ui32, name = #[[?]]<"constant2">, value = true} : i1
// CHECK:           %[[VAL_17:.*]], %[[VAL_18:.*]] = cond_br %[[VAL_16]], %[[VAL_9]] {bb = 2 : ui32, name = #[[?]]<"cond_br3">} : i1
// CHECK:           %[[VAL_19:.*]] = merge %[[VAL_13]], %[[VAL_17]] {bb = 3 : ui32, name = #[[?]]<"merge0">} : i1
// CHECK:           end {bb = 3 : ui32, name = #[[?]]<"end0">} %[[VAL_19]] : i1
// CHECK:         }
handshake.func @multipleBBs(%start: i1) {
  %0 = source {bb = 0 : ui32, name = #handshake.name<"source1">}
  %1 = constant %0 {bb = 0 : ui32, name = #handshake.name<"constant0">, value = 1 : i1} : i1
  %trueResult1, %falseResult1 = cond_br %1, %start {bb = 0 : ui32, name = #handshake.name<"cond_br1">} : i1
  %4 = source {bb = 1 : ui32, name = #handshake.name<"source2">}
  %5 = constant %4 {bb = 1 : ui32, name = #handshake.name<"constant1">, value = 1 : i1} : i1
  %trueResult2, %falseResult2 = cond_br %5, %trueResult1 {bb = 1 : ui32, name = #handshake.name<"cond_br2">} : i1
  %8 = source {bb = 2 : ui32, name = #handshake.name<"source3">}
  %9 = constant %8 {bb = 2 : ui32, name = #handshake.name<"constant2">, value = 1 : i1} : i1
  %trueResult3, %falseResult3 = cond_br %9, %trueResult1 {bb = 2 : ui32, name = #handshake.name<"cond_br3">} : i1
  %12 = merge %trueResult2, %trueResult3 {bb = 3 : ui32, name = #handshake.name<"merge0">} : i1
  end {bb = 3 : ui32, name = #handshake.name<"end0">} %12 : i1
}
