//===- PlacementFinder.cpp - Automatic speculation units finder -*- C++ -*-===//
//
// Dynamatic is under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file implements the class and methods for automatic finding of
// speculative units positions.
//
//===----------------------------------------------------------------------===//

#include "experimental/Transforms/Speculation/PlacementFinder.h"
#include "dynamatic/Dialect/Handshake/HandshakeOps.h"
#include "dynamatic/Support/CFG.h"
#include "dynamatic/Support/Logging.h"
#include "experimental/Transforms/Speculation/SpeculationPlacement.h"
#include "mlir/IR/BuiltinTypes.h"
#include "mlir/IR/OperationSupport.h"
#include "mlir/IR/Value.h"
#include "mlir/Support/LogicalResult.h"
#include "llvm/ADT/DenseMap.h"
#include "llvm/ADT/DenseSet.h"
#include "llvm/Support/ErrorHandling.h"

using namespace mlir;
using namespace dynamatic;
using namespace dynamatic::handshake;
using namespace dynamatic::experimental;
using namespace dynamatic::experimental::speculation;

PlacementFinder::PlacementFinder(SpeculationPlacements &placements)
    : placements(placements) {
  OpOperand &specPos = placements.getSpeculatorPlacement();
  assert(specPos.getOwner() && "Speculator position is undefined");
}

//===----------------------------------------------------------------------===//
// Save Units Finder Methods
//===----------------------------------------------------------------------===//

// Recursively traverse the IR until reaching branches and store visited values
// The values are stored in the set specValues that is passed by reference
static void markSpeculativePathsForSaves(Operation *currOp,
                                         DenseSet<Value> &specValues) {
  // End traversal when reaching a branch, because save units are only
  // placed inside the speculation BB
  if (isa<handshake::ConditionalBranchOp>(currOp))
    return;

  for (OpResult res : currOp->getResults()) {
    if (specValues.contains(res))
      continue;
    specValues.insert(res);
    for (Operation *succOp : res.getUsers()) {
      markSpeculativePathsForSaves(succOp, specValues);
    }
  }
}

/// Returns whether the value is derived exclusively from source operations,
/// even indirectly. For example, in a circuit like `source -> constant ->
/// trunci`, the result of `trunci` is also considered to be generated by the
/// source.
static bool isGeneratedBySourceOp(Value value) {
  Operation *defOp = value.getDefiningOp();
  // If the value is not produced by any operation, it cannot be considered
  // generated by the source.
  if (!defOp)
    return false;

  if (isa<handshake::SourceOp>(defOp))
    return true;

  // All upstream values must be generated by source operations.
  return llvm::all_of(defOp->getOpOperands(), [&](OpOperand &operand) {
    return isGeneratedBySourceOp(operand.get());
  });
}

// Save units are needed where speculative tokens can interact with
// non-speculative tokens. Updates `placements` with the Save placements
LogicalResult PlacementFinder::findSaves() {
  OpOperand &specPos = placements.getSpeculatorPlacement();
  handshake::FuncOp funcOp =
      specPos.getOwner()->getParentOfType<handshake::FuncOp>();
  assert(funcOp && "op should have parent function");
  auto handshakeBlocks = getLogicBBs(funcOp);

  // Mark all values that are speculative in the speculation BB
  llvm::DenseSet<Value> specValues;
  specValues.insert(specPos.get());
  markSpeculativePathsForSaves(specPos.getOwner(), specValues);

  // Iterate all operations in the speculation BB
  std::optional<unsigned> specBB = getLogicBB(specPos.getOwner());
  if (!specBB) {
    specPos.getOwner()->emitError("Operation does not have a BB.");
    return failure();
  }

  for (Operation *blockOp : handshakeBlocks.blocks[specBB.value()]) {
    // Create a save if an operation has both spec and non-spec operands
    bool hasNonSpecInput = false;
    bool hasSpecInput = false;
    for (Value operand : blockOp->getOperands()) {
      if (specValues.contains(operand))
        hasSpecInput = true;
      else
        hasNonSpecInput = true;
    }

    if (hasSpecInput && hasNonSpecInput) {
      for (OpOperand &operand : blockOp->getOpOperands()) {
        // Create a Save for every non-speculative operand
        if (!specValues.contains(operand.get())) {
          // No save unit required for a value generated by a source operation.
          if (isGeneratedBySourceOp(operand.get()))
            continue;

          placements.addSave(operand);
        }
      }
    }
  }

  return success();
}

//===----------------------------------------------------------------------===//
// Commit Units Finder Methods
//===----------------------------------------------------------------------===//

/// Returns operands to traverse next when placing Commit or SaveCommit.
/// For LoadOps, only data result uses are included. For StoreOp, no targets.
/// For others, all result uses.
static llvm::SmallVector<OpOperand *>
getSpecRegionTraversalTargets(Operation *op) {
  llvm::SmallVector<OpOperand *> targets;
  if (auto loadOp = dyn_cast<handshake::LoadOp>(op)) {
    // Continue traversal only the data result of the LoadOp, skipping results
    // connected to the memory controller.
    for (OpOperand &dstOpOperand : loadOp.getDataResult().getUses()) {
      targets.push_back(&dstOpOperand);
    }
  } else if (isa<handshake::StoreOp>(op)) {
    // Traversal ends here; edges to the memory controller are skipped
    return {};
  } else {
    for (OpResult res : op->getResults()) {
      for (OpOperand &dstOpOperand : res.getUses()) {
        targets.push_back(&dstOpOperand);
      }
    }
  }
  return targets;
}

LogicalResult PlacementFinder::findRegularCommitsTraversal(
    llvm::DenseSet<Operation *> &visited, OpOperand &currOpOperand) {
  Operation *currOp = currOpOperand.getOwner();

  // All save units inside the speculative region should already be converted to
  // save-commits.
  if (placements.containsSave(currOpOperand)) {
    currOp->emitError("Save units should not be reached");
    return failure();
  }

  if (isa<handshake::StoreOp>(currOp) ||
      isa<handshake::MemoryControllerOp>(currOp) ||
      isa<handshake::EndOp>(currOp)) {
    // A Commit is needed in front of these units
    placements.addCommit(currOpOperand);
    // Stop traversal.
    return success();
  }

  auto [_, isNewOp] = visited.insert(currOp);

  // End traversal if currOp is already in visited set
  if (!isNewOp)
    return success();

  for (OpOperand *target : getSpecRegionTraversalTargets(currOp)) {
    // Stop further traversal if Commit, SaveCommit, or Speculator is
    // encountered.
    if (placements.containsCommit(*target) ||
        placements.containsSaveCommit(*target) ||
        &placements.getSpeculatorPlacement() == target)
      continue;

    if (failed(findRegularCommitsTraversal(visited, *target)))
      return failure();
  }

  return success();
}

LogicalResult PlacementFinder::findRegularCommits() {
  OpOperand &specPos = placements.getSpeculatorPlacement();

  // Share visited set with multiple traversals
  llvm::DenseSet<Operation *> visited;

  // Perform the traversal from the speculator position
  if (failed(findRegularCommitsTraversal(visited, specPos)))
    return failure();

  // Perform the same traversal from the save-commit unit positions.
  for (OpOperand *scPos : placements.getPlacements<SpecSaveCommitOp>()) {
    if (failed(findRegularCommitsTraversal(visited, *scPos)))
      return failure();
  }
  return success();
}

namespace {
using CFGEdge = OpOperand;
}

// DFS traversal to mark all operations that lead to Commit units
// The set markedPaths is passed by reference and is updated with
// the OpPlacements (pair value-operation) that are traversed
static void
markSpeculativePathsForCommits(Operation *currOp,
                               SpeculationPlacements &placements,
                               llvm::DenseSet<CFGEdge *> &markedEdges) {
  for (OpOperand *edge : getSpecRegionTraversalTargets(currOp)) {
    if (!markedEdges.count(edge)) {
      markedEdges.insert(edge);
      // Stop traversal if a commit is reached
      if (!placements.containsCommit(*edge))
        markSpeculativePathsForCommits(edge->getOwner(), placements,
                                       markedEdges);
    }
  }
}

// Find the placements of Commit units in between BBs, that are needed to
// avoid two control-only tokens going out of order. Updates the `placements`
LogicalResult PlacementFinder::findCommitsBetweenBBs() {
  OpOperand &specPos = placements.getSpeculatorPlacement();
  auto funcOp = specPos.getOwner()->getParentOfType<handshake::FuncOp>();
  assert(funcOp && "op should have parent function");

  // Whenever a BB has two speculative inputs, commit units are needed to
  // avoid tokens going out-of-order. First, the block predecessor arcs are
  // found
  BBtoArcsMap bbToPredecessorArcs = getBBPredecessorArcs(funcOp);

  llvm::DenseSet<CFGEdge *> speculativeEdges;
  // Mark speculative edges from speculator and save-commit units
  markSpeculativePathsForCommits(specPos.getOwner(), placements,
                                 speculativeEdges);
  for (OpOperand *scPos : placements.getPlacements<SpecSaveCommitOp>()) {
    // Handle the case where a save-commit and commit are placed on the same
    // edge.
    if (placements.containsCommit(*scPos))
      continue;

    markSpeculativePathsForCommits(scPos->getOwner(), placements,
                                   speculativeEdges);
  }

  // Iterate all BBs to check if commits are needed
  for (const auto &[bb, predecessorArcs] : bbToPredecessorArcs) {
    // Count number of speculative inputs to the BB
    unsigned countSpecInputs = 0;
    for (const BBArc &arc : predecessorArcs) {
      // If any of the edges in an arc is speculative, count the input arc as
      // speculative
      if (llvm::any_of(arc.edges,
                       [&](CFGEdge *p) { return speculativeEdges.count(p); }))
        countSpecInputs++;
    }

    if (countSpecInputs > 1) {
      // Potential ordering issue, add commits
      for (const BBArc &pred : predecessorArcs) {
        if (pred.srcBB == pred.dstBB) {
          llvm::errs()
              << "Warning: Skipped placing commit units on the "
                 "backedge of the innermost loop to preserve speculation. "
                 "Safe only if the loop's II is 1.\n";
          continue;
        }
        for (CFGEdge *edge : pred.edges) {
          // Add a Commit only in front of speculative inputs
          if (speculativeEdges.count(edge))
            placements.addCommit(*edge);
          // Here, synchronizer operations will be needed in the future
        }
      }
    }
  }

  // Now that new commits have been added, some of the already placed commits
  // might be unreachable. Hence, the path to commits is marked again and
  // unreachable commits are removed
  speculativeEdges.clear();
  // Mark speculative edges from speculator and save-commit units
  markSpeculativePathsForCommits(specPos.getOwner(), placements,
                                 speculativeEdges);
  for (OpOperand *scPos : placements.getPlacements<SpecSaveCommitOp>()) {
    // Handle the case where a save-commit and commit are placed on the same
    // edge.
    if (placements.containsCommit(*scPos))
      continue;

    markSpeculativePathsForCommits(scPos->getOwner(), placements,
                                   speculativeEdges);
  }

  // Remove commits that cannot be reached
  llvm::DenseSet<CFGEdge *> toRemove;
  for (CFGEdge *edge : placements.getPlacements<handshake::SpecCommitOp>()) {
    if (!speculativeEdges.count(edge)) {
      toRemove.insert(edge);
    }
  }
  for (CFGEdge *edge : toRemove)
    placements.eraseCommit(*edge);

  return success();
}

//===----------------------------------------------------------------------===//
// SaveCommit Units Finder Methods
//===----------------------------------------------------------------------===//

// Traverse the speculator's BB from top to bottom (from the control merge
// until the branches) and adds save-commits in such a way that every path is
// cut by a save-commit or the speculator itself. Updates `placements`.
LogicalResult
PlacementFinder::findSaveCommitsTraversal(llvm::DenseSet<Operation *> &visited,
                                          Operation *currOp) {
  // End traversal if currOp is already in visited set
  if (auto [_, isNewOp] = visited.insert(currOp); !isNewOp)
    return success();

  for (OpOperand *target : getSpecRegionTraversalTargets(currOp)) {
    if (placements.containsSave(*target)) {
      // Convert save units in the loop to save-commits
      placements.addSaveCommit(*target);
      placements.eraseSave(*target);
      // The path is cut by the save-commit and stop traversal
      continue;
    }

    // End traversal if the path is already cut by another save-commit
    if (placements.containsSaveCommit(*target))
      continue;

    // End traversal if the path is already cut by the speculator
    OpOperand &specPos = placements.getSpeculatorPlacement();
    if (target == &specPos)
      continue;

    Operation *succOp = target->getOwner();
    if (isa<handshake::ConditionalBranchOp>(succOp)) {
      // A SaveCommit is needed in front of the branch
      placements.addSaveCommit(*target);
      // End traversal
      continue;
    }

    // Continue DFS traversal along the path
    if (failed(findSaveCommitsTraversal(visited, succOp)))
      return failure();
  }
  return success();
}

LogicalResult PlacementFinder::findSaveCommits() {
  OpOperand &specPos = placements.getSpeculatorPlacement();
  auto funcOp = specPos.getOwner()->getParentOfType<handshake::FuncOp>();
  assert(funcOp && "op should have parent function");

  std::optional<unsigned> specBB = getLogicBB(specPos.getOwner());
  if (!specBB) {
    specPos.getOwner()->emitError("Operation does not have a BB.");
    return failure();
  }

  bool foundControlMerge = false;
  // Every BB starts at a control merge
  for (auto controlMergeOp : funcOp.getOps<handshake::ControlMergeOp>()) {
    if (auto mergeBB = getLogicBB(controlMergeOp);
        !mergeBB || mergeBB != specBB)
      continue;

    // Found a control merge in the speculation BB
    if (!foundControlMerge)
      foundControlMerge = true;
    else
      return controlMergeOp->emitError(
          "Found multiple control merges in the same BB");

    // Add save-commits so that all paths are cut by a save-commit or the
    // speculator
    llvm::DenseSet<Operation *> visited;
    if (failed(findSaveCommitsTraversal(visited, controlMergeOp)))
      return failure();
  }

  return success();
}

LogicalResult PlacementFinder::findPlacements() {
  if (failed(findSaves()))
    return failure();

  if (failed(findSaveCommits()))
    return failure();

  // Find commits after save-commit placement is finalized
  if (failed(findRegularCommits()))
    return failure();
  if (failed(findCommitsBetweenBBs()))
    return failure();

  return success();
}
