//===- LLVMToControlFlow.h - Convert LLVM to CF  ----------------*- C++ -*-===//
//
// Dynamatic is under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

#ifndef DYNAMATIC_CONVERSION_LLVMTOCONTROLFLOW_H
#define DYNAMATIC_CONVERSION_LLVMTOCONTROLFLOW_H

#include "dynamatic/Support/Backedge.h"
#include "dynamatic/Support/DynamaticPass.h"
#include "dynamatic/Support/LLVM.h"
#include "dynamatic/Transforms/FuncMaximizeSSA.h"
#include "mlir/Dialect/ControlFlow/IR/ControlFlowOps.h"
#include "mlir/Dialect/Func/IR/FuncOps.h"
#include "mlir/Dialect/Index/IR/IndexOps.h"
#include "mlir/IR/Attributes.h"

// This namespace declaration puts the auto-generated code in the dynamatic
// namespace (the autogenerated code from tblgen doesn't have a namespace).
namespace dynamatic {

// Boilerplate code: This creates forward declarations of:
// - "createLLVMToControlFlow": Later used by pass registration (see
// Transforms/Passes.h) to register the pass in the binary.
// - "LLVMToControlFlowOptions": Defines the options of the pass
//
// NOTE:
// - Convention: "GEN_PASS_DECL_LLVMTOCONTROLFLOW" (same as the pass name in
// tblgen, but with all caps) must be defined in the header (otherwise the pass
// registration will not be able to find the declaration).
// - Be careful about the include path "dynamatic/Conversion/Passes.h.inc";
// Dynamatic separates the pass registration for Analysis, Conversion, and
// Transforms.

// TODO: Maybe we move the reminders above to "dynamatic/docs/DeveloperGuide"?
#define GEN_PASS_DECL_LLVMTOCONTROLFLOW
#include "dynamatic/Conversion/Passes.h.inc"

} // namespace dynamatic

#endif // DYNAMATIC_CONVERSION_LLVMTOCONTROLFLOW_H