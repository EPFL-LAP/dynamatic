// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py
// RUN: dynamatic-opt --handshake-optimize-bitwidths %s --split-input-file | FileCheck %s

// CHECK-LABEL:   handshake.func @addiFW(
// CHECK-SAME:                           %[[VAL_0:.*]]: i8,
// CHECK-SAME:                           %[[VAL_1:.*]]: i16,
// CHECK-SAME:                           %[[VAL_2:.*]]: none, ...) -> i32 attributes {argNames = ["arg0", "arg1", "start"], resNames = ["out0"]} {
// CHECK:           %[[VAL_3:.*]] = arith.extsi %[[VAL_1]] {bb = 0 : ui32} : i16 to i17
// CHECK:           %[[VAL_4:.*]] = arith.extsi %[[VAL_0]] {bb = 0 : ui32} : i8 to i17
// CHECK:           %[[VAL_5:.*]] = arith.addi %[[VAL_4]], %[[VAL_3]] : i17
// CHECK:           %[[VAL_6:.*]] = arith.extsi %[[VAL_5]] : i17 to i32
// CHECK:           %[[VAL_7:.*]] = d_return %[[VAL_6]] : i32
// CHECK:           end %[[VAL_7]] : i32
// CHECK:         }
handshake.func @addiFW(%arg0: i8, %arg1: i16, %start: none) -> i32 {
  %ext0 = arith.extsi %arg0 : i8 to i32
  %ext1 = arith.extsi %arg1 : i16 to i32
  %res = arith.addi %ext0, %ext1 : i32
  %returnVal = d_return %res : i32
  end %returnVal : i32
}

// -----

// CHECK-LABEL:   handshake.func @subiFW(
// CHECK-SAME:                           %[[VAL_0:.*]]: i8,
// CHECK-SAME:                           %[[VAL_1:.*]]: i16,
// CHECK-SAME:                           %[[VAL_2:.*]]: none, ...) -> i32 attributes {argNames = ["arg0", "arg1", "start"], resNames = ["out0"]} {
// CHECK:           %[[VAL_3:.*]] = arith.extsi %[[VAL_1]] {bb = 0 : ui32} : i16 to i17
// CHECK:           %[[VAL_4:.*]] = arith.extsi %[[VAL_0]] {bb = 0 : ui32} : i8 to i17
// CHECK:           %[[VAL_5:.*]] = arith.subi %[[VAL_4]], %[[VAL_3]] : i17
// CHECK:           %[[VAL_6:.*]] = arith.extsi %[[VAL_5]] : i17 to i32
// CHECK:           %[[VAL_7:.*]] = d_return %[[VAL_6]] : i32
// CHECK:           end %[[VAL_7]] : i32
// CHECK:         }
handshake.func @subiFW(%arg0: i8, %arg1: i16, %start: none) -> i32 {
  %ext0 = arith.extsi %arg0 : i8 to i32
  %ext1 = arith.extsi %arg1 : i16 to i32
  %res = arith.subi %ext0, %ext1 : i32
  %returnVal = d_return %res : i32
  end %returnVal : i32
}

// -----

// CHECK-LABEL:   handshake.func @muliFW(
// CHECK-SAME:                           %[[VAL_0:.*]]: i8,
// CHECK-SAME:                           %[[VAL_1:.*]]: i16,
// CHECK-SAME:                           %[[VAL_2:.*]]: none, ...) -> i32 attributes {argNames = ["arg0", "arg1", "start"], resNames = ["out0"]} {
// CHECK:           %[[VAL_3:.*]] = arith.extsi %[[VAL_1]] {bb = 0 : ui32} : i16 to i24
// CHECK:           %[[VAL_4:.*]] = arith.extsi %[[VAL_0]] {bb = 0 : ui32} : i8 to i24
// CHECK:           %[[VAL_5:.*]] = arith.muli %[[VAL_4]], %[[VAL_3]] : i24
// CHECK:           %[[VAL_6:.*]] = arith.extsi %[[VAL_5]] : i24 to i32
// CHECK:           %[[VAL_7:.*]] = d_return %[[VAL_6]] : i32
// CHECK:           end %[[VAL_7]] : i32
// CHECK:         }
handshake.func @muliFW(%arg0: i8, %arg1: i16, %start: none) -> i32 {
  %ext0 = arith.extsi %arg0 : i8 to i32
  %ext1 = arith.extsi %arg1 : i16 to i32
  %res = arith.muli %ext0, %ext1 : i32
  %returnVal = d_return %res : i32
  end %returnVal : i32
}

// -----

// CHECK-LABEL:   handshake.func @divuiFW(
// CHECK-SAME:                            %[[VAL_0:.*]]: i8,
// CHECK-SAME:                            %[[VAL_1:.*]]: i16,
// CHECK-SAME:                            %[[VAL_2:.*]]: none, ...) -> i32 attributes {argNames = ["arg0", "arg1", "start"], resNames = ["out0"]} {
// CHECK:           %[[VAL_3:.*]] = arith.trunci %[[VAL_1]] {bb = 0 : ui32} : i16 to i9
// CHECK:           %[[VAL_4:.*]] = arith.extsi %[[VAL_0]] {bb = 0 : ui32} : i8 to i9
// CHECK:           %[[VAL_5:.*]] = arith.divui %[[VAL_4]], %[[VAL_3]] : i9
// CHECK:           %[[VAL_6:.*]] = arith.extui %[[VAL_5]] : i9 to i32
// CHECK:           %[[VAL_7:.*]] = d_return %[[VAL_6]] : i32
// CHECK:           end %[[VAL_7]] : i32
// CHECK:         }
handshake.func @divuiFW(%arg0: i8, %arg1: i16, %start: none) -> i32 {
  %ext0 = arith.extsi %arg0 : i8 to i32
  %ext1 = arith.extsi %arg1 : i16 to i32
  %res = arith.divui %ext0, %ext1 : i32
  %returnVal = d_return %res : i32
  end %returnVal : i32
}

// -----

// CHECK-LABEL:   handshake.func @divsiFW(
// CHECK-SAME:                            %[[VAL_0:.*]]: i8,
// CHECK-SAME:                            %[[VAL_1:.*]]: i16,
// CHECK-SAME:                            %[[VAL_2:.*]]: none, ...) -> i32 attributes {argNames = ["arg0", "arg1", "start"], resNames = ["out0"]} {
// CHECK:           %[[VAL_3:.*]] = arith.trunci %[[VAL_1]] {bb = 0 : ui32} : i16 to i9
// CHECK:           %[[VAL_4:.*]] = arith.extsi %[[VAL_0]] {bb = 0 : ui32} : i8 to i9
// CHECK:           %[[VAL_5:.*]] = arith.divsi %[[VAL_4]], %[[VAL_3]] : i9
// CHECK:           %[[VAL_6:.*]] = arith.extsi %[[VAL_5]] : i9 to i32
// CHECK:           %[[VAL_7:.*]] = d_return %[[VAL_6]] : i32
// CHECK:           end %[[VAL_7]] : i32
// CHECK:         }
handshake.func @divsiFW(%arg0: i8, %arg1: i16, %start: none) -> i32 {
  %ext0 = arith.extsi %arg0 : i8 to i32
  %ext1 = arith.extsi %arg1 : i16 to i32
  %res = arith.divsi %ext0, %ext1 : i32
  %returnVal = d_return %res : i32
  end %returnVal : i32
}

// -----

// CHECK-LABEL:   handshake.func @remuiFW(
// CHECK-SAME:                            %[[VAL_0:.*]]: i8,
// CHECK-SAME:                            %[[VAL_1:.*]]: i16,
// CHECK-SAME:                            %[[VAL_2:.*]]: none, ...) -> i32 attributes {argNames = ["arg0", "arg1", "start"], resNames = ["out0"]} {
// CHECK:           %[[VAL_3:.*]] = arith.trunci %[[VAL_1]] {bb = 0 : ui32} : i16 to i9
// CHECK:           %[[VAL_4:.*]] = arith.extsi %[[VAL_0]] {bb = 0 : ui32} : i8 to i9
// CHECK:           %[[VAL_5:.*]] = arith.remui %[[VAL_4]], %[[VAL_3]] : i9
// CHECK:           %[[VAL_6:.*]] = arith.extui %[[VAL_5]] : i9 to i32
// CHECK:           %[[VAL_7:.*]] = d_return %[[VAL_6]] : i32
// CHECK:           end %[[VAL_7]] : i32
// CHECK:         }
handshake.func @remuiFW(%arg0: i8, %arg1: i16, %start: none) -> i32 {
  %ext0 = arith.extsi %arg0 : i8 to i32
  %ext1 = arith.extsi %arg1 : i16 to i32
  %res = arith.remui %ext0, %ext1 : i32
  %returnVal = d_return %res : i32
  end %returnVal : i32
}

// -----

// CHECK-LABEL:   handshake.func @remsiFW(
// CHECK-SAME:                            %[[VAL_0:.*]]: i8,
// CHECK-SAME:                            %[[VAL_1:.*]]: i16,
// CHECK-SAME:                            %[[VAL_2:.*]]: none, ...) -> i32 attributes {argNames = ["arg0", "arg1", "start"], resNames = ["out0"]} {
// CHECK:           %[[VAL_3:.*]] = arith.trunci %[[VAL_1]] {bb = 0 : ui32} : i16 to i9
// CHECK:           %[[VAL_4:.*]] = arith.extsi %[[VAL_0]] {bb = 0 : ui32} : i8 to i9
// CHECK:           %[[VAL_5:.*]] = arith.remsi %[[VAL_4]], %[[VAL_3]] : i9
// CHECK:           %[[VAL_6:.*]] = arith.extsi %[[VAL_5]] : i9 to i32
// CHECK:           %[[VAL_7:.*]] = d_return %[[VAL_6]] : i32
// CHECK:           end %[[VAL_7]] : i32
// CHECK:         }
handshake.func @remsiFW(%arg0: i8, %arg1: i16, %start: none) -> i32 {
  %ext0 = arith.extsi %arg0 : i8 to i32
  %ext1 = arith.extsi %arg1 : i16 to i32
  %res = arith.remsi %ext0, %ext1 : i32
  %returnVal = d_return %res : i32
  end %returnVal : i32
}

// -----

// CHECK-LABEL:   handshake.func @andiFW(
// CHECK-SAME:                           %[[VAL_0:.*]]: i8,
// CHECK-SAME:                           %[[VAL_1:.*]]: i16,
// CHECK-SAME:                           %[[VAL_2:.*]]: none, ...) -> i32 attributes {argNames = ["arg0", "arg1", "start"], resNames = ["out0"]} {
// CHECK:           %[[VAL_3:.*]] = arith.trunci %[[VAL_1]] {bb = 0 : ui32} : i16 to i8
// CHECK:           %[[VAL_4:.*]] = arith.andi %[[VAL_0]], %[[VAL_3]] : i8
// CHECK:           %[[VAL_5:.*]] = arith.extui %[[VAL_4]] : i8 to i32
// CHECK:           %[[VAL_6:.*]] = d_return %[[VAL_5]] : i32
// CHECK:           end %[[VAL_6]] : i32
// CHECK:         }
handshake.func @andiFW(%arg0: i8, %arg1: i16, %start: none) -> i32 {
  %ext0 = arith.extui %arg0 : i8 to i32
  %ext1 = arith.extui %arg1 : i16 to i32
  %res = arith.andi %ext0, %ext1 : i32
  %returnVal = d_return %res : i32
  end %returnVal : i32
}

// -----

// CHECK-LABEL:   handshake.func @oriFW(
// CHECK-SAME:                          %[[VAL_0:.*]]: i8,
// CHECK-SAME:                          %[[VAL_1:.*]]: i16,
// CHECK-SAME:                          %[[VAL_2:.*]]: none, ...) -> i32 attributes {argNames = ["arg0", "arg1", "start"], resNames = ["out0"]} {
// CHECK:           %[[VAL_3:.*]] = arith.extui %[[VAL_0]] {bb = 0 : ui32} : i8 to i16
// CHECK:           %[[VAL_4:.*]] = arith.ori %[[VAL_3]], %[[VAL_1]] : i16
// CHECK:           %[[VAL_5:.*]] = arith.extui %[[VAL_4]] : i16 to i32
// CHECK:           %[[VAL_6:.*]] = d_return %[[VAL_5]] : i32
// CHECK:           end %[[VAL_6]] : i32
// CHECK:         }
handshake.func @oriFW(%arg0: i8, %arg1: i16, %start: none) -> i32 {
  %ext0 = arith.extui %arg0 : i8 to i32
  %ext1 = arith.extui %arg1 : i16 to i32
  %res = arith.ori %ext0, %ext1 : i32
  %returnVal = d_return %res : i32
  end %returnVal : i32
}

// -----

// CHECK-LABEL:   handshake.func @xoriFW(
// CHECK-SAME:                           %[[VAL_0:.*]]: i8,
// CHECK-SAME:                           %[[VAL_1:.*]]: i16,
// CHECK-SAME:                           %[[VAL_2:.*]]: none, ...) -> i32 attributes {argNames = ["arg0", "arg1", "start"], resNames = ["out0"]} {
// CHECK:           %[[VAL_3:.*]] = arith.extui %[[VAL_0]] {bb = 0 : ui32} : i8 to i16
// CHECK:           %[[VAL_4:.*]] = arith.xori %[[VAL_3]], %[[VAL_1]] : i16
// CHECK:           %[[VAL_5:.*]] = arith.extui %[[VAL_4]] : i16 to i32
// CHECK:           %[[VAL_6:.*]] = d_return %[[VAL_5]] : i32
// CHECK:           end %[[VAL_6]] : i32
// CHECK:         }
handshake.func @xoriFW(%arg0: i8, %arg1: i16, %start: none) -> i32 {
  %ext0 = arith.extui %arg0 : i8 to i32
  %ext1 = arith.extui %arg1 : i16 to i32
  %res = arith.xori %ext0, %ext1 : i32
  %returnVal = d_return %res : i32
  end %returnVal : i32
}

// -----

// CHECK-LABEL:   handshake.func @shliFW(
// CHECK-SAME:                           %[[VAL_0:.*]]: i16,
// CHECK-SAME:                           %[[VAL_1:.*]]: none, ...) -> i32 attributes {argNames = ["arg0", "start"], resNames = ["out0"]} {
// CHECK:           %[[VAL_2:.*]] = arith.extsi %[[VAL_0]] {bb = 0 : ui32} : i16 to i20
// CHECK:           %[[VAL_3:.*]] = constant %[[VAL_1]] {value = 4 : i4} : i4
// CHECK:           %[[VAL_4:.*]] = arith.extui %[[VAL_3]] : i4 to i20
// CHECK:           %[[VAL_5:.*]] = arith.shli %[[VAL_2]], %[[VAL_4]] : i20
// CHECK:           %[[VAL_6:.*]] = arith.extsi %[[VAL_5]] : i20 to i32
// CHECK:           %[[VAL_7:.*]] = d_return %[[VAL_6]] : i32
// CHECK:           end %[[VAL_7]] : i32
// CHECK:         }
handshake.func @shliFW(%arg0: i16, %start: none) -> i32 {
  %cst = handshake.constant %start {value = 4 : i4} : i4
  %ext0 = arith.extsi %arg0 : i16 to i32
  %extCst = arith.extsi %cst : i4 to i32
  %res = arith.shli %ext0, %extCst : i32
  %returnVal = d_return %res : i32
  end %returnVal : i32
}

// -----

// CHECK-LABEL:   handshake.func @shrsiFW(
// CHECK-SAME:                            %[[VAL_0:.*]]: i16,
// CHECK-SAME:                            %[[VAL_1:.*]]: none, ...) -> i32 attributes {argNames = ["arg0", "start"], resNames = ["out0"]} {
// CHECK:           %[[VAL_2:.*]] = constant %[[VAL_1]] {value = 4 : i4} : i4
// CHECK:           %[[VAL_3:.*]] = arith.extui %[[VAL_2]] : i4 to i16
// CHECK:           %[[VAL_4:.*]] = arith.shrsi %[[VAL_0]], %[[VAL_3]] : i16
// CHECK:           %[[VAL_5:.*]] = arith.trunci %[[VAL_4]] : i16 to i12
// CHECK:           %[[VAL_6:.*]] = arith.extsi %[[VAL_5]] : i12 to i32
// CHECK:           %[[VAL_7:.*]] = d_return %[[VAL_6]] : i32
// CHECK:           end %[[VAL_7]] : i32
// CHECK:         }
handshake.func @shrsiFW(%arg0: i16, %start: none) -> i32 {
  %cst = handshake.constant %start {value = 4 : i4} : i4
  %ext0 = arith.extsi %arg0 : i16 to i32
  %extCst = arith.extsi %cst : i4 to i32
  %res = arith.shrsi %ext0, %extCst : i32
  %returnVal = d_return %res : i32
  end %returnVal : i32
}

// -----

// CHECK-LABEL:   handshake.func @shruiFW(
// CHECK-SAME:                            %[[VAL_0:.*]]: i16,
// CHECK-SAME:                            %[[VAL_1:.*]]: none, ...) -> i32 attributes {argNames = ["arg0", "start"], resNames = ["out0"]} {
// CHECK:           %[[VAL_2:.*]] = constant %[[VAL_1]] {value = 4 : i4} : i4
// CHECK:           %[[VAL_3:.*]] = arith.extui %[[VAL_2]] : i4 to i16
// CHECK:           %[[VAL_4:.*]] = arith.shrui %[[VAL_0]], %[[VAL_3]] : i16
// CHECK:           %[[VAL_5:.*]] = arith.trunci %[[VAL_4]] : i16 to i12
// CHECK:           %[[VAL_6:.*]] = arith.extsi %[[VAL_5]] : i12 to i32
// CHECK:           %[[VAL_7:.*]] = d_return %[[VAL_6]] : i32
// CHECK:           end %[[VAL_7]] : i32
// CHECK:         }
handshake.func @shruiFW(%arg0: i16, %start: none) -> i32 {
  %cst = handshake.constant %start {value = 4 : i4} : i4
  %ext0 = arith.extsi %arg0 : i16 to i32
  %extCst = arith.extsi %cst : i4 to i32
  %res = arith.shrui %ext0, %extCst : i32
  %returnVal = d_return %res : i32
  end %returnVal : i32
}

// -----

// CHECK-LABEL:   handshake.func @cmpiFW(
// CHECK-SAME:                           %[[VAL_0:.*]]: i8,
// CHECK-SAME:                           %[[VAL_1:.*]]: i16,
// CHECK-SAME:                           %[[VAL_2:.*]]: none, ...) -> i1 attributes {argNames = ["arg0", "arg1", "start"], resNames = ["out0"]} {
// CHECK:           %[[VAL_3:.*]] = arith.extsi %[[VAL_0]] {bb = 0 : ui32} : i8 to i16
// CHECK:           %[[VAL_4:.*]] = arith.cmpi eq, %[[VAL_3]], %[[VAL_1]] : i16
// CHECK:           %[[VAL_5:.*]] = d_return %[[VAL_4]] : i1
// CHECK:           end %[[VAL_5]] : i1
// CHECK:         }
handshake.func @cmpiFW(%arg0: i8, %arg1: i16, %start: none) -> i1 {
  %ext0 = arith.extsi %arg0 : i8 to i32
  %ext1 = arith.extsi %arg1 : i16 to i32
  %res = arith.cmpi eq, %ext0, %ext1 : i32
  %returnVal = d_return %res : i1
  end %returnVal : i1
}

// -----

// CHECK-LABEL:   handshake.func @selectFW(
// CHECK-SAME:                             %[[VAL_0:.*]]: i8,
// CHECK-SAME:                             %[[VAL_1:.*]]: i16,
// CHECK-SAME:                             %[[VAL_2:.*]]: i1,
// CHECK-SAME:                             %[[VAL_3:.*]]: none, ...) -> i32 attributes {argNames = ["arg0", "arg1", "select", "start"], resNames = ["out0"]} {
// CHECK:           %[[VAL_4:.*]] = arith.extsi %[[VAL_0]] {bb = 0 : ui32} : i8 to i16
// CHECK:           %[[VAL_5:.*]] = arith.select %[[VAL_2]], %[[VAL_4]], %[[VAL_1]] : i16
// CHECK:           %[[VAL_6:.*]] = arith.extsi %[[VAL_5]] : i16 to i32
// CHECK:           %[[VAL_7:.*]] = d_return %[[VAL_6]] : i32
// CHECK:           end %[[VAL_7]] : i32
// CHECK:         }
handshake.func @selectFW(%arg0: i8, %arg1: i16, %select : i1, %start: none) -> i32 {
  %ext0 = arith.extsi %arg0 : i8 to i32
  %ext1 = arith.extsi %arg1 : i16 to i32
  %res = arith.select %select, %ext0, %ext1 : i32
  %returnVal = d_return %res : i32
  end %returnVal : i32
}
