// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py
// RUN: dynamatic-opt --handshake-optimize-bitwidths %s --split-input-file | FileCheck %s

// CHECK-LABEL:   handshake.func @forkBW(
// CHECK-SAME:                           %[[VAL_0:.*]]: i32,
// CHECK-SAME:                           %[[VAL_1:.*]]: none, ...) -> (i16, i8) attributes {argNames = ["arg0", "start"], resNames = ["out0", "out1"]} {
// CHECK:           %[[VAL_2:.*]] = arith.trunci %[[VAL_0]] {bb = 0 : ui32} : i32 to i16
// CHECK:           %[[VAL_3:.*]]:2 = fork [2] %[[VAL_2]] : i16
// CHECK:           %[[VAL_4:.*]] = arith.trunci %[[VAL_3]]#1 : i16 to i8
// CHECK:           %[[VAL_5:.*]]:2 = d_return %[[VAL_3]]#0, %[[VAL_4]] : i16, i8
// CHECK:           end %[[VAL_5]]#0, %[[VAL_5]]#1 : i16, i8
// CHECK:         }
handshake.func @forkBW(%arg0: i32, %start: none) -> (i16, i8) {
  %results:2 = fork [2] %arg0 : i32
  %trunc0 = arith.trunci %results#0 : i32 to i16
  %trunc1 = arith.trunci %results#1 : i32 to i8
  %returnVals:2 = d_return %trunc0, %trunc1 : i16, i8
  end %returnVals#0, %returnVals#1 : i16, i8
}

// -----

// CHECK-LABEL:   handshake.func @lazyForkBW(
// CHECK-SAME:                               %[[VAL_0:.*]]: i32,
// CHECK-SAME:                               %[[VAL_1:.*]]: none, ...) -> (i16, i8) attributes {argNames = ["arg0", "start"], resNames = ["out0", "out1"]} {
// CHECK:           %[[VAL_2:.*]] = arith.trunci %[[VAL_0]] {bb = 0 : ui32} : i32 to i16
// CHECK:           %[[VAL_3:.*]]:2 = lazy_fork [2] %[[VAL_2]] : i16
// CHECK:           %[[VAL_4:.*]] = arith.trunci %[[VAL_3]]#1 : i16 to i8
// CHECK:           %[[VAL_5:.*]]:2 = d_return %[[VAL_3]]#0, %[[VAL_4]] : i16, i8
// CHECK:           end %[[VAL_5]]#0, %[[VAL_5]]#1 : i16, i8
// CHECK:         }
handshake.func @lazyForkBW(%arg0: i32, %start: none) -> (i16, i8) {
  %results:2 = lazy_fork [2] %arg0 : i32
  %trunc0 = arith.trunci %results#0 : i32 to i16
  %trunc1 = arith.trunci %results#1 : i32 to i8
  %returnVals:2 = d_return %trunc0, %trunc1 : i16, i8
  end %returnVals#0, %returnVals#1 : i16, i8
}

// -----

// CHECK-LABEL:   handshake.func @mergeBW(
// CHECK-SAME:                            %[[VAL_0:.*]]: i32, %[[VAL_1:.*]]: i32,
// CHECK-SAME:                            %[[VAL_2:.*]]: none, ...) -> i16 attributes {argNames = ["arg0", "arg1", "start"], resNames = ["out0"]} {
// CHECK:           %[[VAL_3:.*]] = arith.trunci %[[VAL_1]] {bb = 0 : ui32} : i32 to i16
// CHECK:           %[[VAL_4:.*]] = arith.trunci %[[VAL_0]] {bb = 0 : ui32} : i32 to i16
// CHECK:           %[[VAL_5:.*]] = merge %[[VAL_4]], %[[VAL_3]] : i16
// CHECK:           %[[VAL_6:.*]] = d_return %[[VAL_5]] : i16
// CHECK:           end %[[VAL_6]] : i16
// CHECK:         }
handshake.func @mergeBW(%arg0: i32, %arg1: i32, %start: none) -> i16 {
  %merge = merge %arg0, %arg1 : i32
  %trunc = arith.trunci %merge : i32 to i16
  %returnVal = d_return %trunc : i16
  end %returnVal : i16
}

// -----

// CHECK-LABEL:   handshake.func @branchBW(
// CHECK-SAME:                             %[[VAL_0:.*]]: i32,
// CHECK-SAME:                             %[[VAL_1:.*]]: none, ...) -> i16 attributes {argNames = ["arg0", "start"], resNames = ["out0"]} {
// CHECK:           %[[VAL_2:.*]] = arith.trunci %[[VAL_0]] {bb = 0 : ui32} : i32 to i16
// CHECK:           %[[VAL_3:.*]] = br %[[VAL_2]] : i16
// CHECK:           %[[VAL_4:.*]] = d_return %[[VAL_3]] : i16
// CHECK:           end %[[VAL_4]] : i16
// CHECK:         }
handshake.func @branchBW(%arg0: i32, %start: none) -> i16 {
  %branch = br %arg0 : i32
  %trunc = arith.trunci %branch : i32 to i16
  %returnVal = d_return %trunc : i16
  end %returnVal : i16
}

// -----

// CHECK-LABEL:   handshake.func @cmergeBW(
// CHECK-SAME:                             %[[VAL_0:.*]]: i32, %[[VAL_1:.*]]: i32,
// CHECK-SAME:                             %[[VAL_2:.*]]: none, ...) -> (i16, i16) attributes {argNames = ["arg0", "arg1", "start"], resNames = ["out0", "out1"]} {
// CHECK:           %[[VAL_3:.*]] = arith.trunci %[[VAL_1]] {bb = 0 : ui32} : i32 to i16
// CHECK:           %[[VAL_4:.*]] = arith.trunci %[[VAL_0]] {bb = 0 : ui32} : i32 to i16
// CHECK:           %[[VAL_5:.*]], %[[VAL_6:.*]] = control_merge %[[VAL_4]], %[[VAL_3]] : i16, i1
// CHECK:           %[[VAL_7:.*]] = arith.extui %[[VAL_6]] : i1 to i32
// CHECK:           %[[VAL_8:.*]] = arith.trunci %[[VAL_7]] : i32 to i16
// CHECK:           %[[VAL_9:.*]]:2 = d_return %[[VAL_5]], %[[VAL_8]] : i16, i16
// CHECK:           end %[[VAL_9]]#0, %[[VAL_9]]#1 : i16, i16
// CHECK:         }
handshake.func @cmergeBW(%arg0: i32, %arg1: i32, %start: none) -> (i16, i16) {
  %merge, %index = control_merge %arg0, %arg1 : i32, i32
  %truncMerge = arith.trunci %merge : i32 to i16
  %truncIndex = arith.trunci %index : i32 to i16
  %returnVals:2 = d_return %truncMerge, %truncIndex : i16, i16
  end %returnVals#0, %returnVals#1 : i16, i16
}

// -----

// CHECK-LABEL:   handshake.func @muxBW(
// CHECK-SAME:                          %[[VAL_0:.*]]: i32, %[[VAL_1:.*]]: i32, %[[VAL_2:.*]]: i32,
// CHECK-SAME:                          %[[VAL_3:.*]]: none, ...) -> i16 attributes {argNames = ["arg0", "arg1", "index", "start"], resNames = ["out0"]} {
// CHECK:           %[[VAL_4:.*]] = arith.trunci %[[VAL_1]] {bb = 0 : ui32} : i32 to i16
// CHECK:           %[[VAL_5:.*]] = arith.trunci %[[VAL_0]] {bb = 0 : ui32} : i32 to i16
// CHECK:           %[[VAL_6:.*]] = arith.trunci %[[VAL_2]] {bb = 0 : ui32} : i32 to i1
// CHECK:           %[[VAL_7:.*]] = mux %[[VAL_6]] {{\[}}%[[VAL_5]], %[[VAL_4]]] : i1, i16
// CHECK:           %[[VAL_8:.*]] = d_return %[[VAL_7]] : i16
// CHECK:           end %[[VAL_8]] : i16
// CHECK:         }
handshake.func @muxBW(%arg0: i32, %arg1: i32, %index: i32, %start: none) -> i16 {
  %mux = mux %index [%arg0, %arg1] : i32, i32
  %trunc = arith.trunci %mux : i32 to i16
  %returnVal = d_return %trunc : i16
  end %returnVal : i16
}

// -----

// CHECK-LABEL:   handshake.func @condBrBW(
// CHECK-SAME:                             %[[VAL_0:.*]]: i32, %[[VAL_1:.*]]: i1,
// CHECK-SAME:                             %[[VAL_2:.*]]: none, ...) -> (i16, i8) attributes {argNames = ["arg0", "cond", "start"], resNames = ["out0", "out1"]} {
// CHECK:           %[[VAL_3:.*]] = arith.trunci %[[VAL_0]] {bb = 0 : ui32} : i32 to i16
// CHECK:           %[[VAL_4:.*]], %[[VAL_5:.*]] = cond_br %[[VAL_1]], %[[VAL_3]] : i16
// CHECK:           %[[VAL_6:.*]] = arith.trunci %[[VAL_5]] : i16 to i8
// CHECK:           %[[VAL_7:.*]]:2 = d_return %[[VAL_4]], %[[VAL_6]] : i16, i8
// CHECK:           end %[[VAL_7]]#0, %[[VAL_7]]#1 : i16, i8
// CHECK:         }
handshake.func @condBrBW(%arg0: i32, %cond: i1, %start: none) -> (i16, i8) {
  %true, %false = cond_br %cond, %arg0 : i32
  %truncTrue = arith.trunci %true : i32 to i16
  %truncFalse = arith.trunci %false : i32 to i8
  %returnVals:2 = d_return %truncTrue, %truncFalse : i16, i8
  end %returnVals#0, %returnVals#1 : i16, i8
}

// -----

// CHECK-LABEL:   handshake.func @bufferBW(
// CHECK-SAME:                             %[[VAL_0:.*]]: i32,
// CHECK-SAME:                             %[[VAL_1:.*]]: none, ...) -> i16 attributes {argNames = ["arg0", "start"], resNames = ["out0"]} {
// CHECK:           %[[VAL_2:.*]] = arith.trunci %[[VAL_0]] {bb = 0 : ui32} : i32 to i16
// CHECK:           %[[VAL_3:.*]] = buffer [2] seq %[[VAL_2]] : i16
// CHECK:           %[[VAL_4:.*]] = d_return %[[VAL_3]] : i16
// CHECK:           end %[[VAL_4]] : i16
// CHECK:         }
handshake.func @bufferBW(%arg0: i32, %start: none) -> i16 {
  %buf = buffer [2] seq %arg0 : i32
  %trunc = arith.trunci %buf : i32 to i16
  %returnVal = d_return %trunc : i16
  end %returnVal : i16
}
