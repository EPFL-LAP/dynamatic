// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py
// RUN: dynamatic-opt --handshake-optimize-bitwidths %s --split-input-file | FileCheck %s

// CHECK-LABEL:   handshake.func @forkFW(
// CHECK-SAME:                           %[[VAL_0:.*]]: i16,
// CHECK-SAME:                           %[[VAL_1:.*]]: none, ...) -> (i32, i32) attributes {argNames = ["arg0", "start"], resNames = ["out0", "out1"]} {
// CHECK:           %[[VAL_2:.*]]:2 = fork [2] %[[VAL_0]] : i16
// CHECK:           %[[VAL_3:.*]] = arith.extsi %[[VAL_2]]#1 : i16 to i32
// CHECK:           %[[VAL_4:.*]] = arith.extsi %[[VAL_2]]#0 : i16 to i32
// CHECK:           %[[VAL_5:.*]]:2 = d_return %[[VAL_4]], %[[VAL_3]] : i32, i32
// CHECK:           end %[[VAL_5]]#0, %[[VAL_5]]#1 : i32, i32
// CHECK:         }
handshake.func @forkFW(%arg0: i16, %start: none) -> (i32, i32) {
  %ext0 = arith.extsi %arg0 : i16 to i32
  %results:2 = fork [2] %ext0 : i32
  %returnVals:2 = d_return %results#0, %results#1 : i32, i32
  end %returnVals#0, %returnVals#1 : i32, i32
}

// -----

// CHECK-LABEL:   handshake.func @lazyForkFW(
// CHECK-SAME:                               %[[VAL_0:.*]]: i16,
// CHECK-SAME:                               %[[VAL_1:.*]]: none, ...) -> (i32, i32) attributes {argNames = ["arg0", "start"], resNames = ["out0", "out1"]} {
// CHECK:           %[[VAL_2:.*]]:2 = lazy_fork [2] %[[VAL_0]] : i16
// CHECK:           %[[VAL_3:.*]] = arith.extsi %[[VAL_2]]#1 : i16 to i32
// CHECK:           %[[VAL_4:.*]] = arith.extsi %[[VAL_2]]#0 : i16 to i32
// CHECK:           %[[VAL_5:.*]]:2 = d_return %[[VAL_4]], %[[VAL_3]] : i32, i32
// CHECK:           end %[[VAL_5]]#0, %[[VAL_5]]#1 : i32, i32
// CHECK:         }
handshake.func @lazyForkFW(%arg0: i16, %start: none) -> (i32, i32) {
  %ext0 = arith.extsi %arg0 : i16 to i32
  %results:2 = lazy_fork [2] %ext0 : i32
  %returnVals:2 = d_return %results#0, %results#1 : i32, i32
  end %returnVals#0, %returnVals#1 : i32, i32
}

// -----

// CHECK-LABEL:   handshake.func @mergeFW(
// CHECK-SAME:                            %[[VAL_0:.*]]: i8, %[[VAL_1:.*]]: i16,
// CHECK-SAME:                            %[[VAL_2:.*]]: none, ...) -> i32 attributes {argNames = ["arg0", "arg1", "start"], resNames = ["out0"]} {
// CHECK:           %[[VAL_3:.*]] = arith.extsi %[[VAL_0]] {bb = 0 : ui32} : i8 to i16
// CHECK:           %[[VAL_4:.*]] = merge %[[VAL_3]], %[[VAL_1]] : i16
// CHECK:           %[[VAL_5:.*]] = arith.extsi %[[VAL_4]] : i16 to i32
// CHECK:           %[[VAL_6:.*]] = d_return %[[VAL_5]] : i32
// CHECK:           end %[[VAL_6]] : i32
// CHECK:         }
handshake.func @mergeFW(%arg0: i8, %arg1: i16, %start: none) -> i32 {
  %ext0 = arith.extsi %arg0 : i8 to i32
  %ext1 = arith.extsi %arg1 : i16 to i32
  %merge = merge %ext0, %ext1 : i32
  %returnVal = d_return %merge : i32
  end %returnVal : i32
}

// -----

// CHECK-LABEL:   handshake.func @branchFW(
// CHECK-SAME:                             %[[VAL_0:.*]]: i16,
// CHECK-SAME:                             %[[VAL_1:.*]]: none, ...) -> i32 attributes {argNames = ["arg0", "start"], resNames = ["out0"]} {
// CHECK:           %[[VAL_2:.*]] = br %[[VAL_0]] : i16
// CHECK:           %[[VAL_3:.*]] = arith.extsi %[[VAL_2]] : i16 to i32
// CHECK:           %[[VAL_4:.*]] = d_return %[[VAL_3]] : i32
// CHECK:           end %[[VAL_4]] : i32
// CHECK:         }
handshake.func @branchFW(%arg0: i16, %start: none) -> i32 {
  %ext0 = arith.extsi %arg0 : i16 to i32
  %branch = br %ext0 : i32
  %returnVal = d_return %branch : i32
  end %returnVal : i32
}

// -----

// CHECK-LABEL:   handshake.func @cmergeFW(
// CHECK-SAME:                             %[[VAL_0:.*]]: i8, %[[VAL_1:.*]]: i16,
// CHECK-SAME:                             %[[VAL_2:.*]]: none, ...) -> (i32, i8) attributes {argNames = ["arg0", "arg1", "start"], resNames = ["out0", "out1"]} {
// CHECK:           %[[VAL_3:.*]] = arith.extsi %[[VAL_0]] {bb = 0 : ui32} : i8 to i16
// CHECK:           %[[VAL_4:.*]], %[[VAL_5:.*]] = control_merge %[[VAL_3]], %[[VAL_1]] : i16, i1
// CHECK:           %[[VAL_6:.*]] = arith.extsi %[[VAL_4]] : i16 to i32
// CHECK:           %[[VAL_7:.*]] = arith.extui %[[VAL_5]] : i1 to i8
// CHECK:           %[[VAL_8:.*]]:2 = d_return %[[VAL_6]], %[[VAL_7]] : i32, i8
// CHECK:           end %[[VAL_8]]#0, %[[VAL_8]]#1 : i32, i8
// CHECK:         }
handshake.func @cmergeFW(%arg0: i8, %arg1: i16, %start: none) -> (i32, i8) {
  %ext0 = arith.extsi %arg0 : i8 to i32
  %ext1 = arith.extsi %arg1 : i16 to i32
  %merge, %index = control_merge %ext0, %ext1 : i32, i8
  %returnVals:2 = d_return %merge, %index : i32, i8
  end %returnVals#0, %returnVals#1 : i32, i8
}

// -----

// CHECK-LABEL:   handshake.func @muxFW(
// CHECK-SAME:                          %[[VAL_0:.*]]: i8, %[[VAL_1:.*]]: i16, %[[VAL_2:.*]]: i8,
// CHECK-SAME:                          %[[VAL_3:.*]]: none, ...) -> i32 attributes {argNames = ["arg0", "arg1", "index", "start"], resNames = ["out0"]} {
// CHECK:           %[[VAL_4:.*]] = arith.extsi %[[VAL_0]] {bb = 0 : ui32} : i8 to i16
// CHECK:           %[[VAL_5:.*]] = arith.trunci %[[VAL_2]] {bb = 0 : ui32} : i8 to i1
// CHECK:           %[[VAL_6:.*]] = mux %[[VAL_5]] {{\[}}%[[VAL_4]], %[[VAL_1]]] : i1, i16
// CHECK:           %[[VAL_7:.*]] = arith.extsi %[[VAL_6]] : i16 to i32
// CHECK:           %[[VAL_8:.*]] = d_return %[[VAL_7]] : i32
// CHECK:           end %[[VAL_8]] : i32
// CHECK:         }
handshake.func @muxFW(%arg0: i8, %arg1: i16, %index: i8, %start: none) -> i32 {
  %ext0 = arith.extsi %arg0 : i8 to i32
  %ext1 = arith.extsi %arg1 : i16 to i32
  %mux = mux %index [%ext0, %ext1] : i8, i32
  %returnVal = d_return %mux : i32
  end %returnVal : i32
}

// -----

// CHECK-LABEL:   handshake.func @condBrFw(
// CHECK-SAME:                             %[[VAL_0:.*]]: i16, %[[VAL_1:.*]]: i1,
// CHECK-SAME:                             %[[VAL_2:.*]]: none, ...) -> (i32, i32) attributes {argNames = ["arg0", "cond", "start"], resNames = ["out0", "out1"]} {
// CHECK:           %[[VAL_3:.*]], %[[VAL_4:.*]] = cond_br %[[VAL_1]], %[[VAL_0]] : i16
// CHECK:           %[[VAL_5:.*]] = arith.extsi %[[VAL_4]] : i16 to i32
// CHECK:           %[[VAL_6:.*]] = arith.extsi %[[VAL_3]] : i16 to i32
// CHECK:           %[[VAL_7:.*]]:2 = d_return %[[VAL_6]], %[[VAL_5]] : i32, i32
// CHECK:           end %[[VAL_7]]#0, %[[VAL_7]]#1 : i32, i32
// CHECK:         }
handshake.func @condBrFw(%arg0: i16, %cond: i1, %start: none) -> (i32, i32) {
  %ext0 = arith.extsi %arg0 : i16 to i32
  %true, %false = cond_br %cond, %ext0 : i32
  %returnVals:2 = d_return %true, %false : i32, i32
  end %returnVals#0, %returnVals#1 : i32, i32
}

// -----

// CHECK-LABEL:   handshake.func @bufferFW(
// CHECK-SAME:                             %[[VAL_0:.*]]: i16,
// CHECK-SAME:                             %[[VAL_1:.*]]: none, ...) -> i32 attributes {argNames = ["arg0", "start"], resNames = ["out0"]} {
// CHECK:           %[[VAL_2:.*]] = buffer [2] seq %[[VAL_0]] : i16
// CHECK:           %[[VAL_3:.*]] = arith.extsi %[[VAL_2]] : i16 to i32
// CHECK:           %[[VAL_4:.*]] = d_return %[[VAL_3]] : i32
// CHECK:           end %[[VAL_4]] : i32
// CHECK:         }
handshake.func @bufferFW(%arg0: i16, %start: none) -> i32 {
  %ext0 = arith.extsi %arg0 : i16 to i32
  %buf = buffer [2] seq %ext0 : i32
  %returnVal = d_return %buf : i32
  end %returnVal : i32
}

// -----

// CHECK-LABEL:   handshake.func @returnFW(
// CHECK-SAME:                             %[[VAL_0:.*]]: i16, %[[VAL_1:.*]]: i8,
// CHECK-SAME:                             %[[VAL_2:.*]]: none, ...) -> (i32, i32, none) attributes {argNames = ["arg0", "arg1", "start"], resNames = ["out0", "out1", "out2"]} {
// CHECK:           %[[VAL_3:.*]] = arith.extsi %[[VAL_0]] : i16 to i32
// CHECK:           %[[VAL_4:.*]] = arith.extsi %[[VAL_1]] : i8 to i32
// CHECK:           %[[VAL_5:.*]]:3 = d_return %[[VAL_3]], %[[VAL_4]], %[[VAL_2]] : i32, i32, none
// CHECK:           end %[[VAL_5]]#0, %[[VAL_5]]#1, %[[VAL_5]]#2 : i32, i32, none
// CHECK:         }
handshake.func @returnFW(%arg0: i16, %arg1: i8, %start: none) -> (i32, i32, none) {
  %ext0 = arith.extsi %arg0 : i16 to i32
  %ext1 = arith.extsi %arg1 : i8 to i32
  %returnVals:3 = d_return %ext0, %ext1, %start : i32, i32, none
  end %returnVals#0, %returnVals#1, %returnVals#2 : i32, i32, none
}
