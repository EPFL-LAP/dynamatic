// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py
// RUN: dynamatic-opt --scf-simple-if-to-select %s --remove-operation-names --split-input-file | FileCheck %s

// CHECK-LABEL:   func.func @thenYieldElseYield(
// CHECK-SAME:                                  %[[VAL_0:.*]]: i32, %[[VAL_1:.*]]: i32,
// CHECK-SAME:                                  %[[VAL_2:.*]]: i1) -> i32 {
// CHECK:           %[[VAL_3:.*]] = arith.select %[[VAL_2]], %[[VAL_0]], %[[VAL_1]] : i32
// CHECK:           return %[[VAL_3]] : i32
// CHECK:         }
func.func @thenYieldElseYield(%arg0: i32, %arg1: i32, %cond: i1) -> i32 {
  %ifRes = scf.if %cond -> (i32) {
    scf.yield %arg0 : i32
  } else {
    scf.yield %arg1 : i32
  }
  return %ifRes : i32
}

// -----

// CHECK-LABEL:   func.func @thenAddElseYield(
// CHECK-SAME:                                %[[VAL_0:.*]]: i32, %[[VAL_1:.*]]: i32, %[[VAL_2:.*]]: i32,
// CHECK-SAME:                                %[[VAL_3:.*]]: i1) -> i32 {
// CHECK:           %[[VAL_4:.*]] = arith.addi %[[VAL_0]], %[[VAL_1]] : i32
// CHECK:           %[[VAL_5:.*]] = arith.select %[[VAL_3]], %[[VAL_4]], %[[VAL_2]] : i32
// CHECK:           return %[[VAL_5]] : i32
// CHECK:         }
func.func @thenAddElseYield(%arg0: i32, %arg1: i32, %arg2: i32, %cond: i1) -> i32 {
  %ifRes = scf.if %cond -> (i32) {
    %add = arith.addi %arg0, %arg1 : i32
    scf.yield %add : i32
  } else {
    scf.yield %arg2 : i32
  }
  return %ifRes : i32
}

// -----

// CHECK-LABEL:   func.func @thenYieldElseAdd(
// CHECK-SAME:                                %[[VAL_0:.*]]: i32, %[[VAL_1:.*]]: i32,
// CHECK-SAME:                                %[[VAL_2:.*]]: i1) -> i32 {
// CHECK:           %[[VAL_3:.*]] = arith.addi %[[VAL_0]], %[[VAL_1]] : i32
// CHECK:           %[[VAL_4:.*]] = arith.select %[[VAL_2]], %[[VAL_0]], %[[VAL_3]] : i32
// CHECK:           return %[[VAL_4]] : i32
// CHECK:         }
func.func @thenYieldElseAdd(%arg0: i32, %arg1: i32, %cond: i1) -> i32 {
  %ifRes = scf.if %cond -> (i32) {
    scf.yield %arg0 : i32
  } else {
    %add = arith.addi %arg0, %arg1 : i32
    scf.yield %add : i32
  }
  return %ifRes : i32
}

// -----

// CHECK-LABEL:   func.func @thenAddElseAdd(
// CHECK-SAME:                              %[[VAL_0:.*]]: i32, %[[VAL_1:.*]]: i32, %[[VAL_2:.*]]: i32,
// CHECK-SAME:                              %[[VAL_3:.*]]: i1) -> i32 {
// CHECK:           %[[VAL_4:.*]] = arith.select %[[VAL_3]], %[[VAL_1]], %[[VAL_2]] : i32
// CHECK:           %[[VAL_5:.*]] = arith.addi %[[VAL_0]], %[[VAL_4]] : i32
// CHECK:           return %[[VAL_5]] : i32
// CHECK:         }
func.func @thenAddElseAdd(%arg0: i32, %arg1: i32, %arg2: i32, %cond: i1) -> i32 {
  %ifRes = scf.if %cond -> (i32) {
    %add1 = arith.addi %arg0, %arg1 : i32
    scf.yield %add1 : i32
  } else {
    %add2 = arith.addi %arg2, %arg0 : i32
    scf.yield %add2 : i32
  }
  return %ifRes : i32
}

// CHECK-LABEL:   func.func @thenSubElseSub(
// CHECK-SAME:                              %[[VAL_0:.*]]: i32, %[[VAL_1:.*]]: i32, %[[VAL_2:.*]]: i32,
// CHECK-SAME:                              %[[VAL_3:.*]]: i1) -> i32 {
// CHECK:           %[[VAL_4:.*]] = arith.select %[[VAL_3]], %[[VAL_1]], %[[VAL_2]] : i32
// CHECK:           %[[VAL_5:.*]] = arith.subi %[[VAL_0]], %[[VAL_4]] : i32
// CHECK:           return %[[VAL_5]] : i32
// CHECK:         }
func.func @thenSubElseSub(%arg0: i32, %arg1: i32, %arg2: i32, %cond: i1) -> i32 {
  %ifRes = scf.if %cond -> (i32) {
    %add1 = arith.subi %arg0, %arg1 : i32
    scf.yield %add1 : i32
  } else {
    %add2 = arith.subi %arg0, %arg2 : i32
    scf.yield %add2 : i32
  }
  return %ifRes : i32
}

// -----

// CHECK-LABEL:   func.func @thenYieldElseSub(
// CHECK-SAME:                                %[[VAL_0:.*]]: i32, %[[VAL_1:.*]]: i32, %[[VAL_2:.*]]: i32,
// CHECK-SAME:                                %[[VAL_3:.*]]: i1) -> i32 {
// CHECK:           %[[VAL_4:.*]] = arith.constant 0 : i32
// CHECK:           %[[VAL_5:.*]] = arith.subi %[[VAL_4]], %[[VAL_2]] : i32
// CHECK:           %[[VAL_6:.*]] = arith.select %[[VAL_3]], %[[VAL_2]], %[[VAL_5]] : i32
// CHECK:           return %[[VAL_6]] : i32
// CHECK:         }
func.func @thenYieldElseSub(%arg0: i32, %arg1: i32, %arg2: i32, %cond: i1) -> i32 {
  %zero = arith.constant 0 : i32
  %ifRes = scf.if %cond -> (i32) {
    scf.yield %arg2 : i32
  } else {
    %add = arith.subi %zero, %arg2 : i32
    scf.yield %add : i32
  }
  return %ifRes : i32
}


// -----

// CHECK-LABEL:   func.func @incompatibleSubs(
// CHECK-SAME:                                %[[VAL_0:.*]]: i32, %[[VAL_1:.*]]: i32, %[[VAL_2:.*]]: i32,
// CHECK-SAME:                                %[[VAL_3:.*]]: i1) -> i32 {
// CHECK:           %[[VAL_4:.*]] = scf.if %[[VAL_3]] -> (i32) {
// CHECK:             %[[VAL_5:.*]] = arith.subi %[[VAL_0]], %[[VAL_1]] : i32
// CHECK:             scf.yield %[[VAL_5]] : i32
// CHECK:           } else {
// CHECK:             %[[VAL_6:.*]] = arith.subi %[[VAL_2]], %[[VAL_0]] : i32
// CHECK:             scf.yield %[[VAL_6]] : i32
// CHECK:           }
// CHECK:           return %[[VAL_4]] : i32
// CHECK:         }
func.func @incompatibleSubs(%arg0: i32, %arg1: i32, %arg2: i32, %cond: i1) -> i32 {
  %ifRes = scf.if %cond -> (i32) {
    %sub1 = arith.subi %arg0, %arg1 : i32
    scf.yield %sub1 : i32
  } else {
    %sub2 = arith.subi %arg2, %arg0 : i32
    scf.yield %sub2 : i32
  }
  return %ifRes : i32
}

// -----

// CHECK-LABEL:   func.func @invalidBranch(
// CHECK-SAME:                             %[[VAL_0:.*]]: i32, %[[VAL_1:.*]]: i32, %[[VAL_2:.*]]: i32,
// CHECK-SAME:                             %[[VAL_3:.*]]: i1) -> i32 {
// CHECK:           %[[VAL_4:.*]] = scf.if %[[VAL_3]] -> (i32) {
// CHECK:             %[[VAL_5:.*]] = arith.addi %[[VAL_0]], %[[VAL_1]] : i32
// CHECK:             %[[VAL_6:.*]] = arith.addi %[[VAL_5]], %[[VAL_2]] : i32
// CHECK:             scf.yield %[[VAL_6]] : i32
// CHECK:           } else {
// CHECK:             scf.yield %[[VAL_0]] : i32
// CHECK:           }
// CHECK:           return %[[VAL_4]] : i32
// CHECK:         }
func.func @invalidBranch(%arg0: i32, %arg1: i32, %arg2: i32, %cond: i1) -> i32 {
  %ifRes = scf.if %cond -> (i32) {
    %add1 = arith.addi %arg0, %arg1 : i32
    %add2 = arith.addi %add1, %arg2 : i32
    scf.yield %add2 : i32
  } else {
    scf.yield %arg0 : i32
  }
  return %ifRes : i32
}

// -----

// CHECK-LABEL:   func.func @invalidYield(
// CHECK-SAME:                            %[[VAL_0:.*]]: i32, %[[VAL_1:.*]]: i32, %[[VAL_2:.*]]: i32,
// CHECK-SAME:                            %[[VAL_3:.*]]: i1) -> (i32, i32) {
// CHECK:           %[[VAL_4:.*]]:2 = scf.if %[[VAL_3]] -> (i32, i32) {
// CHECK:             scf.yield %[[VAL_0]], %[[VAL_1]] : i32, i32
// CHECK:           } else {
// CHECK:             scf.yield %[[VAL_0]], %[[VAL_2]] : i32, i32
// CHECK:           }
// CHECK:           return %[[VAL_5:.*]]#0, %[[VAL_5]]#1 : i32, i32
// CHECK:         }
func.func @invalidYield(%arg0: i32, %arg1: i32, %arg2: i32, %cond: i1) -> (i32, i32) {
  %ifRes:2 = scf.if %cond -> (i32, i32) {
    scf.yield %arg0, %arg1 : i32, i32
  } else {
    scf.yield %arg0, %arg2 : i32, i32
  }
  return %ifRes#0, %ifRes#1 : i32, i32
}
