// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py
// RUN: dynamatic-opt --handshake-set-buffering-properties="version=fpga20" --remove-operation-names %s --split-input-file | FileCheck %s

// CHECK-LABEL:   handshake.func @mergeBufferTwoInputs(
// CHECK-SAME:                                         %[[VAL_0:.*]]: !handshake.control<>, ...) -> !handshake.control<> attributes {argNames = ["start"], resNames = ["out0"]} {
// CHECK:           %[[VAL_1:.*]]:2 = fork  [2] %[[VAL_0]] : <>
// CHECK:           %[[VAL_2:.*]] = merge %[[VAL_1]]#0, %[[VAL_1]]#1 : <>
// CHECK:           %[[VAL_3:.*]] = return {bufProps = #handshake<bufProps{"0": [1,inf], [0,inf], 0.000000e+00, 0.000000e+00, 0.000000e+00}>} %[[VAL_2]] : <>
// CHECK:           end %[[VAL_3]] : <>
// CHECK:         }
handshake.func @mergeBufferTwoInputs(%start: !handshake.control<>) -> !handshake.control<> {
  %fork:2 = fork [2] %start : <>
  %merge = merge %fork#0, %fork#1 : <>
  %returnVal = return %merge : <>
  end %returnVal : <>
}

// -----

// CHECK-LABEL:   handshake.func @mcUnbuffered(
// CHECK-SAME:                                 %[[VAL_0:.*]]: memref<64xi32>,
// CHECK-SAME:                                 %[[VAL_1:.*]]: !handshake.channel<i32>,
// CHECK-SAME:                                 %[[VAL_2:.*]]: !handshake.control<>, ...) -> !handshake.channel<i32> attributes {argNames = ["memref", "addr", "start"], resNames = ["out0"]} {
// CHECK:           sink %[[VAL_2]] : <>
// CHECK:           %[[VAL_3:.*]], %[[VAL_4:.*]] = mem_controller{{\[}}%[[VAL_0]] : memref<64xi32>] (%[[VAL_5:.*]]) {bufProps = #handshake<bufProps{"0": [0,0], [0,0], 0.000000e+00, 0.000000e+00, 0.000000e+00, "1": [0,0], [0,0], 0.000000e+00, 0.000000e+00, 0.000000e+00}>, connectedBlocks = [0 : i32]} : (!handshake.channel<i32>) -> (!handshake.channel<i32>, !handshake.control<>)
// CHECK:           %[[VAL_5]], %[[VAL_6:.*]] = mc_load{{\[}}%[[VAL_1]]] %[[VAL_3]] {bufProps = #handshake<bufProps{"1": [0,0], [0,0], 0.000000e+00, 0.000000e+00, 0.000000e+00}>, handshake.bb = 0 : ui32} : <i32>, <i32>
// CHECK:           %[[VAL_7:.*]] = return %[[VAL_6]] : <i32>
// CHECK:           end {bufProps = #handshake<bufProps{"1": [0,0], [0,0], 0.000000e+00, 0.000000e+00, 0.000000e+00}>} %[[VAL_7]], %[[VAL_4]] : <i32>, <>
// CHECK:         }
handshake.func @mcUnbuffered(%memref: memref<64xi32>, %addr: !handshake.channel<i32>, %start: !handshake.control<>) -> !handshake.channel<i32> {
  sink %start : <>
  %ldData1, %done = mem_controller [%memref: memref<64xi32>] (%ldAddrToMem) {connectedBlocks = [0 : i32]} : (!handshake.channel<i32>) -> (!handshake.channel<i32>, !handshake.control<>)
  %ldAddrToMem, %ldDataToSucc = mc_load [%addr] %ldData1 {handshake.bb = 0 : ui32} : <i32>, <i32>
  %returnVal = return %ldDataToSucc : <i32>
  end %returnVal, %done : <i32>, <>
}

// -----

// CHECK-LABEL:   handshake.func @lsqUnbuffered(
// CHECK-SAME:                                  %[[VAL_0:.*]]: memref<64xi32>,
// CHECK-SAME:                                  %[[VAL_1:.*]]: !handshake.channel<i32>,
// CHECK-SAME:                                  %[[VAL_2:.*]]: !handshake.control<>, ...) -> !handshake.channel<i32> attributes {argNames = ["memref", "addr", "start"], resNames = ["out0"]} {
// CHECK:           %[[VAL_3:.*]], %[[VAL_4:.*]] = lsq{{\[}}%[[VAL_0]] : memref<64xi32>] (%[[VAL_2]], %[[VAL_5:.*]])  {bufProps = #handshake<bufProps{"0": [0,0], [0,0], 0.000000e+00, 0.000000e+00, 0.000000e+00, "1": [0,0], [0,0], 0.000000e+00, 0.000000e+00, 0.000000e+00, "2": [0,0], [0,0], 0.000000e+00, 0.000000e+00, 0.000000e+00}>, groupSizes = [1 : i32]} : (!handshake.control<>, !handshake.channel<i32>) -> (!handshake.channel<i32>, !handshake.control<>)
// CHECK:           %[[VAL_5]], %[[VAL_6:.*]] = lsq_load{{\[}}%[[VAL_1]]] %[[VAL_3]] {bufProps = #handshake<bufProps{"1": [0,0], [0,0], 0.000000e+00, 0.000000e+00, 0.000000e+00}>, handshake.bb = 0 : ui32} : <i32>, <i32>
// CHECK:           %[[VAL_7:.*]] = return %[[VAL_6]] : <i32>
// CHECK:           end {bufProps = #handshake<bufProps{"1": [0,0], [0,0], 0.000000e+00, 0.000000e+00, 0.000000e+00}>} %[[VAL_7]], %[[VAL_4]] : <i32>, <>
// CHECK:         }
handshake.func @lsqUnbuffered(%memref: memref<64xi32>, %addr: !handshake.channel<i32>, %start: !handshake.control<>) -> !handshake.channel<i32> {
  %ldData1, %done = lsq [%memref: memref<64xi32>] (%start, %ldAddrToMem) {groupSizes = [1 : i32]} : (!handshake.control<>, !handshake.channel<i32>) -> (!handshake.channel<i32>, !handshake.control<>)
  %ldAddrToMem, %ldDataToSucc = lsq_load [%addr] %ldData1 {handshake.bb = 0 : ui32} : <i32>, <i32>
  %returnVal = return %ldDataToSucc : <i32>
  end %returnVal, %done : <i32>, <>
}

// -----

// CHECK-LABEL:   handshake.func @lsqBufferControlPath(
// CHECK-SAME:                                         %[[VAL_0:.*]]: memref<64xi32>,
// CHECK-SAME:                                         %[[VAL_1:.*]]: !handshake.control<>, ...) -> !handshake.channel<i32> attributes {argNames = ["memref", "start"], resNames = ["out0"]} {
// CHECK:           %[[VAL_2:.*]]:3, %[[VAL_3:.*]] = lsq{{\[}}%[[VAL_0]] : memref<64xi32>] (%[[VAL_4:.*]]#0, %[[VAL_5:.*]], %[[VAL_6:.*]]#0, %[[VAL_7:.*]], %[[VAL_8:.*]]#0, %[[VAL_9:.*]])  {bufProps = #handshake<bufProps{"0": [0,0], [0,0], 0.000000e+00, 0.000000e+00, 0.000000e+00, "1": [0,0], [0,0], 0.000000e+00, 0.000000e+00, 0.000000e+00, "2": [0,0], [0,0], 0.000000e+00, 0.000000e+00, 0.000000e+00, "3": [0,0], [0,0], 0.000000e+00, 0.000000e+00, 0.000000e+00, "4": [0,0], [0,0], 0.000000e+00, 0.000000e+00, 0.000000e+00, "5": [0,0], [0,0], 0.000000e+00, 0.000000e+00, 0.000000e+00, "6": [0,0], [0,0], 0.000000e+00, 0.000000e+00, 0.000000e+00}>, groupSizes = [1 : i32, 1 : i32, 1 : i32]} : (!handshake.control<>, !handshake.channel<i32>, !handshake.control<>, !handshake.channel<i32>, !handshake.control<>, !handshake.channel<i32>) -> (!handshake.channel<i32>, !handshake.channel<i32>, !handshake.channel<i32>, !handshake.control<>)
// CHECK:           %[[VAL_10:.*]] = merge %[[VAL_1]], %[[VAL_6]]#2 {bufProps = #handshake<bufProps{"1": [0,inf], [1,inf], 0.000000e+00, 0.000000e+00, 0.000000e+00}>, handshake.bb = 1 : ui32} : <>
// CHECK:           %[[VAL_4]]:4 = lazy_fork  [4] %[[VAL_10]] {bufProps = #handshake<bufProps{"0": [1,inf], [0,inf], 0.000000e+00, 0.000000e+00, 0.000000e+00}>, handshake.bb = 1 : ui32} : <>
// CHECK:           %[[VAL_11:.*]] = constant %[[VAL_4]]#1 {bufProps = #handshake<bufProps{"0": [1,inf], [0,inf], 0.000000e+00, 0.000000e+00, 0.000000e+00}>, handshake.bb = 1 : ui32, value = false} : <i1>
// CHECK:           %[[VAL_12:.*]] = constant %[[VAL_4]]#2 {bufProps = #handshake<bufProps{"0": [1,inf], [0,inf], 0.000000e+00, 0.000000e+00, 0.000000e+00}>, handshake.bb = 1 : ui32, value = 0 : i32} : <i32>
// CHECK:           %[[VAL_5]], %[[VAL_13:.*]] = lsq_load{{\[}}%[[VAL_12]]] %[[VAL_2]]#0 {bufProps = #handshake<bufProps{"1": [0,0], [0,0], 0.000000e+00, 0.000000e+00, 0.000000e+00}>, handshake.bb = 1 : ui32} : <i32>, <i32>
// CHECK:           %[[VAL_14:.*]], %[[VAL_15:.*]] = cond_br %[[VAL_11]], %[[VAL_4]]#3 {bufProps = #handshake<bufProps{"1": [0,inf], [1,inf], 0.000000e+00, 0.000000e+00, 0.000000e+00}>, handshake.bb = 1 : ui32} : <i1>, <>
// CHECK:           sink %[[VAL_13]] : <i32>
// CHECK:           %[[VAL_6]]:3 = lazy_fork  [3] %[[VAL_14]] {handshake.bb = 2 : ui32} : <>
// CHECK:           %[[VAL_16:.*]] = constant %[[VAL_6]]#1 {bufProps = #handshake<bufProps{"0": [1,inf], [0,inf], 0.000000e+00, 0.000000e+00, 0.000000e+00}>, handshake.bb = 2 : ui32, value = 1 : i32} : <i32>
// CHECK:           %[[VAL_7]], %[[VAL_17:.*]] = lsq_load{{\[}}%[[VAL_16]]] %[[VAL_2]]#1 {bufProps = #handshake<bufProps{"1": [0,0], [0,0], 0.000000e+00, 0.000000e+00, 0.000000e+00}>, handshake.bb = 2 : ui32} : <i32>, <i32>
// CHECK:           sink %[[VAL_17]] : <i32>
// CHECK:           %[[VAL_8]]:2 = lazy_fork  [2] %[[VAL_15]] {handshake.bb = 3 : ui32} : <>
// CHECK:           %[[VAL_18:.*]] = constant %[[VAL_8]]#1 {bufProps = #handshake<bufProps{"0": [1,inf], [0,inf], 0.000000e+00, 0.000000e+00, 0.000000e+00}>, handshake.bb = 3 : ui32, value = 2 : i32} : <i32>
// CHECK:           %[[VAL_9]], %[[VAL_19:.*]] = lsq_load{{\[}}%[[VAL_18]]] %[[VAL_2]]#2 {bufProps = #handshake<bufProps{"1": [0,0], [0,0], 0.000000e+00, 0.000000e+00, 0.000000e+00}>, handshake.bb = 3 : ui32} : <i32>, <i32>
// CHECK:           %[[VAL_20:.*]] = return {handshake.bb = 3 : ui32} %[[VAL_19]] : <i32>
// CHECK:           end {bufProps = #handshake<bufProps{"1": [0,0], [0,0], 0.000000e+00, 0.000000e+00, 0.000000e+00}>, handshake.bb = 3 : ui32} %[[VAL_20]], %[[VAL_3]] : <i32>, <>
// CHECK:         }
handshake.func @lsqBufferControlPath(%memref: memref<64xi32>, %start: !handshake.control<>) -> !handshake.channel<i32> {
  %ldData1, %ldData2, %ldData3, %done = lsq [%memref: memref<64xi32>] (%lazyForkCtrl1#0, %ldAddrToMem1, %lazyForkCtrl2#0, %ldAddrToMem2, %lazyForkCtrl3#0, %ldAddrToMem3) {groupSizes = [1 : i32, 1 : i32, 1 : i32]} : (!handshake.control<>, !handshake.channel<i32>, !handshake.control<>, !handshake.channel<i32>, !handshake.control<>, !handshake.channel<i32>) -> (!handshake.channel<i32>, !handshake.channel<i32>, !handshake.channel<i32>, !handshake.control<>)
// ^^bb0
// ^^bb1 (from ^^bb0, ^bb2, to ^bb2, ^bb3):
  %ctrl1 = merge %start#0, %lazyForkCtrl2#2 {handshake.bb = 1 : ui32} : <>
  %lazyForkCtrl1:4 = lazy_fork [4] %ctrl1 {handshake.bb = 1 : ui32} : <>
  %cond = constant %lazyForkCtrl1#1 {value = 0 : i1, handshake.bb = 1 : ui32} : <i1>
  %addr1 = constant %lazyForkCtrl1#2 {value = 0 : i32, handshake.bb = 1 : ui32} : <i32>
  %ldAddrToMem1, %ldDataToSucc1 = lsq_load [%addr1] %ldData1 {handshake.bb = 1 : ui32} : <i32>, <i32>
  %ctrl1To2, %ctrl1To3 = cond_br %cond, %lazyForkCtrl1#3 {handshake.bb = 1 : ui32} : <i1>, <>
  sink %ldDataToSucc1 : <i32>
// ^^bb2 (from ^^bb1, to ^^bb1):
  %lazyForkCtrl2:3 = lazy_fork [3] %ctrl1To2 {handshake.bb = 2 : ui32} : <>
  %addr2 = constant %lazyForkCtrl2#1 {value = 1 : i32, handshake.bb = 2 : ui32} : <i32>
  %ldAddrToMem2, %ldDataToSucc2 = lsq_load [%addr2] %ldData2 {handshake.bb = 2 : ui32} : <i32>, <i32>
  sink %ldDataToSucc2 : <i32>
// ^^bb3:
  %lazyForkCtrl3:2 = lazy_fork [2] %ctrl1To3 {handshake.bb = 3 : ui32} : <>
  %addr3 = constant %lazyForkCtrl3#1 {value = 2 : i32, handshake.bb = 3 : ui32} : <i32>
  %ldAddrToMem3, %ldDataToSucc3 = lsq_load [%addr3] %ldData3 {handshake.bb = 3 : ui32} : <i32>, <i32>
  %returnVal = return {handshake.bb = 3 : ui32} %ldDataToSucc3 : <i32>
  end {handshake.bb = 3 : ui32} %returnVal, %done : <i32>, <>
}
