// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py
// RUN: dynamatic-opt --handshake-minimize-cst-width %s --split-input-file | FileCheck %s

// CHECK-LABEL:   handshake.func @doNothing(
// CHECK-SAME:                              %[[VAL_0:.*]]: none, ...) -> i6 attributes {argNames = ["start"], resNames = ["out0"]} {
// CHECK:           %[[VAL_1:.*]] = constant %[[VAL_0]] {value = 31 : i6} : i6
// CHECK:           %[[VAL_2:.*]] = d_return %[[VAL_1]] : i6
// CHECK:           end %[[VAL_2]] : i6
// CHECK:         }
handshake.func @doNothing(%start: none) -> i6 {
  %cst = constant %start {value = 31 : i6} : i6
  %returnVal = d_return %cst : i6
  end %returnVal : i6
}

// -----

// CHECK-LABEL:   handshake.func @zeroCst(
// CHECK-SAME:                            %[[VAL_0:.*]]: none, ...) -> i32 attributes {argNames = ["start"], resNames = ["out0"]} {
// CHECK:           %[[VAL_1:.*]] = constant %[[VAL_0]] {value = false} : i1
// CHECK:           %[[VAL_2:.*]] = arith.extsi %[[VAL_1]] : i1 to i32
// CHECK:           %[[VAL_3:.*]] = d_return %[[VAL_2]] : i32
// CHECK:           end %[[VAL_3]] : i32
// CHECK:         }
handshake.func @zeroCst(%start: none) -> i32 {
  %cst = constant %start {value = 0 : i32} : i32
  %returnVal = d_return %cst : i32
  end %returnVal : i32
}

// -----

// CHECK-LABEL:   handshake.func @oneCst(
// CHECK-SAME:                           %[[VAL_0:.*]]: none, ...) -> i32 attributes {argNames = ["start"], resNames = ["out0"]} {
// CHECK:           %[[VAL_1:.*]] = constant %[[VAL_0]] {value = 1 : i2} : i2
// CHECK:           %[[VAL_2:.*]] = arith.extsi %[[VAL_1]] : i2 to i32
// CHECK:           %[[VAL_3:.*]] = d_return %[[VAL_2]] : i32
// CHECK:           end %[[VAL_3]] : i32
// CHECK:         }
handshake.func @oneCst(%start: none) -> i32 {
  %cst = constant %start {value = 1 : i32} : i32
  %returnVal = d_return %cst : i32
  end %returnVal : i32
}

// -----

// CHECK-LABEL:   handshake.func @powerOfTwoMinusOne(
// CHECK-SAME:                                       %[[VAL_0:.*]]: none, ...) -> i32 attributes {argNames = ["start"], resNames = ["out0"]} {
// CHECK:           %[[VAL_1:.*]] = constant %[[VAL_0]] {value = 31 : i6} : i6
// CHECK:           %[[VAL_2:.*]] = arith.extsi %[[VAL_1]] : i6 to i32
// CHECK:           %[[VAL_3:.*]] = d_return %[[VAL_2]] : i32
// CHECK:           end %[[VAL_3]] : i32
// CHECK:         }
handshake.func @powerOfTwoMinusOne(%start: none) -> i32 {
  %cst = constant %start {value = 31 : i32} : i32
  %returnVal = d_return %cst : i32
  end %returnVal : i32
}

// -----

// CHECK-LABEL:   handshake.func @powerOfTwo(
// CHECK-SAME:                               %[[VAL_0:.*]]: none, ...) -> i32 attributes {argNames = ["start"], resNames = ["out0"]} {
// CHECK:           %[[VAL_1:.*]] = constant %[[VAL_0]] {value = 32 : i7} : i7
// CHECK:           %[[VAL_2:.*]] = arith.extsi %[[VAL_1]] : i7 to i32
// CHECK:           %[[VAL_3:.*]] = d_return %[[VAL_2]] : i32
// CHECK:           end %[[VAL_3]] : i32
// CHECK:         }
handshake.func @powerOfTwo(%start: none) -> i32 {
  %cst = constant %start {value = 32 : i32} : i32
  %returnVal = d_return %cst : i32
  end %returnVal : i32
}

// -----

// CHECK-LABEL:   handshake.func @maxPosVal(
// CHECK-SAME:                              %[[VAL_0:.*]]: none, ...) -> i64 attributes {argNames = ["start"], resNames = ["out0"]} {
// CHECK:           %[[VAL_1:.*]] = constant %[[VAL_0]] {value = 9223372036854775807 : i64} : i64
// CHECK:           %[[VAL_2:.*]] = d_return %[[VAL_1]] : i64
// CHECK:           end %[[VAL_2]] : i64
// CHECK:         }
handshake.func @maxPosVal(%start: none) -> i64 {
  %cst = constant %start {value = 9223372036854775807 : i64} : i64
  %returnVal = d_return %cst : i64
  end %returnVal : i64
}

// -----

// CHECK-LABEL:   handshake.func @negPowerOfMinusOne(
// CHECK-SAME:                                       %[[VAL_0:.*]]: none, ...) -> i32 attributes {argNames = ["start"], resNames = ["out0"]} {
// CHECK:           %[[VAL_1:.*]] = constant %[[VAL_0]] {value = -33 : i7} : i7
// CHECK:           %[[VAL_2:.*]] = arith.extsi %[[VAL_1]] : i7 to i32
// CHECK:           %[[VAL_3:.*]] = d_return %[[VAL_2]] : i32
// CHECK:           end %[[VAL_3]] : i32
// CHECK:         }
handshake.func @negPowerOfMinusOne(%start: none) -> i32 {
  %cst = constant %start {value = -33 : i32} : i32
  %returnVal = d_return %cst : i32
  end %returnVal : i32
}

// -----

// CHECK-LABEL:   handshake.func @negPowerOfTwo(
// CHECK-SAME:                                  %[[VAL_0:.*]]: none, ...) -> i32 attributes {argNames = ["start"], resNames = ["out0"]} {
// CHECK:           %[[VAL_1:.*]] = constant %[[VAL_0]] {value = -32 : i6} : i6
// CHECK:           %[[VAL_2:.*]] = arith.extsi %[[VAL_1]] : i6 to i32
// CHECK:           %[[VAL_3:.*]] = d_return %[[VAL_2]] : i32
// CHECK:           end %[[VAL_3]] : i32
// CHECK:         }
handshake.func @negPowerOfTwo(%start: none) -> i32 {
  %cst = constant %start {value = -32 : i32} : i32
  %returnVal = d_return %cst : i32
  end %returnVal : i32
}

// -----

// CHECK-LABEL:   handshake.func @minNegVal(
// CHECK-SAME:                              %[[VAL_0:.*]]: none, ...) -> i64 attributes {argNames = ["start"], resNames = ["out0"]} {
// CHECK:           %[[VAL_1:.*]] = constant %[[VAL_0]] {value = -9223372036854775808 : i64} : i64
// CHECK:           %[[VAL_2:.*]] = d_return %[[VAL_1]] : i64
// CHECK:           end %[[VAL_2]] : i64
// CHECK:         }
handshake.func @minNegVal(%start: none) -> i64 {
  %cst = constant %start {value = -9223372036854775808 : i64} : i64
  %returnVal = d_return %cst : i64
  end %returnVal : i64
}

// -----

// CHECK-LABEL:   handshake.func @inheritBB(
// CHECK-SAME:                              %[[VAL_0:.*]]: none, ...) -> i32 attributes {argNames = ["start"], resNames = ["out0"]} {
// CHECK:           %[[VAL_1:.*]] = constant %[[VAL_0]] {bb = 0 : i32, value = 32 : i7} : i7
// CHECK:           %[[VAL_2:.*]] = arith.extsi %[[VAL_1]] {bb = 0 : i32} : i7 to i32
// CHECK:           %[[VAL_3:.*]] = d_return %[[VAL_2]] : i32
// CHECK:           end %[[VAL_3]] : i32
// CHECK:         }
handshake.func @inheritBB(%start: none) -> i32 {
  %cst = constant %start {value = 32 : i32, bb = 0 : i32} : i32
  %returnVal = d_return %cst : i32
  end %returnVal : i32
}
