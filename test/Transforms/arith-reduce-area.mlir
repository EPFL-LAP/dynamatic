// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py
// RUN: dynamatic-opt --arith-reduce-area %s --split-input-file | FileCheck %s

// CHECK-LABEL:   func.func @replaceMulAddWithSub(
// CHECK-SAME:                                    %[[VAL_0:.*]]: i32,
// CHECK-SAME:                                    %[[VAL_1:.*]]: i32) -> i32 {
// CHECK:           %[[VAL_2:.*]] = arith.subi %[[VAL_1]], %[[VAL_0]] : i32
// CHECK:           return %[[VAL_2]] : i32
// CHECK:         }
func.func @replaceMulAddWithSub(%arg0: i32, %arg1: i32) -> i32 {
  %negOne = arith.constant -1 : i32
  %mul = arith.muli %negOne, %arg0 : i32
  %add = arith.addi %mul, %arg1 : i32
  return %add : i32
}

// -----

// CHECK-LABEL:   func.func @replaceMulAddWithSubWrongCst(
// CHECK-SAME:                                            %[[VAL_0:.*]]: i32,
// CHECK-SAME:                                            %[[VAL_1:.*]]: i32) -> i32 {
// CHECK:           %[[VAL_2:.*]] = arith.constant -2 : i32
// CHECK:           %[[VAL_3:.*]] = arith.muli %[[VAL_0]], %[[VAL_2]] : i32
// CHECK:           %[[VAL_4:.*]] = arith.addi %[[VAL_3]], %[[VAL_1]] : i32
// CHECK:           return %[[VAL_4]] : i32
// CHECK:         }
func.func @replaceMulAddWithSubWrongCst(%arg0: i32, %arg1: i32) -> i32 {
  %negTwo = arith.constant -2 : i32
  %mul = arith.muli %negTwo, %arg0 : i32
  %add = arith.addi %mul, %arg1 : i32
  return %add : i32
}

// -----

// CHECK-LABEL:   func.func @replaceMulAddWithSubNoCst(
// CHECK-SAME:                                         %[[VAL_0:.*]]: i32, %[[VAL_1:.*]]: i32,
// CHECK-SAME:                                         %[[VAL_2:.*]]: i32) -> i32 {
// CHECK:           %[[VAL_3:.*]] = arith.muli %[[VAL_2]], %[[VAL_0]] : i32
// CHECK:           %[[VAL_4:.*]] = arith.addi %[[VAL_3]], %[[VAL_1]] : i32
// CHECK:           return %[[VAL_4]] : i32
// CHECK:         }
func.func @replaceMulAddWithSubNoCst(%arg0: i32, %arg1: i32, %arg2: i32) -> i32 {
  %mul = arith.muli %arg2, %arg0 : i32
  %add = arith.addi %mul, %arg1 : i32
  return %add : i32
}