// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py
// RUN: dynamatic-opt --optimize-bits %s --split-input-file | FileCheck %s

// CHECK-LABEL:   handshake.func @optimizeAdd(
// CHECK-SAME:                                %[[VAL_0:.*]]: none, ...) -> i32 attributes {argNames = ["arg0"], resNames = ["out0"]} {
// CHECK:           %[[VAL_1:.*]] = merge %[[VAL_0]] : none
// CHECK:           %[[VAL_2:.*]] = constant %[[VAL_1]] {value = 999 : i11} : i11
// CHECK:           %[[VAL_3:.*]] = arith.extsi %[[VAL_2]] : i11 to i32
// CHECK:           %[[VAL_4:.*]] = constant %[[VAL_1]] {value = -2 : i2} : i2
// CHECK:           %[[VAL_5:.*]] = arith.extsi %[[VAL_4]] : i2 to i32
// CHECK:           %[[VAL_6:.*]] = arith.extsi %[[VAL_2]] : i11 to i12
// CHECK:           %[[VAL_7:.*]] = arith.extsi %[[VAL_4]] : i2 to i12
// CHECK:           %[[VAL_8:.*]] = arith.addi %[[VAL_6]], %[[VAL_7]] : i12
// CHECK:           %[[VAL_9:.*]] = arith.extsi %[[VAL_8]] : i12 to i32
// CHECK:           %[[VAL_10:.*]] = d_return %[[VAL_9]] : i32
// CHECK:           end
// CHECK:         }
handshake.func @optimizeAdd(%arg0: none) -> i32 {
  %0 = merge %arg0 : none
  %1 = constant %0 {value = 999 : i11} : i11
  %2 = arith.extsi %1 : i11 to i32
  %3 = constant %0 {value = 2 : i2}: i2
  %4 = arith.extsi %3 : i2 to i32
  %5 = arith.addi %2, %4 : i32
  %6 = d_return %5 : i32
  end
}
// -----

// CHECK-LABEL:   handshake.func @optimizeBackwardSub(
// CHECK-SAME:                                        %[[VAL_0:.*]]: none, ...) -> i8 attributes {argNames = ["arg0"], resNames = ["out0"]} {
// CHECK:           %[[VAL_1:.*]] = merge %[[VAL_0]] : none
// CHECK:           %[[VAL_2:.*]] = constant %[[VAL_1]] {value = 999 : i11} : i11
// CHECK:           %[[VAL_3:.*]] = arith.extsi %[[VAL_2]] : i11 to i32
// CHECK:           %[[VAL_4:.*]] = constant %[[VAL_1]] {value = 5 : i4} : i4
// CHECK:           %[[VAL_5:.*]] = arith.extsi %[[VAL_4]] : i4 to i32
// CHECK:           %[[VAL_6:.*]] = arith.trunci %[[VAL_2]] : i11 to i8
// CHECK:           %[[VAL_7:.*]] = arith.extsi %[[VAL_4]] : i4 to i8
// CHECK:           %[[VAL_8:.*]] = arith.subi %[[VAL_6]], %[[VAL_7]] : i8
// CHECK:           end
// CHECK:         }
handshake.func @optimizeBackwardSub(%arg0: none) -> i8 {
  %0 = merge %arg0 : none
  %1 = constant %0 {value = 999 : i11} : i11
  %2 = arith.extsi %1 : i11 to i32
  %3 = constant %0 {value = 5 : i4} : i4
  %4 = arith.extsi %3 : i4 to i32
  %5 = arith.subi %2, %4 : i32
  %6 = arith.trunci %5 : i32 to i8
  end
}

// -----

// CHECK-LABEL:   handshake.func @optimizeBackwardMuL(
// CHECK-SAME:                                        %[[VAL_0:.*]]: none, ...) -> i8 attributes {argNames = ["arg0"], resNames = ["out0"]} {
// CHECK:           %[[VAL_1:.*]] = merge %[[VAL_0]] : none
// CHECK:           %[[VAL_2:.*]] = constant %[[VAL_1]] {value = 999 : i11} : i11
// CHECK:           %[[VAL_3:.*]] = arith.extsi %[[VAL_2]] : i11 to i32
// CHECK:           %[[VAL_4:.*]] = constant %[[VAL_1]] {value = 20 : i6} : i6
// CHECK:           %[[VAL_5:.*]] = arith.extsi %[[VAL_4]] : i6 to i32
// CHECK:           %[[VAL_6:.*]] = arith.extsi %[[VAL_2]] : i11 to i16
// CHECK:           %[[VAL_7:.*]] = arith.extsi %[[VAL_4]] : i6 to i16
// CHECK:           %[[VAL_8:.*]] = arith.muli %[[VAL_6]], %[[VAL_7]] : i16
// CHECK:           end
// CHECK:         }
handshake.func @optimizeBackwardMuL(%arg0: none) -> i8 {
  %0 = merge %arg0 : none
  %1 = constant %0 {value = 999 : i11} : i11
  %2 = arith.extsi %1 : i11 to i32
  %3 = constant %0 {value = 20 : i6} : i6
  %4 = arith.extsi %3 : i6 to i32
  %5 = arith.muli %2, %4 : i32
  %6 = arith.trunci %5 : i32 to i16
  end
}

// -----

// CHECK-LABEL:   handshake.func @optimizeBackwardShR(
// CHECK-SAME:                                        %[[VAL_0:.*]]: none, ...) -> i8 attributes {argNames = ["arg0"], resNames = ["out0"]} {
// CHECK:           %[[VAL_1:.*]] = merge %[[VAL_0]] : none
// CHECK:           %[[VAL_2:.*]] = constant %[[VAL_1]] {value = 999 : i11} : i11
// CHECK:           %[[VAL_3:.*]] = arith.extsi %[[VAL_2]] : i11 to i32
// CHECK:           %[[VAL_4:.*]] = constant %[[VAL_1]] {value = 2 : i4} : i4
// CHECK:           %[[VAL_5:.*]] = arith.extsi %[[VAL_4]] : i4 to i32
// CHECK:           %[[VAL_6:.*]] = arith.trunci %[[VAL_2]] : i11 to i8
// CHECK:           %[[VAL_7:.*]] = arith.extsi %[[VAL_4]] : i4 to i8
// CHECK:           %[[VAL_8:.*]] = arith.shrui %[[VAL_6]], %[[VAL_7]] : i8
// CHECK:           end
// CHECK:         }
handshake.func @optimizeBackwardShR(%arg0: none) -> i8 {
  %0 = merge %arg0 : none
  %1 = constant %0 {value = 999 : i11} : i11
  %2 = arith.extsi %1 : i11 to i32
  %3 = constant %0 {value = 2 : i4} : i4
  %4 = arith.extsi %3 : i4 to i32
  %5 = arith.shrui %2, %4 : i32
  %6 = arith.trunci %5 : i32 to i8
  end
}

// -----

// CHECK-LABEL:   handshake.func @optimizeBackwardDiV(
// CHECK-SAME:                                        %[[VAL_0:.*]]: none, ...) -> i8 attributes {argNames = ["arg0"], resNames = ["out0"]} {
// CHECK:           %[[VAL_1:.*]] = merge %[[VAL_0]] : none
// CHECK:           %[[VAL_2:.*]] = constant %[[VAL_1]] {value = 999 : i11} : i11
// CHECK:           %[[VAL_3:.*]] = arith.extsi %[[VAL_2]] : i11 to i32
// CHECK:           %[[VAL_4:.*]] = constant %[[VAL_1]] {value = 20 : i6} : i6
// CHECK:           %[[VAL_5:.*]] = arith.extsi %[[VAL_4]] : i6 to i32
// CHECK:           %[[VAL_6:.*]] = arith.extsi %[[VAL_2]] : i11 to i12
// CHECK:           %[[VAL_7:.*]] = arith.extsi %[[VAL_4]] : i6 to i12
// CHECK:           %[[VAL_8:.*]] = arith.divsi %[[VAL_6]], %[[VAL_7]] : i12
// CHECK:           end
// CHECK:         }
handshake.func @optimizeBackwardDiV(%arg0: none) -> i8 {
  %0 = merge %arg0 : none
  %1 = constant %0 {value = 999 : i11} : i11
  %2 = arith.extsi %1 : i11 to i32
  %3 = constant %0 {value = 20 : i6} : i6
  %4 = arith.extsi %3 : i6 to i32
  %5 = arith.divsi %2, %4 : i32
  %6 = arith.trunci %5 : i32 to i16
  end
}

// -----
