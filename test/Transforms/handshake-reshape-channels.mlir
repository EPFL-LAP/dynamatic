// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py
// RUN: dynamatic-opt --handshake-reshape-channels --remove-operation-names %s --split-input-file | FileCheck %s

// CHECK-LABEL:   handshake.func @reshapeAdd(
// CHECK-SAME:                               %[[VAL_0:.*]]: !handshake.channel<i32, [down1: i2, down2: i8]>, %[[VAL_1:.*]]: !handshake.channel<i32, [down1: i2, down2: i8]>, ...) -> !handshake.channel<i32, [down1: i2, down2: i8]> attributes {argNames = ["lhs", "rhs"], resNames = ["out0"]} {
// CHECK:           %[[VAL_2:.*]] = reshape[MergeExtra] %[[VAL_0]] : <i32, [down1: i2, down2: i8]> -> <i32, [mergedDown: i10]>
// CHECK:           %[[VAL_3:.*]] = reshape[MergeExtra] %[[VAL_1]] : <i32, [down1: i2, down2: i8]> -> <i32, [mergedDown: i10]>
// CHECK:           %[[VAL_4:.*]] = addi %[[VAL_2]], %[[VAL_3]] : <i32, [mergedDown: i10]>
// CHECK:           %[[VAL_5:.*]] = reshape[SplitExtra] %[[VAL_4]] : <i32, [mergedDown: i10]> -> <i32, [down1: i2, down2: i8]>
// CHECK:           end %[[VAL_5]] : <i32, [down1: i2, down2: i8]>
// CHECK:         }
handshake.func @reshapeAdd(%lhs: !handshake.channel<i32, [down1: i2, down2: i8]>, %rhs: !handshake.channel<i32, [down1: i2, down2: i8]>) -> !handshake.channel<i32, [down1: i2, down2: i8]> {
  %res = addi %lhs, %rhs : <i32, [down1: i2, down2: i8]>
  end %res : <i32, [down1: i2, down2: i8]>
}

// -----

// CHECK-LABEL:   handshake.func @reshapeDoubleAdd(
// CHECK-SAME:                                     %[[VAL_0:.*]]: !handshake.channel<i32, [down1: i2, down2: i8]>, %[[VAL_1:.*]]: !handshake.channel<i32, [down1: i2, down2: i8]>, ...) -> !handshake.channel<i32, [down1: i2, down2: i8]> attributes {argNames = ["lhs", "rhs"], resNames = ["out0"]} {
// CHECK:           %[[VAL_2:.*]] = reshape[MergeExtra] %[[VAL_0]] : <i32, [down1: i2, down2: i8]> -> <i32, [mergedDown: i10]>
// CHECK:           %[[VAL_3:.*]] = reshape[MergeExtra] %[[VAL_1]] : <i32, [down1: i2, down2: i8]> -> <i32, [mergedDown: i10]>
// CHECK:           %[[VAL_4:.*]] = addi %[[VAL_2]], %[[VAL_3]] : <i32, [mergedDown: i10]>
// CHECK:           %[[VAL_5:.*]] = addi %[[VAL_4]], %[[VAL_4]] : <i32, [mergedDown: i10]>
// CHECK:           %[[VAL_6:.*]] = reshape[SplitExtra] %[[VAL_5]] : <i32, [mergedDown: i10]> -> <i32, [down1: i2, down2: i8]>
// CHECK:           end %[[VAL_6]] : <i32, [down1: i2, down2: i8]>
// CHECK:         }
handshake.func @reshapeDoubleAdd(%lhs: !handshake.channel<i32, [down1: i2, down2: i8]>, %rhs: !handshake.channel<i32, [down1: i2, down2: i8]>) -> !handshake.channel<i32, [down1: i2, down2: i8]> {
  %res = addi %lhs, %rhs : <i32, [down1: i2, down2: i8]>
  %twoRes = addi %res, %res : <i32, [down1: i2, down2: i8]>
  end %twoRes : <i32, [down1: i2, down2: i8]>
}

// -----

// CHECK-LABEL:   handshake.func @reshapeSelect(
// CHECK-SAME:                                  %[[VAL_0:.*]]: !handshake.channel<i1>, %[[VAL_1:.*]]: !handshake.channel<i32, [down: i2]>, %[[VAL_2:.*]]: !handshake.channel<i32, [down: i2]>, ...) -> !handshake.channel<i32, [down: i2]> attributes {argNames = ["sel", "lhs", "rhs"], resNames = ["out0"]} {
// CHECK:           %[[VAL_3:.*]] = reshape[MergeData] %[[VAL_1]] : <i32, [down: i2]> -> <i34>
// CHECK:           %[[VAL_4:.*]] = reshape[MergeData] %[[VAL_2]] : <i32, [down: i2]> -> <i34>
// CHECK:           %[[VAL_5:.*]] = select %[[VAL_0]]{{\[}}%[[VAL_3]], %[[VAL_4]]] : <i1>, <i34>
// CHECK:           %[[VAL_6:.*]] = reshape[SplitData] %[[VAL_5]] : <i34> -> <i32, [down: i2]>
// CHECK:           end %[[VAL_6]] : <i32, [down: i2]>
// CHECK:         }
handshake.func @reshapeSelect(%sel: !handshake.channel<i1>, %lhs: !handshake.channel<i32, [down: i2]>, %rhs: !handshake.channel<i32, [down: i2]>) -> !handshake.channel<i32, [down: i2]> {
  %res = select %sel [%lhs, %rhs] : <i1>, <i32, [down: i2]>
  end %res : <i32, [down: i2]>
}

// -----

// CHECK-LABEL:   handshake.func @reshapeForkIntoAdd(
// CHECK-SAME:                                       %[[VAL_0:.*]]: !handshake.channel<i32, [down: i2]>, ...) -> !handshake.channel<i32, [down: i2]> attributes {argNames = ["in"], resNames = ["out0"]} {
// CHECK:           %[[VAL_1:.*]] = reshape[MergeData] %[[VAL_0]] : <i32, [down: i2]> -> <i34>
// CHECK:           %[[VAL_2:.*]]:2 = fork  [2] %[[VAL_1]] : <i34>
// CHECK:           %[[VAL_3:.*]] = reshape[SplitData] %[[VAL_2]]#0 : <i34> -> <i32, [down: i2]>
// CHECK:           %[[VAL_4:.*]] = reshape[SplitData] %[[VAL_2]]#1 : <i34> -> <i32, [down: i2]>
// CHECK:           %[[VAL_5:.*]] = reshape[MergeExtra] %[[VAL_3]] : <i32, [down: i2]> -> <i32, [mergedDown: i2]>
// CHECK:           %[[VAL_6:.*]] = reshape[MergeExtra] %[[VAL_4]] : <i32, [down: i2]> -> <i32, [mergedDown: i2]>
// CHECK:           %[[VAL_7:.*]] = addi %[[VAL_5]], %[[VAL_6]] : <i32, [mergedDown: i2]>
// CHECK:           %[[VAL_8:.*]] = reshape[SplitExtra] %[[VAL_7]] : <i32, [mergedDown: i2]> -> <i32, [down: i2]>
// CHECK:           end %[[VAL_8]] : <i32, [down: i2]>
// CHECK:         }
handshake.func @reshapeForkIntoAdd(%in: !handshake.channel<i32, [down: i2]>) -> !handshake.channel<i32, [down: i2]> {
  %fork:2 = fork [2] %in : <i32, [down: i2]>
  %res = addi %fork#0, %fork#1 : <i32, [down: i2]>
  end %res : <i32, [down: i2]>
}

// -----

// CHECK-LABEL:   handshake.func @reshapeMergeDown(
// CHECK-SAME:                                     %[[VAL_0:.*]]: !handshake.channel<i32, [mergedDown: i2]>, %[[VAL_1:.*]]: !handshake.channel<i32, [mergedDown: i2]>, %[[VAL_2:.*]]: !handshake.channel<i32, [mergedDown: i2]>, ...) -> !handshake.channel<i32, [mergedDown: i2]> attributes {argNames = ["arg0", "arg1", "rhs"], resNames = ["out0"]} {
// CHECK:           %[[VAL_3:.*]] = reshape[MergeData] %[[VAL_0]] : <i32, [mergedDown: i2]> -> <i34>
// CHECK:           %[[VAL_4:.*]] = reshape[MergeData] %[[VAL_1]] : <i32, [mergedDown: i2]> -> <i34>
// CHECK:           %[[VAL_5:.*]] = merge %[[VAL_3]], %[[VAL_4]] : <i34>
// CHECK:           %[[VAL_6:.*]] = reshape[SplitData] %[[VAL_5]] : <i34> -> <i32, [mergedDown: i2]>
// CHECK:           end %[[VAL_6]] : <i32, [mergedDown: i2]>
// CHECK:         }
handshake.func @reshapeMergeDown(%arg0: !handshake.channel<i32, [mergedDown: i2]>, %arg1: !handshake.channel<i32, [mergedDown: i2]>, %rhs: !handshake.channel<i32, [mergedDown: i2]>) -> !handshake.channel<i32, [mergedDown: i2]> {
  %res = merge %arg0, %arg1 : <i32, [mergedDown: i2]>
  end %res : <i32, [mergedDown: i2]>
}

// -----

// CHECK-LABEL:   handshake.func @reshapeMergeUp(
// CHECK-SAME:                                   %[[VAL_0:.*]]: !handshake.channel<i32, [up1: i2 (U)]>, %[[VAL_1:.*]]: !handshake.channel<i32, [up1: i2 (U)]>, %[[VAL_2:.*]]: !handshake.channel<i32, [up1: i2 (U)]>, ...) -> !handshake.channel<i32, [up1: i2 (U)]> attributes {argNames = ["arg0", "arg1", "rhs"], resNames = ["out0"]} {
// CHECK:           %[[VAL_3:.*]] = reshape[MergeData] %[[VAL_0]] : <i32, [up1: i2 (U)]> -> <i32, [mergedUp: i2 (U)]>
// CHECK:           %[[VAL_4:.*]] = reshape[MergeData] %[[VAL_1]] : <i32, [up1: i2 (U)]> -> <i32, [mergedUp: i2 (U)]>
// CHECK:           %[[VAL_5:.*]] = merge %[[VAL_3]], %[[VAL_4]] : <i32, [mergedUp: i2 (U)]>
// CHECK:           %[[VAL_6:.*]] = reshape[SplitData] %[[VAL_5]] : <i32, [mergedUp: i2 (U)]> -> <i32, [up1: i2 (U)]>
// CHECK:           end %[[VAL_6]] : <i32, [up1: i2 (U)]>
// CHECK:         }
handshake.func @reshapeMergeUp(%arg0: !handshake.channel<i32, [up1: i2 (U)]>, %arg1: !handshake.channel<i32, [up1: i2 (U)]>, %rhs: !handshake.channel<i32, [up1: i2 (U)]>) -> !handshake.channel<i32, [up1: i2 (U)]> {
  %res = merge %arg0, %arg1 : <i32, [up1: i2 (U)]>
  end %res : <i32, [up1: i2 (U)]>
}
