// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py
// RUN: dynamatic-opt --lower-std-to-handshake-fpga18 %s --split-input-file | FileCheck %s

// CHECK-LABEL:   handshake.func @simpleLoadStore(
// CHECK-SAME:                                    %[[VAL_0:.*]]: index,
// CHECK-SAME:                                    %[[VAL_1:.*]]: memref<4xi32>,
// CHECK-SAME:                                    %[[VAL_2:.*]]: none, ...) -> none attributes {argNames = ["in0", "in1", "in2"], resNames = ["out0"]} {
// CHECK:           %[[VAL_3:.*]], %[[VAL_4:.*]] = mem_controller{{\[}}%[[VAL_1]] : memref<4xi32>] (%[[VAL_5:.*]], %[[VAL_6:.*]], %[[VAL_7:.*]], %[[VAL_8:.*]]) {accesses = {{\[\[}}#handshake<AccessType Store>, #handshake<AccessType Load>]], id = 0 : i32} : (i32, index, i32, index) -> (i32, none)
// CHECK:           %[[VAL_9:.*]] = merge %[[VAL_0]] : index
// CHECK:           %[[VAL_10:.*]] = merge %[[VAL_2]] : none
// CHECK:           %[[VAL_5]] = constant %[[VAL_10]] {value = 1 : i32} : i32
// CHECK:           %[[VAL_11:.*]] = constant %[[VAL_10]] {value = 1 : i32} : i32
// CHECK:           %[[VAL_6]], %[[VAL_7]] = d_store{{\[}}%[[VAL_9]]] %[[VAL_11]] : i32, index
// CHECK:           %[[VAL_8]], %[[VAL_12:.*]] = d_load{{\[}}%[[VAL_9]]] %[[VAL_3]] : index, i32
// CHECK:           %[[VAL_13:.*]] = d_return %[[VAL_10]] : none
// CHECK:           end %[[VAL_13]], %[[VAL_4]] : none, none
// CHECK:         }
func.func @simpleLoadStore(%arg0 : index, %arg1 : memref<4xi32>) {
  %c1 = arith.constant 1 : i32
  memref.store %c1, %arg1[%arg0] : memref<4xi32>
  %0 = memref.load %arg1[%arg0] : memref<4xi32>
  return
}

// -----

// CHECK-LABEL:   handshake.func @storeMulBlocks(
// CHECK-SAME:                                   %[[VAL_0:.*]]: i1,
// CHECK-SAME:                                   %[[VAL_1:.*]]: index,
// CHECK-SAME:                                   %[[VAL_2:.*]]: memref<4xi32>,
// CHECK-SAME:                                   %[[VAL_3:.*]]: none, ...) -> none attributes {argNames = ["in0", "in1", "in2", "in3"], resNames = ["out0"]} {
// CHECK:           %[[VAL_4:.*]] = mem_controller{{\[}}%[[VAL_2]] : memref<4xi32>] (%[[VAL_5:.*]], %[[VAL_6:.*]], %[[VAL_7:.*]], %[[VAL_8:.*]], %[[VAL_9:.*]], %[[VAL_10:.*]]) {accesses = {{\[\[}}#handshake<AccessType Store>], [#handshake<AccessType Store>]], id = 0 : i32} : (i32, index, i32, i32, index, i32) -> none
// CHECK:           %[[VAL_11:.*]] = merge %[[VAL_0]] : i1
// CHECK:           %[[VAL_12:.*]] = merge %[[VAL_1]] : index
// CHECK:           %[[VAL_13:.*]] = merge %[[VAL_3]] : none
// CHECK:           %[[VAL_14:.*]], %[[VAL_15:.*]] = cond_br %[[VAL_11]], %[[VAL_12]] : index
// CHECK:           %[[VAL_16:.*]], %[[VAL_17:.*]] = cond_br %[[VAL_11]], %[[VAL_13]] : none
// CHECK:           %[[VAL_18:.*]] = merge %[[VAL_14]] : index
// CHECK:           %[[VAL_19:.*]], %[[VAL_20:.*]] = control_merge %[[VAL_16]] : none, index
// CHECK:           %[[VAL_5]] = constant %[[VAL_19]] {value = 1 : i32} : i32
// CHECK:           %[[VAL_21:.*]] = constant %[[VAL_19]] {value = 1 : i32} : i32
// CHECK:           %[[VAL_6]], %[[VAL_7]] = d_store{{\[}}%[[VAL_18]]] %[[VAL_21]] : i32, index
// CHECK:           %[[VAL_22:.*]] = br %[[VAL_19]] : none
// CHECK:           %[[VAL_23:.*]] = merge %[[VAL_15]] : index
// CHECK:           %[[VAL_24:.*]], %[[VAL_25:.*]] = control_merge %[[VAL_17]] : none, index
// CHECK:           %[[VAL_8]] = constant %[[VAL_24]] {value = 1 : i32} : i32
// CHECK:           %[[VAL_26:.*]] = constant %[[VAL_24]] {value = 2 : i32} : i32
// CHECK:           %[[VAL_9]], %[[VAL_10]] = d_store{{\[}}%[[VAL_23]]] %[[VAL_26]] : i32, index
// CHECK:           %[[VAL_27:.*]] = br %[[VAL_24]] : none
// CHECK:           %[[VAL_28:.*]], %[[VAL_29:.*]] = control_merge %[[VAL_27]], %[[VAL_22]] : none, index
// CHECK:           %[[VAL_30:.*]] = d_return %[[VAL_28]] : none
// CHECK:           end %[[VAL_30]], %[[VAL_4]] : none, none
// CHECK:         }
func.func @storeMulBlocks(%arg0 : i1, %arg1 : index, %arg2 : memref<4xi32>) {
  cf.cond_br %arg0, ^bb1, ^bb2
^bb1:
  %c1 = arith.constant 1 : i32
  memref.store %c1, %arg2[%arg1] : memref<4xi32>
  cf.br ^bb3
^bb2:
  %c2 = arith.constant 2 : i32
  memref.store %c2, %arg2[%arg1] : memref<4xi32>
  cf.br ^bb3
^bb3:
  return
}

// -----

// CHECK-LABEL:   handshake.func @forwardLoadToBB(
// CHECK-SAME:                                    %[[VAL_0:.*]]: i1,
// CHECK-SAME:                                    %[[VAL_1:.*]]: index,
// CHECK-SAME:                                    %[[VAL_2:.*]]: memref<4xi32>,
// CHECK-SAME:                                    %[[VAL_3:.*]]: none, ...) -> none attributes {argNames = ["in0", "in1", "in2", "in3"], resNames = ["out0"]} {
// CHECK:           %[[VAL_4:.*]], %[[VAL_5:.*]] = mem_controller{{\[}}%[[VAL_2]] : memref<4xi32>] (%[[VAL_6:.*]]) {accesses = {{\[\[}}#handshake<AccessType Load>]], id = 0 : i32} : (index) -> (i32, none)
// CHECK:           %[[VAL_7:.*]] = merge %[[VAL_0]] : i1
// CHECK:           %[[VAL_8:.*]] = merge %[[VAL_1]] : index
// CHECK:           %[[VAL_9:.*]] = merge %[[VAL_3]] : none
// CHECK:           %[[VAL_6]], %[[VAL_10:.*]] = d_load{{\[}}%[[VAL_8]]] %[[VAL_4]] : index, i32
// CHECK:           %[[VAL_11:.*]], %[[VAL_12:.*]] = cond_br %[[VAL_7]], %[[VAL_10]] : i32
// CHECK:           %[[VAL_13:.*]], %[[VAL_14:.*]] = cond_br %[[VAL_7]], %[[VAL_9]] : none
// CHECK:           %[[VAL_15:.*]] = merge %[[VAL_11]] : i32
// CHECK:           %[[VAL_16:.*]], %[[VAL_17:.*]] = control_merge %[[VAL_13]] : none, index
// CHECK:           %[[VAL_18:.*]] = constant %[[VAL_16]] {value = 1 : i32} : i32
// CHECK:           %[[VAL_19:.*]] = arith.addi %[[VAL_15]], %[[VAL_18]] : i32
// CHECK:           %[[VAL_20:.*]] = br %[[VAL_16]] : none
// CHECK:           %[[VAL_21:.*]], %[[VAL_22:.*]] = control_merge %[[VAL_20]], %[[VAL_14]] : none, index
// CHECK:           %[[VAL_23:.*]] = d_return %[[VAL_21]] : none
// CHECK:           end %[[VAL_23]], %[[VAL_5]] : none, none
// CHECK:         }
func.func @forwardLoadToBB(%arg0 : i1, %arg1 : index, %arg2: memref<4xi32>) {
  %0 = memref.load %arg2[%arg1] : memref<4xi32>
  cf.cond_br %arg0, ^bb1, ^bb2
^bb1:
  %c1 = arith.constant 1 : i32
  %1 = arith.addi %0, %c1 : i32
  cf.br ^bb2
^bb2:
  return
}

// -----

// CHECK-LABEL:   handshake.func @multipleMemories(
// CHECK-SAME:                                     %[[VAL_0:.*]]: i1,
// CHECK-SAME:                                     %[[VAL_1:.*]]: memref<4xi32>, %[[VAL_2:.*]]: memref<4xi32>,
// CHECK-SAME:                                     %[[VAL_3:.*]]: none, ...) -> none attributes {argNames = ["in0", "in1", "in2", "in3"], resNames = ["out0"]} {
// CHECK:           %[[VAL_4:.*]], %[[VAL_5:.*]] = mem_controller{{\[}}%[[VAL_2]] : memref<4xi32>] (%[[VAL_6:.*]], %[[VAL_7:.*]], %[[VAL_8:.*]], %[[VAL_9:.*]]) {accesses = {{\[\[}}#handshake<AccessType Load>], [#handshake<AccessType Store>]], id = 1 : i32} : (index, i32, index, i32) -> (i32, none)
// CHECK:           %[[VAL_10:.*]], %[[VAL_11:.*]] = mem_controller{{\[}}%[[VAL_1]] : memref<4xi32>] (%[[VAL_12:.*]], %[[VAL_13:.*]], %[[VAL_14:.*]], %[[VAL_15:.*]]) {accesses = {{\[\[}}#handshake<AccessType Store>], [#handshake<AccessType Load>]], id = 0 : i32} : (i32, index, i32, index) -> (i32, none)
// CHECK:           %[[VAL_16:.*]] = merge %[[VAL_0]] : i1
// CHECK:           %[[VAL_17:.*]] = merge %[[VAL_3]] : none
// CHECK:           %[[VAL_18:.*]] = constant %[[VAL_17]] {value = 0 : index} : index
// CHECK:           %[[VAL_19:.*]] = constant %[[VAL_17]] {value = 0 : index} : index
// CHECK:           %[[VAL_20:.*]], %[[VAL_21:.*]] = cond_br %[[VAL_16]], %[[VAL_18]] : index
// CHECK:           %[[VAL_22:.*]], %[[VAL_23:.*]] = cond_br %[[VAL_16]], %[[VAL_17]] : none
// CHECK:           %[[VAL_24:.*]], %[[VAL_25:.*]] = cond_br %[[VAL_16]], %[[VAL_19]] : index
// CHECK:           %[[VAL_26:.*]] = merge %[[VAL_20]] : index
// CHECK:           %[[VAL_27:.*]], %[[VAL_28:.*]] = control_merge %[[VAL_22]] : none, index
// CHECK:           %[[VAL_12]] = constant %[[VAL_27]] {value = 1 : i32} : i32
// CHECK:           %[[VAL_6]], %[[VAL_29:.*]] = d_load{{\[}}%[[VAL_26]]] %[[VAL_4]] : index, i32
// CHECK:           %[[VAL_13]], %[[VAL_14]] = d_store{{\[}}%[[VAL_26]]] %[[VAL_29]] : i32, index
// CHECK:           %[[VAL_30:.*]] = d_return %[[VAL_27]] : none
// CHECK:           %[[VAL_31:.*]] = merge %[[VAL_25]] : index
// CHECK:           %[[VAL_32:.*]], %[[VAL_33:.*]] = control_merge %[[VAL_23]] : none, index
// CHECK:           %[[VAL_7]] = constant %[[VAL_32]] {value = 1 : i32} : i32
// CHECK:           %[[VAL_15]], %[[VAL_34:.*]] = d_load{{\[}}%[[VAL_31]]] %[[VAL_10]] : index, i32
// CHECK:           %[[VAL_8]], %[[VAL_9]] = d_store{{\[}}%[[VAL_31]]] %[[VAL_34]] : i32, index
// CHECK:           %[[VAL_35:.*]] = d_return %[[VAL_32]] : none
// CHECK:           %[[VAL_36:.*]] = merge %[[VAL_30]], %[[VAL_35]] : none
// CHECK:           end %[[VAL_36]], %[[VAL_5]], %[[VAL_11]] : none, none, none
// CHECK:         }
func.func @multipleMemories(%arg0 : i1, %arg1: memref<4xi32>, %arg2: memref<4xi32>) {
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 0 : index
  cf.cond_br %arg0, ^bb1, ^bb2
^bb1:
  %1 = memref.load %arg2[%c0] : memref<4xi32>
  memref.store %1, %arg1[%c0] : memref<4xi32>
  return
^bb2:
  %2 = memref.load %arg1[%c1] : memref<4xi32>
  memref.store %2, %arg2[%c1] : memref<4xi32>
  return
}
