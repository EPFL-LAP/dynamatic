// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py
// RUN: dynamatic-opt --lower-std-to-handshake-fpga18 --remove-operation-names %s --split-input-file | FileCheck %s

// CHECK-LABEL:   handshake.func @simpleOneGroupLSQ(
// CHECK-SAME:                                      %[[VAL_0:.*]]: memref<64xi32>,
// CHECK-SAME:                                      %[[VAL_1:.*]]: none, ...) -> i32 attributes {argNames = ["in0", "in1"], resNames = ["out0"]} {
// CHECK:           %[[VAL_2:.*]], %[[VAL_3:.*]] = lsq{{\[}}%[[VAL_0]] : memref<64xi32>] (%[[VAL_4:.*]], %[[VAL_5:.*]], %[[VAL_6:.*]], %[[VAL_7:.*]], %[[VAL_8:.*]], %[[VAL_9:.*]])  {groupSizes = [3 : i32]} : (none, index, index, i32, index, i32) -> (i32, none)
// CHECK:           %[[VAL_4]] = merge %[[VAL_1]] {bb = 0 : ui32} : none
// CHECK:           %[[VAL_10:.*]] = constant %[[VAL_4]] {bb = 0 : ui32, value = 0 : index} : index
// CHECK:           %[[VAL_11:.*]] = constant %[[VAL_4]] {bb = 0 : ui32, value = 1 : index} : index
// CHECK:           %[[VAL_12:.*]] = constant %[[VAL_4]] {bb = 0 : ui32, value = 2 : index} : index
// CHECK:           %[[VAL_5]], %[[VAL_13:.*]] = lsq_load{{\[}}%[[VAL_10]]] %[[VAL_2]] {bb = 0 : ui32} : index, i32
// CHECK:           %[[VAL_6]], %[[VAL_7]] = lsq_store{{\[}}%[[VAL_11]]] %[[VAL_13]] {bb = 0 : ui32} : i32, index
// CHECK:           %[[VAL_8]], %[[VAL_9]] = lsq_store{{\[}}%[[VAL_12]]] %[[VAL_13]] {bb = 0 : ui32} : i32, index
// CHECK:           %[[VAL_14:.*]] = d_return {bb = 0 : ui32} %[[VAL_13]] : i32
// CHECK:           end {bb = 0 : ui32} %[[VAL_14]], %[[VAL_3]] : i32, none
// CHECK:         }
func.func @simpleOneGroupLSQ(%mem: memref<64xi32>) -> i32 {
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c2 = arith.constant 2 : index
  %ldData1 = memref.load %mem[%c0] {mem_interface = #handshake.mem_interface<LSQ: 0>} : memref<64xi32>
  memref.store %ldData1, %mem[%c1] {mem_interface = #handshake.mem_interface<LSQ: 0>} : memref<64xi32>
  memref.store %ldData1, %mem[%c2] {mem_interface = #handshake.mem_interface<LSQ: 0>} : memref<64xi32>
  return %ldData1 : i32
}

// -----

// CHECK-LABEL:   handshake.func @simpleMultiGroupLSQ(
// CHECK-SAME:                                        %[[VAL_0:.*]]: memref<64xi32>,
// CHECK-SAME:                                        %[[VAL_1:.*]]: none, ...) -> i32 attributes {argNames = ["in0", "in1"], resNames = ["out0"]} {
// CHECK:           %[[VAL_2:.*]]:2, %[[VAL_3:.*]] = lsq{{\[}}%[[VAL_0]] : memref<64xi32>] (%[[VAL_4:.*]], %[[VAL_5:.*]], %[[VAL_6:.*]], %[[VAL_7:.*]], %[[VAL_8:.*]], %[[VAL_9:.*]], %[[VAL_10:.*]], %[[VAL_11:.*]])  {groupSizes = [2 : i32, 2 : i32]} : (none, index, index, none, index, i32, index, i32) -> (i32, i32, none)
// CHECK:           %[[VAL_4]] = merge %[[VAL_1]] {bb = 0 : ui32} : none
// CHECK:           %[[VAL_12:.*]] = constant %[[VAL_4]] {bb = 0 : ui32, value = 0 : index} : index
// CHECK:           %[[VAL_13:.*]] = constant %[[VAL_4]] {bb = 0 : ui32, value = 1 : index} : index
// CHECK:           %[[VAL_14:.*]] = constant %[[VAL_4]] {bb = 0 : ui32, value = 2 : index} : index
// CHECK:           %[[VAL_5]], %[[VAL_15:.*]] = lsq_load{{\[}}%[[VAL_12]]] %[[VAL_2]]#0 {bb = 0 : ui32} : index, i32
// CHECK:           %[[VAL_6]], %[[VAL_16:.*]] = lsq_load{{\[}}%[[VAL_13]]] %[[VAL_2]]#1 {bb = 0 : ui32} : index, i32
// CHECK:           %[[VAL_17:.*]] = br %[[VAL_15]] {bb = 0 : ui32} : i32
// CHECK:           %[[VAL_18:.*]] = br %[[VAL_16]] {bb = 0 : ui32} : i32
// CHECK:           %[[VAL_19:.*]] = br %[[VAL_13]] {bb = 0 : ui32} : index
// CHECK:           %[[VAL_20:.*]] = br %[[VAL_14]] {bb = 0 : ui32} : index
// CHECK:           %[[VAL_21:.*]] = br %[[VAL_4]] {bb = 0 : ui32} : none
// CHECK:           %[[VAL_22:.*]] = merge %[[VAL_17]] {bb = 1 : ui32} : i32
// CHECK:           %[[VAL_23:.*]] = merge %[[VAL_18]] {bb = 1 : ui32} : i32
// CHECK:           %[[VAL_24:.*]] = merge %[[VAL_19]] {bb = 1 : ui32} : index
// CHECK:           %[[VAL_25:.*]] = merge %[[VAL_20]] {bb = 1 : ui32} : index
// CHECK:           %[[VAL_7]], %[[VAL_26:.*]] = control_merge %[[VAL_21]] {bb = 1 : ui32} : none, index
// CHECK:           %[[VAL_8]], %[[VAL_9]] = lsq_store{{\[}}%[[VAL_24]]] %[[VAL_22]] {bb = 1 : ui32} : i32, index
// CHECK:           %[[VAL_10]], %[[VAL_11]] = lsq_store{{\[}}%[[VAL_25]]] %[[VAL_23]] {bb = 1 : ui32} : i32, index
// CHECK:           %[[VAL_27:.*]] = d_return {bb = 1 : ui32} %[[VAL_22]] : i32
// CHECK:           end {bb = 1 : ui32} %[[VAL_27]], %[[VAL_3]] : i32, none
// CHECK:         }
func.func @simpleMultiGroupLSQ(%mem: memref<64xi32>) -> i32 {
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c2 = arith.constant 2 : index
  %ldData1 = memref.load %mem[%c0] {mem_interface = #handshake.mem_interface<LSQ: 0>} : memref<64xi32>
  %ldData2 = memref.load %mem[%c1] {mem_interface = #handshake.mem_interface<LSQ: 0>} : memref<64xi32>
  cf.br ^bb1(%ldData1, %ldData2 : i32, i32)
^bb1(%stData1: i32, %stData2: i32):
  memref.store %stData1, %mem[%c1] {mem_interface = #handshake.mem_interface<LSQ: 1>} : memref<64xi32>
  memref.store %stData2, %mem[%c2] {mem_interface = #handshake.mem_interface<LSQ: 1>} : memref<64xi32>
  return %stData1 : i32
}

// -----

// CHECK-LABEL:   handshake.func @mixLSQAndMCLoads(
// CHECK-SAME:                                     %[[VAL_0:.*]]: memref<64xi32>,
// CHECK-SAME:                                     %[[VAL_1:.*]]: none, ...) -> i32 attributes {argNames = ["in0", "in1"], resNames = ["out0"]} {
// CHECK:           %[[VAL_2:.*]]:3, %[[VAL_3:.*]] = mem_controller{{\[}}%[[VAL_0]] : memref<64xi32>] (%[[VAL_4:.*]], %[[VAL_5:.*]], %[[VAL_6:.*]]#2, %[[VAL_6]]#3, %[[VAL_6]]#4) {connectedBlocks = [0 : i32, 1 : i32]} : (index, index, index, index, i32) -> (i32, i32, i32, none)
// CHECK:           %[[VAL_6]]:5, %[[VAL_7:.*]] = lsq[MC] (%[[VAL_8:.*]], %[[VAL_9:.*]], %[[VAL_10:.*]], %[[VAL_11:.*]], %[[VAL_2]]#2)  {groupSizes = [1 : i32, 1 : i32]} : (none, index, none, index, i32) -> (i32, i32, index, index, i32, none)
// CHECK:           %[[VAL_8]] = merge %[[VAL_1]] {bb = 0 : ui32} : none
// CHECK:           %[[VAL_12:.*]] = constant %[[VAL_8]] {bb = 0 : ui32, value = 0 : index} : index
// CHECK:           %[[VAL_13:.*]] = constant %[[VAL_8]] {bb = 0 : ui32, value = 1 : index} : index
// CHECK:           %[[VAL_14:.*]] = constant %[[VAL_8]] {bb = 0 : ui32, value = 2 : index} : index
// CHECK:           %[[VAL_9]], %[[VAL_15:.*]] = lsq_load{{\[}}%[[VAL_12]]] %[[VAL_6]]#0 {bb = 0 : ui32} : index, i32
// CHECK:           %[[VAL_4]], %[[VAL_16:.*]] = mc_load{{\[}}%[[VAL_13]]] %[[VAL_2]]#0 {bb = 0 : ui32} : index, i32
// CHECK:           %[[VAL_17:.*]] = br %[[VAL_12]] {bb = 0 : ui32} : index
// CHECK:           %[[VAL_18:.*]] = br %[[VAL_14]] {bb = 0 : ui32} : index
// CHECK:           %[[VAL_19:.*]] = br %[[VAL_8]] {bb = 0 : ui32} : none
// CHECK:           %[[VAL_20:.*]] = merge %[[VAL_17]] {bb = 1 : ui32} : index
// CHECK:           %[[VAL_21:.*]] = merge %[[VAL_18]] {bb = 1 : ui32} : index
// CHECK:           %[[VAL_10]], %[[VAL_22:.*]] = control_merge %[[VAL_19]] {bb = 1 : ui32} : none, index
// CHECK:           %[[VAL_11]], %[[VAL_23:.*]] = lsq_load{{\[}}%[[VAL_20]]] %[[VAL_6]]#1 {bb = 1 : ui32} : index, i32
// CHECK:           %[[VAL_5]], %[[VAL_24:.*]] = mc_load{{\[}}%[[VAL_21]]] %[[VAL_2]]#1 {bb = 1 : ui32} : index, i32
// CHECK:           %[[VAL_25:.*]] = arith.addi %[[VAL_23]], %[[VAL_24]] {bb = 1 : ui32} : i32
// CHECK:           %[[VAL_26:.*]] = d_return {bb = 1 : ui32} %[[VAL_25]] : i32
// CHECK:           end {bb = 1 : ui32} %[[VAL_26]], %[[VAL_3]], %[[VAL_7]] : i32, none, none
// CHECK:         }
func.func @mixLSQAndMCLoads(%mem: memref<64xi32>) -> i32 {
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c2 = arith.constant 2 : index
  %ldData1 = memref.load %mem[%c0] {mem_interface = #handshake.mem_interface<LSQ: 0>} : memref<64xi32>
  %ldData2 = memref.load %mem[%c1] {mem_interface = #handshake.mem_interface<MC>} : memref<64xi32>
  cf.br ^bb1
^bb1:
  %ldData3 = memref.load %mem[%c0] {mem_interface = #handshake.mem_interface<LSQ: 1>} : memref<64xi32>
  %ldData4 = memref.load %mem[%c2] {mem_interface = #handshake.mem_interface<MC>} : memref<64xi32>
  %add = arith.addi %ldData3, %ldData4 : i32
  return %add : i32
}

// -----

// CHECK-LABEL:   handshake.func @mixLSQAndMCStores(
// CHECK-SAME:                                      %[[VAL_0:.*]]: memref<64xi32>,
// CHECK-SAME:                                      %[[VAL_1:.*]]: i32,
// CHECK-SAME:                                      %[[VAL_2:.*]]: none, ...) -> i32 attributes {argNames = ["in0", "in1", "in2"], resNames = ["out0"]} {
// CHECK:           %[[VAL_3:.*]], %[[VAL_4:.*]] = mem_controller{{\[}}%[[VAL_0]] : memref<64xi32>] (%[[VAL_5:.*]], %[[VAL_6:.*]], %[[VAL_7:.*]], %[[VAL_8:.*]], %[[VAL_9:.*]]#0, %[[VAL_9]]#1, %[[VAL_9]]#2) {connectedBlocks = [0 : i32, 1 : i32]} : (i32, index, i32, i32, index, index, i32) -> (i32, none)
// CHECK:           %[[VAL_9]]:3, %[[VAL_10:.*]] = lsq[MC] (%[[VAL_11:.*]], %[[VAL_12:.*]], %[[VAL_13:.*]], %[[VAL_14:.*]], %[[VAL_15:.*]], %[[VAL_16:.*]], %[[VAL_3]])  {groupSizes = [1 : i32, 1 : i32]} : (none, index, i32, none, index, i32, i32) -> (index, index, i32, none)
// CHECK:           %[[VAL_17:.*]] = merge %[[VAL_1]] {bb = 0 : ui32} : i32
// CHECK:           %[[VAL_11]] = merge %[[VAL_2]] {bb = 0 : ui32} : none
// CHECK:           %[[VAL_5]] = constant %[[VAL_11]] {bb = 0 : ui32, value = 2 : i32} : i32
// CHECK:           %[[VAL_18:.*]] = constant %[[VAL_11]] {bb = 0 : ui32, value = 0 : index} : index
// CHECK:           %[[VAL_19:.*]] = constant %[[VAL_11]] {bb = 0 : ui32, value = 1 : index} : index
// CHECK:           %[[VAL_20:.*]] = constant %[[VAL_11]] {bb = 0 : ui32, value = 2 : index} : index
// CHECK:           %[[VAL_12]], %[[VAL_13]] = lsq_store{{\[}}%[[VAL_18]]] %[[VAL_17]] {bb = 0 : ui32} : i32, index
// CHECK:           %[[VAL_6]], %[[VAL_7]] = mc_store{{\[}}%[[VAL_19]]] %[[VAL_17]] {bb = 0 : ui32} : i32, index
// CHECK:           %[[VAL_21:.*]] = br %[[VAL_17]] {bb = 0 : ui32} : i32
// CHECK:           %[[VAL_22:.*]] = br %[[VAL_20]] {bb = 0 : ui32} : index
// CHECK:           %[[VAL_23:.*]] = br %[[VAL_11]] {bb = 0 : ui32} : none
// CHECK:           %[[VAL_24:.*]] = merge %[[VAL_21]] {bb = 1 : ui32} : i32
// CHECK:           %[[VAL_25:.*]] = merge %[[VAL_22]] {bb = 1 : ui32} : index
// CHECK:           %[[VAL_14]], %[[VAL_26:.*]] = control_merge %[[VAL_23]] {bb = 1 : ui32} : none, index
// CHECK:           %[[VAL_8]] = constant %[[VAL_14]] {bb = 1 : ui32, value = 1 : i32} : i32
// CHECK:           %[[VAL_15]], %[[VAL_16]] = lsq_store{{\[}}%[[VAL_25]]] %[[VAL_24]] {bb = 1 : ui32} : i32, index
// CHECK:           %[[VAL_27:.*]] = d_return {bb = 1 : ui32} %[[VAL_24]] : i32
// CHECK:           end {bb = 1 : ui32} %[[VAL_27]], %[[VAL_4]], %[[VAL_10]] : i32, none, none
// CHECK:         }
func.func @mixLSQAndMCStores(%mem: memref<64xi32>, %data : i32) -> i32 {
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  %c2 = arith.constant 2 : index
  memref.store %data, %mem[%c0] {mem_interface = #handshake.mem_interface<LSQ: 0>} : memref<64xi32>
  memref.store %data, %mem[%c1] {mem_interface = #handshake.mem_interface<MC>} : memref<64xi32>
  cf.br ^bb1(%data : i32)
^bb1(%stData : i32):
  memref.store %stData, %mem[%c2] {mem_interface = #handshake.mem_interface<LSQ: 1>} : memref<64xi32>
  return %stData : i32
}

// -----

// CHECK-LABEL:   handshake.func @ifThenElseSameLSQGroup(
// CHECK-SAME:                                           %[[VAL_0:.*]]: memref<64xi32>,
// CHECK-SAME:                                           %[[VAL_1:.*]]: index,
// CHECK-SAME:                                           %[[VAL_2:.*]]: none, ...) -> i32 attributes {argNames = ["in0", "in1", "in2"], resNames = ["out0"]} {
// CHECK:           %[[VAL_3:.*]]:3, %[[VAL_4:.*]] = mem_controller{{\[}}%[[VAL_0]] : memref<64xi32>] (%[[VAL_5:.*]], %[[VAL_6:.*]], %[[VAL_7:.*]], %[[VAL_8:.*]]#1, %[[VAL_8]]#2, %[[VAL_8]]#3) {connectedBlocks = [1 : i32, 2 : i32, 3 : i32]} : (index, index, i32, index, index, i32) -> (i32, i32, i32, none)
// CHECK:           %[[VAL_8]]:4, %[[VAL_9:.*]] = lsq[MC] (%[[VAL_10:.*]], %[[VAL_11:.*]], %[[VAL_12:.*]], %[[VAL_13:.*]], %[[VAL_3]]#2)  {groupSizes = [2 : i32]} : (none, index, index, i32, i32) -> (i32, index, index, i32, none)
// CHECK:           %[[VAL_14:.*]] = merge %[[VAL_1]] {bb = 0 : ui32} : index
// CHECK:           %[[VAL_10]] = merge %[[VAL_2]] {bb = 0 : ui32} : none
// CHECK:           %[[VAL_15:.*]] = source {bb = 0 : ui32}
// CHECK:           %[[VAL_16:.*]] = constant %[[VAL_15]] {bb = 0 : ui32, value = 0 : i32} : i32
// CHECK:           %[[VAL_11]], %[[VAL_17:.*]] = lsq_load{{\[}}%[[VAL_14]]] %[[VAL_8]]#0 {bb = 0 : ui32} : index, i32
// CHECK:           %[[VAL_18:.*]] = arith.cmpi eq, %[[VAL_17]], %[[VAL_16]] {bb = 0 : ui32} : i32
// CHECK:           %[[VAL_19:.*]], %[[VAL_20:.*]] = cond_br %[[VAL_18]], %[[VAL_14]] {bb = 0 : ui32} : index
// CHECK:           %[[VAL_21:.*]], %[[VAL_22:.*]] = cond_br %[[VAL_18]], %[[VAL_10]] {bb = 0 : ui32} : none
// CHECK:           %[[VAL_23:.*]], %[[VAL_24:.*]] = cond_br %[[VAL_18]], %[[VAL_14]] {bb = 0 : ui32} : index
// CHECK:           %[[VAL_25:.*]], %[[VAL_26:.*]] = cond_br %[[VAL_18]], %[[VAL_10]] {bb = 0 : ui32} : none
// CHECK:           %[[VAL_27:.*]] = merge %[[VAL_19]] {bb = 1 : ui32} : index
// CHECK:           %[[VAL_28:.*]], %[[VAL_29:.*]] = control_merge %[[VAL_21]] {bb = 1 : ui32} : none, index
// CHECK:           %[[VAL_30:.*]] = source {bb = 1 : ui32}
// CHECK:           %[[VAL_31:.*]] = constant %[[VAL_30]] {bb = 1 : ui32, value = 1 : index} : index
// CHECK:           %[[VAL_32:.*]] = arith.addi %[[VAL_31]], %[[VAL_27]] {bb = 1 : ui32} : index
// CHECK:           %[[VAL_5]], %[[VAL_33:.*]] = mc_load{{\[}}%[[VAL_32]]] %[[VAL_3]]#0 {bb = 1 : ui32} : index, i32
// CHECK:           %[[VAL_34:.*]] = br %[[VAL_33]] {bb = 1 : ui32} : i32
// CHECK:           %[[VAL_35:.*]] = br %[[VAL_27]] {bb = 1 : ui32} : index
// CHECK:           %[[VAL_36:.*]] = br %[[VAL_28]] {bb = 1 : ui32} : none
// CHECK:           %[[VAL_37:.*]] = merge %[[VAL_20]] {bb = 2 : ui32} : index
// CHECK:           %[[VAL_38:.*]], %[[VAL_39:.*]] = control_merge %[[VAL_22]] {bb = 2 : ui32} : none, index
// CHECK:           %[[VAL_40:.*]] = source {bb = 2 : ui32}
// CHECK:           %[[VAL_41:.*]] = constant %[[VAL_40]] {bb = 2 : ui32, value = 1 : index} : index
// CHECK:           %[[VAL_42:.*]] = arith.addi %[[VAL_41]], %[[VAL_37]] {bb = 2 : ui32} : index
// CHECK:           %[[VAL_6]], %[[VAL_43:.*]] = mc_load{{\[}}%[[VAL_42]]] %[[VAL_3]]#1 {bb = 2 : ui32} : index, i32
// CHECK:           %[[VAL_44:.*]] = br %[[VAL_43]] {bb = 2 : ui32} : i32
// CHECK:           %[[VAL_45:.*]] = br %[[VAL_37]] {bb = 2 : ui32} : index
// CHECK:           %[[VAL_46:.*]] = br %[[VAL_38]] {bb = 2 : ui32} : none
// CHECK:           %[[VAL_47:.*]] = mux %[[VAL_48:.*]] {{\[}}%[[VAL_44]], %[[VAL_34]]] {bb = 3 : ui32} : index, i32
// CHECK:           %[[VAL_49:.*]] = mux %[[VAL_48]] {{\[}}%[[VAL_45]], %[[VAL_35]]] {bb = 3 : ui32} : index, index
// CHECK:           %[[VAL_50:.*]], %[[VAL_48]] = control_merge %[[VAL_46]], %[[VAL_36]] {bb = 3 : ui32} : none, index
// CHECK:           %[[VAL_7]] = constant %[[VAL_50]] {bb = 3 : ui32, value = 1 : i32} : i32
// CHECK:           %[[VAL_12]], %[[VAL_13]] = lsq_store{{\[}}%[[VAL_49]]] %[[VAL_47]] {bb = 3 : ui32} : i32, index
// CHECK:           %[[VAL_51:.*]] = d_return {bb = 3 : ui32} %[[VAL_47]] : i32
// CHECK:           end {bb = 3 : ui32} %[[VAL_51]], %[[VAL_4]], %[[VAL_9]] : i32, none, none
// CHECK:         }
func.func @ifThenElseSameLSQGroup(%mem: memref<64xi32>, %idx: index) -> i32 {
  %c0 = arith.constant 0 : i32
  %ldData = memref.load %mem[%idx] {mem_interface = #handshake.mem_interface<LSQ: 0>} : memref<64xi32>
  %isEq = arith.cmpi eq, %ldData, %c0 : i32
  cf.cond_br %isEq, ^bb1, ^bb2
^bb1:
  %c1 = arith.constant 1 : index
  %add1 = arith.addi %c1, %idx : index
  %ldData1 = memref.load %mem[%add1] {mem_interface = #handshake.mem_interface<MC>} : memref<64xi32>
  cf.br ^bb3(%ldData1 : i32)
^bb2:
  %c2 = arith.constant 1 : index
  %add2 = arith.addi %c2, %idx : index
  %ldData2 = memref.load %mem[%add2] {mem_interface = #handshake.mem_interface<MC>}: memref<64xi32>
  cf.br ^bb3(%ldData2 : i32)
^bb3(%stData : i32):
  memref.store %stData, %mem[%idx] {mem_interface = #handshake.mem_interface<LSQ: 0>} : memref<64xi32>
  return %stData : i32
}
