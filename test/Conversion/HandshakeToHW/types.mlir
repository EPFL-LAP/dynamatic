// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py
// RUN: dynamatic-opt --lower-handshake-to-hw %s --split-input-file | FileCheck %s

// CHECK-LABEL:   hw.module @dontChangeTypes(in 
// CHECK-SAME:                                  %[[VAL_0:.*]] : !handshake.channel<i32>, in %[[VAL_1:.*]] : !handshake.control<>, in %[[VAL_2:.*]] : i1, in
// CHECK-SAME:                                  %[[VAL_3:.*]] : i1, out out0 : !handshake.control<>) {
// CHECK:           hw.instance "sink0" @handshake_sink_32(ins: %[[VAL_0]]: !handshake.channel<i32>, clk: %[[VAL_2]]: i1, rst: %[[VAL_3]]: i1) -> ()
// CHECK:           %[[VAL_4:.*]] = hw.instance "end0" @handshake_end_0_0(ins_0: %[[VAL_1]]: !handshake.control<>, clk: %[[VAL_2]]: i1, rst: %[[VAL_3]]: i1) -> (outs_0: !handshake.control<>)
// CHECK:           hw.output %[[VAL_4]] : !handshake.control<>
// CHECK:         }
// CHECK:         hw.module.extern @handshake_sink_32(in %[[VAL_5:.*]] : !handshake.channel<i32>, in %[[VAL_6:.*]] : i1, in %[[VAL_7:.*]] : i1) attributes {hw.name = "handshake.sink", hw.parameters = {DATA_WIDTH = 32 : ui32}}
// CHECK:         hw.module.extern @handshake_end_0_0(in %[[VAL_8:.*]] : !handshake.control<>, in %[[VAL_6]] : i1, in %[[VAL_7]] : i1, out outs_0 : !handshake.control<>) attributes {hw.name = "handshake.end", hw.parameters = {DATA_WIDTH = 0 : ui32, NUM_MEMORIES = 0 : ui32}}
handshake.func @dontChangeTypes(%arg : !handshake.channel<i32>, %start: !handshake.control<>) -> !handshake.control<> {
  sink %arg : <i32>
  end %start : <>
}

// -----

// CHECK-LABEL:   hw.module @lowerNonIntTypes(in 
// CHECK-SAME:                                   %[[VAL_0:.*]] : !handshake.channel<i32, [extra: i32]>, in %[[VAL_1:.*]] : !handshake.channel<i32, [extra: i32]>, in %[[VAL_2:.*]] : i1, in
// CHECK-SAME:                                   %[[VAL_3:.*]] : i1, out out0 : !handshake.channel<i32, [extra: i32]>) {
// CHECK:           %[[VAL_4:.*]] = hw.instance "addf0" @handshake_addf_32(lhs: %[[VAL_0]]: !handshake.channel<i32, [extra: i32]>, rhs: %[[VAL_1]]: !handshake.channel<i32, [extra: i32]>, clk: %[[VAL_2]]: i1, rst: %[[VAL_3]]: i1) -> (result: !handshake.channel<i32, [extra: i32]>)
// CHECK:           %[[VAL_5:.*]] = hw.instance "end0" @handshake_end_32_0(ins_0: %[[VAL_4]]: !handshake.channel<i32, [extra: i32]>, clk: %[[VAL_2]]: i1, rst: %[[VAL_3]]: i1) -> (outs_0: !handshake.channel<i32, [extra: i32]>)
// CHECK:           hw.output %[[VAL_5]] : !handshake.channel<i32, [extra: i32]>
// CHECK:         }
// CHECK:         hw.module.extern @handshake_addf_32(in %[[VAL_6:.*]] : !handshake.channel<i32, [extra: i32]>, in %[[VAL_7:.*]] : !handshake.channel<i32, [extra: i32]>, in %[[VAL_8:.*]] : i1, in %[[VAL_9:.*]] : i1, out result : !handshake.channel<i32, [extra: i32]>) attributes {hw.name = "handshake.addf", hw.parameters = {DATA_WIDTH = 32 : ui32}}
// CHECK:         hw.module.extern @handshake_end_32_0(in %[[VAL_10:.*]] : !handshake.channel<i32, [extra: i32]>, in %[[VAL_8]] : i1, in %[[VAL_9]] : i1, out outs_0 : !handshake.channel<i32, [extra: i32]>) attributes {hw.name = "handshake.end", hw.parameters = {DATA_WIDTH = 32 : ui32, NUM_MEMORIES = 0 : ui32}}
handshake.func @lowerNonIntTypes(%arg0 : !handshake.channel<f32, [extra: ui32]>, %arg1 : !handshake.channel<f32, [extra: ui32]>) -> !handshake.channel<f32, [extra: ui32]> {
  %res = addf %arg0, %arg1 : <f32, [extra: ui32]>
  end %res : <f32, [extra: ui32]>
}
