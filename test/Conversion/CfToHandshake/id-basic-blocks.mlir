// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py
// RUN: dynamatic-opt --lower-cf-to-handshake --remove-operation-names %s --split-input-file | FileCheck %s

// CHECK-LABEL:   handshake.func @simpleLoad(
// CHECK-SAME:                               %[[VAL_0:.*]]: memref<4xi32>, %[[VAL_1:.*]]: !handshake.channel<i32>,
// CHECK-SAME:                               %[[VAL_2:.*]]: !handshake.control<>, ...) -> !handshake.channel<i32> attributes {argNames = ["in0", "in1", "in2"], resNames = ["out0"]} {
// CHECK:           %[[VAL_3:.*]], %[[VAL_4:.*]] = mem_controller{{\[}}%[[VAL_0]] : memref<4xi32>] (%[[VAL_5:.*]]) {connectedBlocks = [0 : i32]} : (!handshake.channel<i32>) -> (!handshake.channel<i32>, !handshake.control<>)
// CHECK:           %[[VAL_5]], %[[VAL_6:.*]] = mc_load{{\[}}%[[VAL_1]]] %[[VAL_3]] {handshake.bb = 0 : ui32} : <i32>, <i32>
// CHECK:           %[[VAL_7:.*]] = return {handshake.bb = 0 : ui32} %[[VAL_6]] : <i32>
// CHECK:           end {handshake.bb = 0 : ui32} %[[VAL_7]], %[[VAL_4]] : <i32>, <>
// CHECK:         }
func.func @simpleLoad(%arg0: memref<4xi32>, %arg1: index) -> i32 {
  %0 = memref.load %arg0[%arg1] {mem_interface = #handshake.mem_interface<MC>} : memref<4xi32>
  return %0 : i32
}

// -----

// CHECK-LABEL:   handshake.func @ifThenElse(
// CHECK-SAME:                               %[[VAL_0:.*]]: !handshake.channel<i32>, %[[VAL_1:.*]]: !handshake.channel<i1>,
// CHECK-SAME:                               %[[VAL_2:.*]]: !handshake.control<>, ...) -> !handshake.channel<i32> attributes {argNames = ["in0", "in1", "in2"], resNames = ["out0"]} {
// CHECK:           %[[VAL_3:.*]], %[[VAL_4:.*]] = cond_br %[[VAL_1]], %[[VAL_0]] {handshake.bb = 0 : ui32} : <i1>, <i32>
// CHECK:           %[[VAL_5:.*]], %[[VAL_6:.*]] = cond_br %[[VAL_1]], %[[VAL_2]] {handshake.bb = 0 : ui32} : <i1>, <>
// CHECK:           %[[VAL_7:.*]] = merge %[[VAL_3]] {handshake.bb = 1 : ui32} : <i32>
// CHECK:           %[[VAL_8:.*]], %[[VAL_9:.*]] = control_merge %[[VAL_5]]  {handshake.bb = 1 : ui32} : <>, <i1>
// CHECK:           %[[VAL_10:.*]] = source {handshake.bb = 1 : ui32}
// CHECK:           %[[VAL_11:.*]] = constant %[[VAL_10]] {handshake.bb = 1 : ui32, value = 1 : i32} : <i32>
// CHECK:           %[[VAL_12:.*]] = addi %[[VAL_7]], %[[VAL_11]] {handshake.bb = 1 : ui32} : <i32>
// CHECK:           %[[VAL_13:.*]] = br %[[VAL_12]] {handshake.bb = 1 : ui32} : <i32>
// CHECK:           %[[VAL_14:.*]] = br %[[VAL_8]] {handshake.bb = 1 : ui32} : <>
// CHECK:           %[[VAL_15:.*]] = merge %[[VAL_4]] {handshake.bb = 2 : ui32} : <i32>
// CHECK:           %[[VAL_16:.*]], %[[VAL_17:.*]] = control_merge %[[VAL_6]]  {handshake.bb = 2 : ui32} : <>, <i1>
// CHECK:           %[[VAL_18:.*]] = source {handshake.bb = 2 : ui32}
// CHECK:           %[[VAL_19:.*]] = constant %[[VAL_18]] {handshake.bb = 2 : ui32, value = 2 : i32} : <i32>
// CHECK:           %[[VAL_20:.*]] = addi %[[VAL_15]], %[[VAL_19]] {handshake.bb = 2 : ui32} : <i32>
// CHECK:           %[[VAL_21:.*]] = br %[[VAL_20]] {handshake.bb = 2 : ui32} : <i32>
// CHECK:           %[[VAL_22:.*]] = br %[[VAL_16]] {handshake.bb = 2 : ui32} : <>
// CHECK:           %[[VAL_23:.*]] = mux %[[VAL_24:.*]] {{\[}}%[[VAL_13]], %[[VAL_21]]] {handshake.bb = 3 : ui32} : <i1>, <i32>
// CHECK:           %[[VAL_25:.*]], %[[VAL_24]] = control_merge %[[VAL_14]], %[[VAL_22]]  {handshake.bb = 3 : ui32} : <>, <i1>
// CHECK:           %[[VAL_26:.*]] = return {handshake.bb = 3 : ui32} %[[VAL_23]] : <i32>
// CHECK:           end {handshake.bb = 3 : ui32} %[[VAL_26]] : <i32>
// CHECK:         }
func.func @ifThenElse(%arg0: i32, %arg1: i1) -> i32 {
  cf.cond_br %arg1, ^bb1, ^bb2
^bb1:
  %c1 = arith.constant 1 : i32
  %res1 = arith.addi %arg0, %c1 : i32
  cf.br ^bb3(%res1 : i32)
^bb2:
  %c2 = arith.constant 2 : i32
  %res2 = arith.addi %arg0, %c2 : i32
  cf.br ^bb3(%res2 : i32)
^bb3(%res : i32):
  return %res : i32
}

// -----

// CHECK-LABEL:   handshake.func @multipleReturns(
// CHECK-SAME:                                    %[[VAL_0:.*]]: !handshake.channel<i32>, %[[VAL_1:.*]]: !handshake.channel<i1>,
// CHECK-SAME:                                    %[[VAL_2:.*]]: !handshake.control<>, ...) -> !handshake.channel<i32> attributes {argNames = ["in0", "in1", "in2"], resNames = ["out0"]} {
// CHECK:           %[[VAL_3:.*]], %[[VAL_4:.*]] = cond_br %[[VAL_1]], %[[VAL_0]] {handshake.bb = 0 : ui32} : <i1>, <i32>
// CHECK:           %[[VAL_5:.*]], %[[VAL_6:.*]] = cond_br %[[VAL_1]], %[[VAL_2]] {handshake.bb = 0 : ui32} : <i1>, <>
// CHECK:           %[[VAL_7:.*]] = merge %[[VAL_3]] {handshake.bb = 1 : ui32} : <i32>
// CHECK:           %[[VAL_8:.*]], %[[VAL_9:.*]] = control_merge %[[VAL_5]]  {handshake.bb = 1 : ui32} : <>, <i1>
// CHECK:           %[[VAL_10:.*]] = source {handshake.bb = 1 : ui32}
// CHECK:           %[[VAL_11:.*]] = constant %[[VAL_10]] {handshake.bb = 1 : ui32, value = 1 : i32} : <i32>
// CHECK:           %[[VAL_12:.*]] = addi %[[VAL_7]], %[[VAL_11]] {handshake.bb = 1 : ui32} : <i32>
// CHECK:           %[[VAL_13:.*]] = return {handshake.bb = 1 : ui32} %[[VAL_12]] : <i32>
// CHECK:           %[[VAL_14:.*]] = merge %[[VAL_4]] {handshake.bb = 2 : ui32} : <i32>
// CHECK:           %[[VAL_15:.*]], %[[VAL_16:.*]] = control_merge %[[VAL_6]]  {handshake.bb = 2 : ui32} : <>, <i1>
// CHECK:           %[[VAL_17:.*]] = source {handshake.bb = 2 : ui32}
// CHECK:           %[[VAL_18:.*]] = constant %[[VAL_17]] {handshake.bb = 2 : ui32, value = 2 : i32} : <i32>
// CHECK:           %[[VAL_19:.*]] = addi %[[VAL_14]], %[[VAL_18]] {handshake.bb = 2 : ui32} : <i32>
// CHECK:           %[[VAL_20:.*]] = return {handshake.bb = 2 : ui32} %[[VAL_19]] : <i32>
// CHECK:           %[[VAL_21:.*]] = merge %[[VAL_13]], %[[VAL_20]] {handshake.bb = 1 : ui32} : <i32>
// CHECK:           end {handshake.bb = 1 : ui32} %[[VAL_21]] : <i32>
// CHECK:         }
func.func @multipleReturns(%arg0: i32, %arg1: i1) -> i32 {
  cf.cond_br %arg1, ^bb1, ^bb2
^bb1:
  %c1 = arith.constant 1 : i32
  %res1 = arith.addi %arg0, %c1 : i32
  return %res1 : i32
^bb2:
  %c2 = arith.constant 2 : i32
  %res2 = arith.addi %arg0, %c2 : i32
  return %res2 : i32
}

// -----

// CHECK-LABEL:   handshake.func @simpleLoop(
// CHECK-SAME:                               %[[VAL_0:.*]]: !handshake.channel<i32>,
// CHECK-SAME:                               %[[VAL_1:.*]]: !handshake.control<>, ...) -> !handshake.control<> attributes {argNames = ["in0", "in1"], resNames = ["end"]} {
// CHECK:           %[[VAL_2:.*]] = constant %[[VAL_1]] {handshake.bb = 0 : ui32, value = 0 : i32} : <i32>
// CHECK:           %[[VAL_3:.*]] = constant %[[VAL_1]] {handshake.bb = 0 : ui32, value = 1 : i32} : <i32>
// CHECK:           %[[VAL_4:.*]] = br %[[VAL_2]] {handshake.bb = 0 : ui32} : <i32>
// CHECK:           %[[VAL_5:.*]] = br %[[VAL_0]] {handshake.bb = 0 : ui32} : <i32>
// CHECK:           %[[VAL_6:.*]] = br %[[VAL_3]] {handshake.bb = 0 : ui32} : <i32>
// CHECK:           %[[VAL_7:.*]] = br %[[VAL_1]] {handshake.bb = 0 : ui32} : <>
// CHECK:           %[[VAL_8:.*]] = mux %[[VAL_9:.*]] {{\[}}%[[VAL_4]], %[[VAL_10:.*]]] {handshake.bb = 1 : ui32} : <i1>, <i32>
// CHECK:           %[[VAL_11:.*]] = mux %[[VAL_9]] {{\[}}%[[VAL_5]], %[[VAL_12:.*]]] {handshake.bb = 1 : ui32} : <i1>, <i32>
// CHECK:           %[[VAL_13:.*]] = mux %[[VAL_9]] {{\[}}%[[VAL_6]], %[[VAL_14:.*]]] {handshake.bb = 1 : ui32} : <i1>, <i32>
// CHECK:           %[[VAL_15:.*]], %[[VAL_9]] = control_merge %[[VAL_7]], %[[VAL_16:.*]]  {handshake.bb = 1 : ui32} : <>, <i1>
// CHECK:           %[[VAL_17:.*]] = cmpi slt, %[[VAL_8]], %[[VAL_11]] {handshake.bb = 1 : ui32} : <i32>
// CHECK:           %[[VAL_18:.*]], %[[VAL_19:.*]] = cond_br %[[VAL_17]], %[[VAL_11]] {handshake.bb = 1 : ui32} : <i1>, <i32>
// CHECK:           %[[VAL_20:.*]], %[[VAL_21:.*]] = cond_br %[[VAL_17]], %[[VAL_13]] {handshake.bb = 1 : ui32} : <i1>, <i32>
// CHECK:           %[[VAL_22:.*]], %[[VAL_23:.*]] = cond_br %[[VAL_17]], %[[VAL_8]] {handshake.bb = 1 : ui32} : <i1>, <i32>
// CHECK:           %[[VAL_24:.*]], %[[VAL_25:.*]] = cond_br %[[VAL_17]], %[[VAL_15]] {handshake.bb = 1 : ui32} : <i1>, <>
// CHECK:           %[[VAL_26:.*]] = merge %[[VAL_18]] {handshake.bb = 2 : ui32} : <i32>
// CHECK:           %[[VAL_27:.*]] = merge %[[VAL_20]] {handshake.bb = 2 : ui32} : <i32>
// CHECK:           %[[VAL_28:.*]] = merge %[[VAL_22]] {handshake.bb = 2 : ui32} : <i32>
// CHECK:           %[[VAL_29:.*]], %[[VAL_30:.*]] = control_merge %[[VAL_24]]  {handshake.bb = 2 : ui32} : <>, <i1>
// CHECK:           %[[VAL_31:.*]] = addi %[[VAL_28]], %[[VAL_27]] {handshake.bb = 2 : ui32} : <i32>
// CHECK:           %[[VAL_10]] = br %[[VAL_31]] {handshake.bb = 2 : ui32} : <i32>
// CHECK:           %[[VAL_12]] = br %[[VAL_26]] {handshake.bb = 2 : ui32} : <i32>
// CHECK:           %[[VAL_14]] = br %[[VAL_27]] {handshake.bb = 2 : ui32} : <i32>
// CHECK:           %[[VAL_16]] = br %[[VAL_29]] {handshake.bb = 2 : ui32} : <>
// CHECK:           %[[VAL_32:.*]], %[[VAL_33:.*]] = control_merge %[[VAL_25]]  {handshake.bb = 3 : ui32} : <>, <i1>
// CHECK:           %[[VAL_34:.*]] = return {handshake.bb = 3 : ui32} %[[VAL_32]] : <>
// CHECK:           end {handshake.bb = 3 : ui32} %[[VAL_34]] : <>
// CHECK:         }
func.func @simpleLoop(%arg0: index) {
  %c0 = arith.constant 0 : index
  %c1 = arith.constant 1 : index
  cf.br ^bb1(%c0 : index)
^bb1(%1: index):
  %cmp = arith.cmpi slt, %1, %arg0 : index
  cf.cond_br %cmp, ^bb2, ^bb3
^bb2:
  %2 = arith.addi %1, %c1 : index
  cf.br ^bb1(%2 : index)
^bb3:
  return
}
