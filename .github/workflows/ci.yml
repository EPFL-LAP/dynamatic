name: CI

on:
  # Make sure that settings are set to require permission
  # to run workflows by external contributors!
  pull_request:
    branches: ["main"]
    types: [opened, synchronize, reopened, ready_for_review]
  
  push:
    branches: ["main"]

jobs:
  check-format:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: check-format-cpp
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 20
          sudo apt-get -y update
          sudo apt-get -y install clang-format-20
          sudo rm /usr/bin/clang-format
          sudo ln -s $(which clang-format-20) /usr/bin/clang-format
          clang-format --version
          git fetch origin main --no-recurse-submodules
          git clang-format-20 --diff FETCH_HEAD --extensions c,h,m,mm,cc,cp,cpp,c++,cxx,hh,hpp,hxx,inc

      - name: check-format-python
        if: success() || failure()
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install autopep8==2.3.2
          echo "Running autopep8..."
          git fetch origin main --no-recurse-submodules
          git reset FETCH_HEAD
          FILES=$(comm -23 <(git ls-files '*.py' --modified | sort) <(git ls-files '*.py' --deleted | sort))
          STATUS=$?
          if [[ $FILES ]]; then
            exec 3>&1
            OUTPUT=$(autopep8 --max-line-length 200 --diff $FILES 3>&- | tee /dev/fd/3)
            exec 3>&-
            if [[ $OUTPUT ]]; then
              STATUS=1
            else
              STATUS=0
            fi
          else
            STATUS=0
          fi
          echo "autopep8 exited with $STATUS"
          deactivate
          exit $STATUS

  integration:
    if: github.event.pull_request.draft == false
    runs-on: self-hosted

    steps:
      - name: cleanup
        run: |
          echo "Emptying folder"
          rm -rf -- * .*
          echo "Folder contents"
          ls -la

      - uses: actions/checkout@v4
        with:
          submodules: recursive
          ref: ${{github.event.pull_request.head.ref}}
          repository: ${{github.event.pull_request.head.repo.full_name}}

      - name: build
        run: ./build.sh --release --force

      - name: check-dynamatic
        if: steps.build.outputs.exit_code == 0
        run: ninja -C build check-dynamatic

      - name: check-dynamatic-experimental
        if: steps.build.outputs.exit_code == 0
        run: ninja -C build check-dynamatic-experimental

      - name: integration-test
        if: steps.build.outputs.exit_code == 0
        run: ninja -C build run-ci-integration-tests

      - name: performance-report
        run: |
          STATUS=0
          set -o pipefail
          if [ -f $HOME/perf_ci_saved.json ]; then
            echo "Found saved performance report"
            ls -lh $HOME/perf_ci_saved.json
            python tools/integration/generate_perf_report.py \
              --save perf_ci_branch.json --compare $HOME/perf_ci_saved.json --fail 5 | tee performance.md >> $GITHUB_STEP_SUMMARY
            STATUS=$?
          else
            echo "Note: Saved performance report not found"
            python tools/integration/generate_perf_report.py \
              --save perf_ci_branch.json | tee performance.md >> $GITHUB_STEP_SUMMARY
            STATUS=$?
          fi
          echo "Perf report generator exited with" $STATUS
          exit $STATUS
      
      - name: save-perf-report
        if: (success() || failure()) && github.event_name == 'push'
        run: |
          cp perf_ci_branch.json $HOME/perf_ci_saved.json

      - uses: actions/upload-artifact@v4
        if: success() || failure()
        with: 
          name: integration-report
          path: |
            integration-test/**/out*/comp
            integration-test/**/out*/sim/report.txt
            integration-test/**/out/dynamatic_out.txt
            integration-test/**/out/dynamatic_err.txt

